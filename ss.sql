-- phpMyAdmin SQL Dump
-- version 5.2.0
-- https://www.phpmyadmin.net/
--
-- Host: 127.0.0.1
-- Generation Time: May 14, 2023 at 09:49 PM
-- Server version: 10.4.24-MariaDB
-- PHP Version: 7.4.29

SET SQL_MODE = "NO_AUTO_VALUE_ON_ZERO";
START TRANSACTION;
SET time_zone = "+00:00";


/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8mb4 */;

--
-- Database: `ss`
--

-- --------------------------------------------------------

--
-- Table structure for table `answers`
--

CREATE TABLE `answers` (
  `aid` int(255) NOT NULL,
  `answer` varchar(255) DEFAULT NULL,
  `ans_id` int(250) DEFAULT NULL,
  `course_name` varchar(255) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `answers`
--

INSERT INTO `answers` (`aid`, `answer`, `ans_id`, `course_name`) VALUES
(1, 'Home Tool Markup Language', 1, 'html'),
(2, 'Hyperlinks and Text Markup Language', 1, 'html'),
(3, ' Hyper Text Markup Language', 1, 'html'),
(4, ' Hyper Train Markup Language', 1, 'html'),
(5, '  Mozilla', 2, 'html'),
(6, '  Google', 2, 'html'),
(7, 'Microsoft', 2, 'html'),
(8, 'W3C', 2, 'html'),
(9, '<head>', 3, 'html'),
(10, '<heading>', 3, 'html'),
(11, '<h6>', 3, 'html'),
(12, '<h1>', 3, 'html'),
(13, '<lb>', 4, 'html'),
(14, '<br>', 4, 'html'),
(15, '<break>', 4, 'html'),
(16, '<bk>', 4, 'html'),
(17, 'programming language', 5, 'java'),
(18, 'web designing language', 5, 'java'),
(19, 'OOPS language', 5, 'java'),
(20, 'general purpose language', 5, 'java');

-- --------------------------------------------------------

--
-- Table structure for table `category`
--

CREATE TABLE `category` (
  `id` int(4) NOT NULL,
  `cat_name` varchar(100) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `category`
--

INSERT INTO `category` (`id`, `cat_name`) VALUES
(1, 'php'),
(2, 'java'),
(3, 'javascript'),
(4, 'python'),
(5, 'android'),
(6, 'jQuery'),
(8, 'IR'),
(9, 'hadoop'),
(10, 'hadoop'),
(11, 'comedy nights'),
(12, 'css'),
(13, 'spring');

-- --------------------------------------------------------

--
-- Table structure for table `commentsection`
--

CREATE TABLE `commentsection` (
  `cid` int(11) NOT NULL,
  `uid` varchar(120) NOT NULL,
  `date` datetime NOT NULL,
  `message` text NOT NULL,
  `video_id` int(255) NOT NULL,
  `video_path` varchar(255) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `commentsection`
--

INSERT INTO `commentsection` (`cid`, `uid`, `date`, `message`, `video_id`, `video_path`) VALUES
(153, 'sunil yadav', '2019-04-15 19:05:17', '5', 50, 'comedy knights'),
(155, 'sunil', '2021-03-13 15:50:57', 'very helpful', 51, '');

-- --------------------------------------------------------

--
-- Table structure for table `courses`
--

CREATE TABLE `courses` (
  `id` int(11) NOT NULL,
  `topic_name` varchar(255) NOT NULL,
  `description` text NOT NULL,
  `course_name` varchar(255) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `courses`
--

INSERT INTO `courses` (`id`, `topic_name`, `description`, `course_name`) VALUES
(1, 'JAVA_HOME', '<h1 style=\"margin-left:200px\"><span style=\"color:#3498db\"><strong>Java Tutorial</strong></span></h1>\r\n\r\n<p>Java is a high-level programming language originally developed by Sun Microsystems and released in 1995. Java runs on a variety of platforms, such as Windows, Mac OS, and the various versions of UNIX. This tutorial gives a complete understanding of Java. This reference will take you through simple and practical approaches while learning Java Programming language.</p>\r\n\r\n<h1>Audience</h1>\r\n\r\n<p>This tutorial has been prepared for the beginners to help them understand the basic to advanced concepts related to Java Programming language.</p>\r\n\r\n<h1>Prerequisites</h1>\r\n\r\n<p>Before you start practicing various types of examples given in this reference, we assume that you are already aware about computer programs and computer programming languages.</p>\r\n', 'java'),
(2, 'Java - Overview', '<h1 style=\"margin-left:160px\"><span style=\"color:#3498db\"><strong>Java - Overview</strong></span></h1>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Java programming language was originally developed by Sun Microsystems which was initiated by James Gosling and released in 1995 as core component of Sun Microsystems&#39; Java platform (Java 1.0 [J2SE]).</p>\r\n\r\n<p>The latest release of the Java Standard Edition is Java SE 8. With the advancement of Java and its widespread popularity, multiple configurations were built to suit various types of platforms. For example: J2EE for Enterprise Applications, J2ME for Mobile Applications.</p>\r\n\r\n<p>The new J2 versions were renamed as Java SE, Java EE, and Java ME respectively. Java is guaranteed to be&nbsp;<strong>Write Once, Run Anywhere.</strong></p>\r\n\r\n<p>Java is &minus;</p>\r\n\r\n<ul>\r\n	<li>\r\n	<p><strong>Object Oriented</strong>&nbsp;&minus; In Java, everything is an Object. Java can be easily extended since it is based on the Object model.</p>\r\n	</li>\r\n	<li>\r\n	<p><strong>Platform Independent</strong>&nbsp;&minus; Unlike many other programming languages including C and C++, when Java is compiled, it is not compiled into platform specific machine, rather into platform independent byte code. This byte code is distributed over the web and interpreted by the Virtual Machine (JVM) on whichever platform it is being run on.</p>\r\n	</li>\r\n	<li>\r\n	<p><strong>Simple</strong>&nbsp;&minus; Java is designed to be easy to learn. If you understand the basic concept of OOP Java, it would be easy to master.</p>\r\n	</li>\r\n	<li>\r\n	<p><strong>Secure</strong>&nbsp;&minus; With Java&#39;s secure feature it enables to develop virus-free, tamper-free systems. Authentication techniques are based on public-key encryption.</p>\r\n	</li>\r\n	<li>\r\n	<p><strong>Architecture-neutral</strong>&nbsp;&minus; Java compiler generates an architecture-neutral object file format, which makes the compiled code executable on many processors, with the presence of Java runtime system.</p>\r\n	</li>\r\n	<li>\r\n	<p><strong>Portable</strong>&nbsp;&minus; Being architecture-neutral and having no implementation dependent aspects of the specification makes Java portable. Compiler in Java is written in ANSI C with a clean portability boundary, which is a POSIX subset.</p>\r\n	</li>\r\n	<li>\r\n	<p><strong>Robust</strong>&nbsp;&minus; Java makes an effort to eliminate error prone situations by emphasizing mainly on compile time error checking and runtime checking.</p>\r\n	</li>\r\n	<li>\r\n	<p><strong>Multithreaded</strong>&nbsp;&minus; With Java&#39;s multithreaded feature it is possible to write programs that can perform many tasks simultaneously. This design feature allows the developers to construct interactive applications that can run smoothly.</p>\r\n	</li>\r\n	<li>\r\n	<p><strong>Interpreted</strong>&nbsp;&minus; Java byte code is translated on the fly to native machine instructions and is not stored anywhere. The development process is more rapid and analytical since the linking is an incremental and light-weight process.</p>\r\n	</li>\r\n	<li>\r\n	<p><strong>High Performance</strong>&nbsp;&minus; With the use of Just-In-Time compilers, Java enables high performance.</p>\r\n	</li>\r\n	<li>\r\n	<p><strong>Distributed</strong>&nbsp;&minus; Java is designed for the distributed environment of the internet.</p>\r\n	</li>\r\n	<li>\r\n	<p><strong>Dynamic</strong>&nbsp;&minus; Java is considered to be more dynamic than C or C++ since it is designed to adapt to an evolving environment. Java programs can carry extensive amount of run-time information that can be used to verify and resolve accesses to objects on run-time.</p>\r\n	</li>\r\n</ul>\r\n\r\n<h2>History of Java</h2>\r\n\r\n<p>James Gosling initiated Java language project in June 1991 for use in one of his many set-top box projects. The language, initially called &lsquo;Oak&rsquo; after an oak tree that stood outside Gosling&#39;s office, also went by the name &lsquo;Green&rsquo; and ended up later being renamed as Java, from a list of random words.</p>\r\n\r\n<p>Sun released the first public implementation as Java 1.0 in 1995. It promised&nbsp;<strong>Write Once, Run Anywhere</strong>&nbsp;(WORA), providing no-cost run-times on popular platforms.</p>\r\n\r\n<p>On 13 November, 2006, Sun released much of Java as free and open source software under the terms of the GNU General Public License (GPL).</p>\r\n\r\n<p>On 8 May, 2007, Sun finished the process, making all of Java&#39;s core code free and open-source, aside from a small portion of code to which Sun did not hold the copyright.</p>\r\n\r\n<h2>Tools You Will Need</h2>\r\n\r\n<p>For performing the examples discussed in this tutorial, you will need a Pentium 200-MHz computer with a minimum of 64 MB of RAM (128 MB of RAM recommended).</p>\r\n\r\n<p>You will also need the following softwares &minus;</p>\r\n\r\n<ul>\r\n	<li>Linux 7.1 or Windows xp/7/8 operating system</li>\r\n	<li>Java JDK 8</li>\r\n	<li>Microsoft Notepad or any other text editor</li>\r\n</ul>\r\n\r\n<p>This tutorial will provide the necessary skills to create GUI, networking, and web applications using Java.</p>\r\n\r\n<h2>What is Next?</h2>\r\n\r\n<p>The next chapter will guide you to how you can obtain Java and its documentation. Finally, it instructs you on how to install Java and prepare an environment to develop Java applications.</p>\r\n', 'java'),
(33, 'Java - Environment Setup', '<h1 style=\"margin-left:120px\"><span style=\"font-size:24px\"><span style=\"color:#3498db\"><strong>Java - Environment Setup</strong></span></span></h1>\r\n\r\n<p>In this chapter, we will discuss on the different aspects of setting up a congenial environment for Java.</p>\r\n\r\n<h2>Local Environment Setup</h2>\r\n\r\n<p>If you are still willing to set up your environment for Java programming language, then this section guides you on how to download and set up Java on your machine. Following are the steps to set up the environment.</p>\r\n\r\n<p>Java SE is freely available from the link&nbsp;<a href=\"https://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html\" rel=\"nofollow\" target=\"_blank\">Download Java</a>. You can download a version based on your operating system.</p>\r\n\r\n<p>Follow the instructions to download Java and run the&nbsp;<strong>.exe</strong>&nbsp;to install Java on your machine. Once you installed Java on your machine, you will need to set environment variables to point to correct installation directories &minus;</p>\r\n\r\n<h3>Setting Up the Path for Windows</h3>\r\n\r\n<p>Assuming you have installed Java in&nbsp;<em>c:Program Filesjavajdk</em>&nbsp;directory &minus;</p>\r\n\r\n<ul>\r\n	<li>\r\n	<p>Right-click on &#39;My Computer&#39; and select &#39;Properties&#39;.</p>\r\n	</li>\r\n	<li>\r\n	<p>Click the &#39;Environment variables&#39; button under the &#39;Advanced&#39; tab.</p>\r\n	</li>\r\n	<li>\r\n	<p>Now, alter the &#39;Path&#39; variable so that it also contains the path to the Java executable. Example, if the path is currently set to &#39;C:WINDOWSSYSTEM32&#39;, then change your path to read &#39;C:WINDOWSSYSTEM32;c:Program Filesjavajdkin&#39;.</p>\r\n	</li>\r\n</ul>\r\n\r\n<h3>Setting Up the Path for Linux, UNIX, Solaris, FreeBSD</h3>\r\n\r\n<p>Environment variable PATH should be set to point to where the Java binaries have been installed. Refer to your shell documentation, if you have trouble doing this.</p>\r\n\r\n<p>Example, if you use&nbsp;<em>bash</em>&nbsp;as your shell, then you would add the following line to the end of your &#39;.bashrc: export PATH = /path/to/java:$PATH&#39;</p>\r\n\r\n<h2>Popular Java Editors</h2>\r\n\r\n<p>To write your Java programs, you will need a text editor. There are even more sophisticated IDEs available in the market. But for now, you can consider one of the following &minus;</p>\r\n\r\n<ul>\r\n	<li>\r\n	<p><strong>Notepad</strong>&nbsp;&minus; On Windows machine, you can use any simple text editor like Notepad (Recommended for this tutorial), TextPad.</p>\r\n	</li>\r\n	<li>\r\n	<p><strong>Netbeans</strong>&nbsp;&minus; A Java IDE that is open-source and free which can be downloaded from&nbsp;<a href=\"https://www.netbeans.org/index.html\" rel=\"nofollow\" target=\"_blank\">https://www.netbeans.org/index.html</a>.</p>\r\n	</li>\r\n	<li>\r\n	<p><strong>Eclipse</strong>&nbsp;&minus; A Java IDE developed by the eclipse open-source community and can be downloaded from&nbsp;<a href=\"https://www.eclipse.org/\" rel=\"nofollow\" target=\"_blank\">https://www.eclipse.org/</a>.</p>\r\n	</li>\r\n</ul>\r\n\r\n<h2>What is Next?</h2>\r\n\r\n<p>Next chapter will teach you how to write and run your first Java program and some of the important basic syntaxes in Java needed for developing applications.</p>\r\n', 'java'),
(34, 'Java - Basic Syntax', '<h1 style=\"margin-left:80px\"><span style=\"color:#3498db\"><span style=\"font-size:24px\">Java - Basic Syntax</span></span></h1>\r\n\r\n<p>When we consider a Java program, it can be defined as a collection of objects that communicate via invoking each other&#39;s methods. Let us now briefly look into what do class, object, methods, and instance variables mean.</p>\r\n\r\n<ul>\r\n	<li>\r\n	<p><strong>Object</strong>&nbsp;&minus; Objects have states and behaviors. Example: A dog has states - color, name, breed as well as behavior such as wagging their tail, barking, eating. An object is an instance of a class.</p>\r\n	</li>\r\n	<li>\r\n	<p><strong>Class</strong>&nbsp;&minus; A class can be defined as a template/blueprint that describes the behavior/state that the object of its type supports.</p>\r\n	</li>\r\n	<li>\r\n	<p><strong>Methods</strong>&nbsp;&minus; A method is basically a behavior. A class can contain many methods. It is in methods where the logics are written, data is manipulated and all the actions are executed.</p>\r\n	</li>\r\n	<li>\r\n	<p><strong>Instance Variables</strong>&nbsp;&minus; Each object has its unique set of instance variables. An object&#39;s state is created by the values assigned to these instance variables.</p>\r\n	</li>\r\n</ul>\r\n\r\n<h2>First Java Program</h2>\r\n\r\n<p>Let us look at a simple code that will print the words&nbsp;<strong><em>Hello World</em></strong>.</p>\r\n\r\n<h3>Example</h3>\r\n\r\n<p><a href=\"http://tpcg.io/tv5b2l\" rel=\"nofollow\" target=\"_blank\">&nbsp;Live Demo</a></p>\r\n\r\n<pre>\r\npublic class MyFirstJavaProgram {\r\n\r\n   /* This is my first java program.\r\n    * This will print &#39;Hello World&#39; as the output\r\n    */\r\n\r\n   public static void main(String []args) {\r\n      System.out.println(&quot;Hello World&quot;); // prints Hello World\r\n   }\r\n}</pre>\r\n\r\n<p>Let&#39;s look at how to save the file, compile, and run the program. Please follow the subsequent steps &minus;</p>\r\n\r\n<ul>\r\n	<li>\r\n	<p>Open notepad and add the code as above.</p>\r\n	</li>\r\n	<li>\r\n	<p>Save the file as: MyFirstJavaProgram.java.</p>\r\n	</li>\r\n	<li>\r\n	<p>Open a command prompt window and go to the directory where you saved the class. Assume it&#39;s C:.</p>\r\n	</li>\r\n	<li>\r\n	<p>Type &#39;javac MyFirstJavaProgram.java&#39; and press enter to compile your code. If there are no errors in your code, the command prompt will take you to the next line (Assumption : The path variable is set).</p>\r\n	</li>\r\n	<li>\r\n	<p>Now, type &#39; java MyFirstJavaProgram &#39; to run your program.</p>\r\n	</li>\r\n	<li>\r\n	<p>You will be able to see &#39; Hello World &#39; printed on the window.</p>\r\n	</li>\r\n</ul>\r\n\r\n<h3>Output</h3>\r\n\r\n<pre>\r\nC:&gt; javac MyFirstJavaProgram.java\r\nC:&gt; java MyFirstJavaProgram \r\nHello World\r\n</pre>\r\n\r\n<h2>Basic Syntax</h2>\r\n\r\n<p>About Java programs, it is very important to keep in mind the following points.</p>\r\n\r\n<ul>\r\n	<li>\r\n	<p><strong>Case Sensitivity</strong>&nbsp;&minus; Java is case sensitive, which means identifier&nbsp;<strong>Hello</strong>&nbsp;and&nbsp;<strong>hello</strong>&nbsp;would have different meaning in Java.</p>\r\n	</li>\r\n	<li>\r\n	<p><strong>Class Names</strong>&nbsp;&minus; For all class names the first letter should be in Upper Case. If several words are used to form a name of the class, each inner word&#39;s first letter should be in Upper Case.</p>\r\n\r\n	<p><strong>Example:</strong>&nbsp;<em>class MyFirstJavaClass</em></p>\r\n	</li>\r\n	<li>\r\n	<p><strong>Method Names</strong>&nbsp;&minus; All method names should start with a Lower Case letter. If several words are used to form the name of the method, then each inner word&#39;s first letter should be in Upper Case.</p>\r\n\r\n	<p><strong>Example:</strong>&nbsp;<em>public void myMethodName()</em></p>\r\n	</li>\r\n	<li>\r\n	<p><strong>Program File Name</strong>&nbsp;&minus; Name of the program file should exactly match the class name.</p>\r\n\r\n	<p>When saving the file, you should save it using the class name (Remember Java is case sensitive) and append &#39;.java&#39; to the end of the name (if the file name and the class name do not match, your program will not compile).</p>\r\n\r\n	<p>But please make a note that in case you do not have a public class present in the file then file name can be different than class name. It is also not mandatory to have a public class in the file.</p>\r\n\r\n	<p><strong>Example:</strong>&nbsp;Assume &#39;MyFirstJavaProgram&#39; is the class name. Then the file should be saved as&nbsp;<em>&#39;MyFirstJavaProgram.java&#39;</em></p>\r\n	</li>\r\n	<li>\r\n	<p><strong>public static void main(String args[])</strong>&nbsp;&minus; Java program processing starts from the main() method which is a mandatory part of every Java program.</p>\r\n	</li>\r\n</ul>\r\n\r\n<h2>Java Identifiers</h2>\r\n\r\n<p>All Java components require names. Names used for classes, variables, and methods are called&nbsp;<strong>identifiers</strong>.</p>\r\n\r\n<p>In Java, there are several points to remember about identifiers. They are as follows &minus;</p>\r\n\r\n<ul>\r\n	<li>\r\n	<p>All identifiers should begin with a letter (A to Z or a to z), currency character ($) or an underscore (_).</p>\r\n	</li>\r\n	<li>\r\n	<p>After the first character, identifiers can have any combination of characters.</p>\r\n	</li>\r\n	<li>\r\n	<p>A key word cannot be used as an identifier.</p>\r\n	</li>\r\n	<li>\r\n	<p>Most importantly, identifiers are case sensitive.</p>\r\n	</li>\r\n	<li>\r\n	<p>Examples of legal identifiers: age, $salary, _value, __1_value.</p>\r\n	</li>\r\n	<li>\r\n	<p>Examples of illegal identifiers: 123abc, -salary.</p>\r\n	</li>\r\n</ul>\r\n\r\n<h2>Java Modifiers</h2>\r\n\r\n<p>Like other languages, it is possible to modify classes, methods, etc., by using modifiers. There are two categories of modifiers &minus;</p>\r\n\r\n<ul>\r\n	<li>\r\n	<p><strong>Access Modifiers</strong>&nbsp;&minus; default, public , protected, private</p>\r\n	</li>\r\n	<li>\r\n	<p><strong>Non-access Modifiers</strong>&nbsp;&minus; final, abstract, strictfp</p>\r\n	</li>\r\n</ul>\r\n\r\n<p>We will be looking into more details about modifiers in the next section.</p>\r\n\r\n<h2>Java Variables</h2>\r\n\r\n<p>Following are the types of variables in Java &minus;</p>\r\n\r\n<ul>\r\n	<li>Local Variables</li>\r\n	<li>Class Variables (Static Variables)</li>\r\n	<li>Instance Variables (Non-static Variables)</li>\r\n</ul>\r\n\r\n<h2>Java Arrays</h2>\r\n\r\n<p>Arrays are objects that store multiple variables of the same type. However, an array itself is an object on the heap. We will look into how to declare, construct, and initialize in the upcoming chapters.</p>\r\n\r\n<h2>Java Enums</h2>\r\n\r\n<p>Enums were introduced in Java 5.0. Enums restrict a variable to have one of only a few predefined values. The values in this enumerated list are called enums.</p>\r\n\r\n<p>With the use of enums it is possible to reduce the number of bugs in your code.</p>\r\n\r\n<p>For example, if we consider an application for a fresh juice shop, it would be possible to restrict the glass size to small, medium, and large. This would make sure that it would not allow anyone to order any size other than small, medium, or large.</p>\r\n\r\n<h3>Example</h3>\r\n\r\n<p><a href=\"http://tpcg.io/VNJ9DE\" rel=\"nofollow\" target=\"_blank\">&nbsp;Live Demo</a></p>\r\n\r\n<pre>\r\nclass FreshJuice {\r\n   enum FreshJuiceSize{ SMALL, MEDIUM, LARGE }\r\n   FreshJuiceSize size;\r\n}\r\n\r\npublic class FreshJuiceTest {\r\n\r\n   public static void main(String args[]) {\r\n      FreshJuice juice = new FreshJuice();\r\n      juice.size = FreshJuice.FreshJuiceSize.MEDIUM ;\r\n      System.out.println(&quot;Size: &quot; + juice.size);\r\n   }\r\n}</pre>\r\n\r\n<p>The above example will produce the following result &minus;</p>\r\n\r\n<h3>Output</h3>\r\n\r\n<pre>\r\nSize: MEDIUM\r\n</pre>\r\n\r\n<p><strong>Note</strong>&nbsp;&minus; Enums can be declared as their own or inside a class. Methods, variables, constructors can be defined inside enums as well.</p>\r\n\r\n<h2>Java Keywords</h2>\r\n\r\n<p>The following list shows the reserved words in Java. These reserved words may not be used as constant or variable or any other identifier names.</p>\r\n\r\n<table>\r\n	<tbody>\r\n		<tr>\r\n			<td>abstract</td>\r\n			<td>assert</td>\r\n			<td>boolean</td>\r\n			<td>break</td>\r\n		</tr>\r\n		<tr>\r\n			<td>byte</td>\r\n			<td>case</td>\r\n			<td>catch</td>\r\n			<td>char</td>\r\n		</tr>\r\n		<tr>\r\n			<td>class</td>\r\n			<td>const</td>\r\n			<td>continue</td>\r\n			<td>default</td>\r\n		</tr>\r\n		<tr>\r\n			<td>do</td>\r\n			<td>double</td>\r\n			<td>else</td>\r\n			<td>enum</td>\r\n		</tr>\r\n		<tr>\r\n			<td>extends</td>\r\n			<td>final</td>\r\n			<td>finally</td>\r\n			<td>float</td>\r\n		</tr>\r\n		<tr>\r\n			<td>for</td>\r\n			<td>goto</td>\r\n			<td>if</td>\r\n			<td>implements</td>\r\n		</tr>\r\n		<tr>\r\n			<td>import</td>\r\n			<td>instanceof</td>\r\n			<td>int</td>\r\n			<td>interface</td>\r\n		</tr>\r\n		<tr>\r\n			<td>long</td>\r\n			<td>native</td>\r\n			<td>new</td>\r\n			<td>package</td>\r\n		</tr>\r\n		<tr>\r\n			<td>private</td>\r\n			<td>protected</td>\r\n			<td>public</td>\r\n			<td>return</td>\r\n		</tr>\r\n		<tr>\r\n			<td>short</td>\r\n			<td>static</td>\r\n			<td>strictfp</td>\r\n			<td>super</td>\r\n		</tr>\r\n		<tr>\r\n			<td>switch</td>\r\n			<td>synchronized</td>\r\n			<td>this</td>\r\n			<td>throw</td>\r\n		</tr>\r\n		<tr>\r\n			<td>throws</td>\r\n			<td>transient</td>\r\n			<td>try</td>\r\n			<td>void</td>\r\n		</tr>\r\n		<tr>\r\n			<td>volatile</td>\r\n			<td>while</td>\r\n			<td>&nbsp;</td>\r\n			<td>&nbsp;</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n\r\n<h2>Comments in Java</h2>\r\n\r\n<p>Java supports single-line and multi-line comments very similar to C and C++. All characters available inside any comment are ignored by Java compiler.</p>\r\n\r\n<h3>Example</h3>\r\n\r\n<p><a href=\"http://tpcg.io/RVBY2x\" rel=\"nofollow\" target=\"_blank\">&nbsp;Live Demo</a></p>\r\n\r\n<pre>\r\npublic class MyFirstJavaProgram {\r\n\r\n   /* This is my first java program.\r\n    * This will print &#39;Hello World&#39; as the output\r\n    * This is an example of multi-line comments.\r\n    */\r\n\r\n   public static void main(String []args) {\r\n      // This is an example of single line comment\r\n      /* This is also an example of single line comment. */\r\n      System.out.println(&quot;Hello World&quot;);\r\n   }\r\n}</pre>\r\n\r\n<h3>Output</h3>\r\n\r\n<pre>\r\nHello World\r\n</pre>\r\n\r\n<h2>Using Blank Lines</h2>\r\n\r\n<p>A line containing only white space, possibly with a comment, is known as a blank line, and Java totally ignores it.</p>\r\n\r\n<h2>Inheritance</h2>\r\n\r\n<p>In Java, classes can be derived from classes. Basically, if you need to create a new class and here is already a class that has some of the code you require, then it is possible to derive your new class from the already existing code.</p>\r\n\r\n<p>This concept allows you to reuse the fields and methods of the existing class without having to rewrite the code in a new class. In this scenario, the existing class is called the&nbsp;<strong>superclass</strong>&nbsp;and the derived class is called the&nbsp;<strong>subclass</strong>.</p>\r\n\r\n<h2>Interfaces</h2>\r\n\r\n<p>In Java language, an interface can be defined as a contract between objects on how to communicate with each other. Interfaces play a vital role when it comes to the concept of inheritance.</p>\r\n\r\n<p>An interface defines the methods, a deriving class (subclass) should use. But the implementation of the methods is totally up to the subclass.</p>\r\n\r\n<h2>What is Next?</h2>\r\n\r\n<p>The next section explains about Objects and classes in Java programming. At the end of the session, you will be able to get a clear picture as to what are objects and what are classes in Java.</p>\r\n', 'java'),
(35, 'Java - Object and Classes', '<h1 style=\"margin-left:80px\"><span style=\"color:#3498db\"><strong><span style=\"font-size:24px\">Java - Object and Classes</span></strong></span></h1>\r\n\r\n<p>Java is an Object-Oriented Language. As a language that has the Object-Oriented feature, Java supports the following fundamental concepts &minus;</p>\r\n\r\n<ul>\r\n	<li>Polymorphism</li>\r\n	<li>Inheritance</li>\r\n	<li>Encapsulation</li>\r\n	<li>Abstraction</li>\r\n	<li>Classes</li>\r\n	<li>Objects</li>\r\n	<li>Instance</li>\r\n	<li>Method</li>\r\n	<li>Message Passing</li>\r\n</ul>\r\n\r\n<p>In this chapter, we will look into the concepts - Classes and Objects.</p>\r\n\r\n<ul>\r\n	<li>\r\n	<p><strong>Object</strong>&nbsp;&minus; Objects have states and behaviors. Example: A dog has states - color, name, breed as well as behaviors &ndash; wagging the tail, barking, eating. An object is an instance of a class.</p>\r\n	</li>\r\n	<li>\r\n	<p><strong>Class</strong>&nbsp;&minus; A class can be defined as a template/blueprint that describes the behavior/state that the object of its type support.</p>\r\n	</li>\r\n</ul>\r\n\r\n<h2>Objects in Java</h2>\r\n\r\n<p>Let us now look deep into what are objects. If we consider the real-world, we can find many objects around us, cars, dogs, humans, etc. All these objects have a state and a behavior.</p>\r\n\r\n<p>If we consider a dog, then its state is - name, breed, color, and the behavior is - barking, wagging the tail, running.</p>\r\n\r\n<p>If you compare the software object with a real-world object, they have very similar characteristics.</p>\r\n\r\n<p>Software objects also have a state and a behavior. A software object&#39;s state is stored in fields and behavior is shown via methods.</p>\r\n\r\n<p>So in software development, methods operate on the internal state of an object and the object-to-object communication is done via methods.</p>\r\n\r\n<h2>Classes in Java</h2>\r\n\r\n<p>A class is a blueprint from which individual objects are created.</p>\r\n\r\n<p>Following is a sample of a class.</p>\r\n\r\n<h3>Example</h3>\r\n\r\n<pre>\r\npublic class Dog {\r\n   String breed;\r\n   int age;\r\n   String color;\r\n\r\n   void barking() {\r\n   }\r\n\r\n   void hungry() {\r\n   }\r\n\r\n   void sleeping() {\r\n   }\r\n}</pre>\r\n\r\n<p>A class can contain any of the following variable types.</p>\r\n\r\n<ul>\r\n	<li>\r\n	<p><strong>Local variables</strong>&nbsp;&minus; Variables defined inside methods, constructors or blocks are called local variables. The variable will be declared and initialized within the method and the variable will be destroyed when the method has completed.</p>\r\n	</li>\r\n	<li>\r\n	<p><strong>Instance variables</strong>&nbsp;&minus; Instance variables are variables within a class but outside any method. These variables are initialized when the class is instantiated. Instance variables can be accessed from inside any method, constructor or blocks of that particular class.</p>\r\n	</li>\r\n	<li>\r\n	<p><strong>Class variables</strong>&nbsp;&minus; Class variables are variables declared within a class, outside any method, with the static keyword.</p>\r\n	</li>\r\n</ul>\r\n\r\n<p>A class can have any number of methods to access the value of various kinds of methods. In the above example, barking(), hungry() and sleeping() are methods.</p>\r\n\r\n<p>Following are some of the important topics that need to be discussed when looking into classes of the Java Language.</p>\r\n\r\n<h2>Constructors</h2>\r\n\r\n<p>When discussing about classes, one of the most important sub topic would be constructors. Every class has a constructor. If we do not explicitly write a constructor for a class, the Java compiler builds a default constructor for that class.</p>\r\n\r\n<p>Each time a new object is created, at least one constructor will be invoked. The main rule of constructors is that they should have the same name as the class. A class can have more than one constructor.</p>\r\n\r\n<p>Following is an example of a constructor &minus;</p>\r\n\r\n<h3>Example</h3>\r\n\r\n<pre>\r\npublic class Puppy {\r\n   public Puppy() {\r\n   }\r\n\r\n   public Puppy(String name) {\r\n      // This constructor has one parameter, <em>name</em>.\r\n   }\r\n}</pre>\r\n\r\n<p>Java also supports&nbsp;<a href=\"https://www.tutorialspoint.com/java/java_using_singleton.htm\">Singleton Classes</a>&nbsp;where you would be able to create only one instance of a class.</p>\r\n\r\n<p><strong>Note</strong>&nbsp;&minus; We have two different types of constructors. We are going to discuss constructors in detail in the subsequent chapters.</p>\r\n\r\n<h2>Creating an Object</h2>\r\n\r\n<p>As mentioned previously, a class provides the blueprints for objects. So basically, an object is created from a class. In Java, the new keyword is used to create new objects.</p>\r\n\r\n<p>There are three steps when creating an object from a class &minus;</p>\r\n\r\n<ul>\r\n	<li>\r\n	<p><strong>Declaration</strong>&nbsp;&minus; A variable declaration with a variable name with an object type.</p>\r\n	</li>\r\n	<li>\r\n	<p><strong>Instantiation</strong>&nbsp;&minus; The &#39;new&#39; keyword is used to create the object.</p>\r\n	</li>\r\n	<li>\r\n	<p><strong>Initialization</strong>&nbsp;&minus; The &#39;new&#39; keyword is followed by a call to a constructor. This call initializes the new object.</p>\r\n	</li>\r\n</ul>\r\n\r\n<p>Following is an example of creating an object &minus;</p>\r\n\r\n<h3>Example</h3>\r\n\r\n<p><a href=\"http://tpcg.io/gQv0gO\" rel=\"nofollow\" target=\"_blank\">&nbsp;Live Demo</a></p>\r\n\r\n<pre>\r\npublic class Puppy {\r\n   public Puppy(String name) {\r\n      // This constructor has one parameter, <em>name</em>.\r\n      System.out.println(&quot;Passed Name is :&quot; + name );\r\n   }\r\n\r\n   public static void main(String []args) {\r\n      // Following statement would create an object myPuppy\r\n      Puppy myPuppy = new Puppy( &quot;tommy&quot; );\r\n   }\r\n}</pre>\r\n\r\n<p>If we compile and run the above program, then it will produce the following result &minus;</p>\r\n\r\n<h3>Output</h3>\r\n\r\n<pre>\r\nPassed Name is :tommy\r\n</pre>\r\n\r\n<h2>Accessing Instance Variables and Methods</h2>\r\n\r\n<p>Instance variables and methods are accessed via created objects. To access an instance variable, following is the fully qualified path &minus;</p>\r\n\r\n<pre>\r\n/* First create an object */\r\nObjectReference = new Constructor();\r\n\r\n/* Now call a variable as follows */\r\nObjectReference.variableName;\r\n\r\n/* Now you can call a class method as follows */\r\nObjectReference.MethodName();\r\n</pre>\r\n\r\n<h3>Example</h3>\r\n\r\n<p>This example explains how to access instance variables and methods of a class.</p>\r\n\r\n<p><a href=\"http://tpcg.io/VnuprO\" rel=\"nofollow\" target=\"_blank\">&nbsp;Live Demo</a></p>\r\n\r\n<pre>\r\npublic class Puppy {\r\n   int puppyAge;\r\n\r\n   public Puppy(String name) {\r\n      // This constructor has one parameter, <em>name</em>.\r\n      System.out.println(&quot;Name chosen is :&quot; + name );\r\n   }\r\n\r\n   public void setAge( int age ) {\r\n      puppyAge = age;\r\n   }\r\n\r\n   public int getAge( ) {\r\n      System.out.println(&quot;Puppy&#39;s age is :&quot; + puppyAge );\r\n      return puppyAge;\r\n   }\r\n\r\n   public static void main(String []args) {\r\n      /* Object creation */\r\n      Puppy myPuppy = new Puppy( &quot;tommy&quot; );\r\n\r\n      /* Call class method to set puppy&#39;s age */\r\n      myPuppy.setAge( 2 );\r\n\r\n      /* Call another class method to get puppy&#39;s age */\r\n      myPuppy.getAge( );\r\n\r\n      /* You can access instance variable as follows as well */\r\n      System.out.println(&quot;Variable Value :&quot; + myPuppy.puppyAge );\r\n   }\r\n}</pre>\r\n\r\n<p>If we compile and run the above program, then it will produce the following result &minus;</p>\r\n\r\n<h3>Output</h3>\r\n\r\n<pre>\r\nName chosen is :tommy\r\nPuppy&#39;s age is :2\r\nVariable Value :2\r\n</pre>\r\n\r\n<h2>Source File Declaration Rules</h2>\r\n\r\n<p>As the last part of this section, let&#39;s now look into the source file declaration rules. These rules are essential when declaring classes,&nbsp;<em>import</em>&nbsp;statements and&nbsp;<em>package</em>&nbsp;statements in a source file.</p>\r\n\r\n<ul>\r\n	<li>\r\n	<p>There can be only one public class per source file.</p>\r\n	</li>\r\n	<li>\r\n	<p>A source file can have multiple non-public classes.</p>\r\n	</li>\r\n	<li>\r\n	<p>The public class name should be the name of the source file as well which should be appended by&nbsp;<strong>.java</strong>&nbsp;at the end. For example: the class name is&nbsp;<em>public class Employee{}</em>&nbsp;then the source file should be as Employee.java.</p>\r\n	</li>\r\n	<li>\r\n	<p>If the class is defined inside a package, then the package statement should be the first statement in the source file.</p>\r\n	</li>\r\n	<li>\r\n	<p>If import statements are present, then they must be written between the package statement and the class declaration. If there are no package statements, then the import statement should be the first line in the source file.</p>\r\n	</li>\r\n	<li>\r\n	<p>Import and package statements will imply to all the classes present in the source file. It is not possible to declare different import and/or package statements to different classes in the source file.</p>\r\n	</li>\r\n</ul>\r\n\r\n<p>Classes have several access levels and there are different types of classes; abstract classes, final classes, etc. We will be explaining about all these in the access modifiers chapter.</p>\r\n\r\n<p>Apart from the above mentioned types of classes, Java also has some special classes called Inner classes and Anonymous classes.</p>\r\n\r\n<h2>Java Package</h2>\r\n\r\n<p>In simple words, it is a way of categorizing the classes and interfaces. When developing applications in Java, hundreds of classes and interfaces will be written, therefore categorizing these classes is a must as well as makes life much easier.</p>\r\n\r\n<h2>Import Statements</h2>\r\n\r\n<p>In Java if a fully qualified name, which includes the package and the class name is given, then the compiler can easily locate the source code or classes. Import statement is a way of giving the proper location for the compiler to find that particular class.</p>\r\n\r\n<p>For example, the following line would ask the compiler to load all the classes available in directory java_installation/java/io &minus;</p>\r\n\r\n<pre>\r\nimport java.io.*;\r\n</pre>\r\n\r\n<h2>A Simple Case Study</h2>\r\n\r\n<p>For our case study, we will be creating two classes. They are Employee and EmployeeTest.</p>\r\n\r\n<p>First open notepad and add the following code. Remember this is the Employee class and the class is a public class. Now, save this source file with the name Employee.java.</p>\r\n\r\n<p>The Employee class has four instance variables - name, age, designation and salary. The class has one explicitly defined constructor, which takes a parameter.</p>\r\n\r\n<h3>Example</h3>\r\n\r\n<pre>\r\nimport java.io.*;\r\npublic class Employee {\r\n\r\n   String name;\r\n   int age;\r\n   String designation;\r\n   double salary;\r\n\r\n   // This is the constructor of the class Employee\r\n   public Employee(String name) {\r\n      this.name = name;\r\n   }\r\n\r\n   // Assign the age of the Employee  to the variable age.\r\n   public void empAge(int empAge) {\r\n      age = empAge;\r\n   }\r\n\r\n   /* Assign the designation to the variable designation.*/\r\n   public void empDesignation(String empDesig) {\r\n      designation = empDesig;\r\n   }\r\n\r\n   /* Assign the salary to the variable	salary.*/\r\n   public void empSalary(double empSalary) {\r\n      salary = empSalary;\r\n   }\r\n\r\n   /* Print the Employee details */\r\n   public void printEmployee() {\r\n      System.out.println(&quot;Name:&quot;+ name );\r\n      System.out.println(&quot;Age:&quot; + age );\r\n      System.out.println(&quot;Designation:&quot; + designation );\r\n      System.out.println(&quot;Salary:&quot; + salary);\r\n   }\r\n}</pre>\r\n\r\n<p>As mentioned previously in this tutorial, processing starts from the main method. Therefore, in order for us to run this Employee class there should be a main method and objects should be created. We will be creating a separate class for these tasks.</p>\r\n\r\n<p>Following is the&nbsp;<em>EmployeeTest</em>&nbsp;class, which creates two instances of the class Employee and invokes the methods for each object to assign values for each variable.</p>\r\n\r\n<p>Save the following code in EmployeeTest.java file.</p>\r\n\r\n<pre>\r\nimport java.io.*;\r\npublic class EmployeeTest {\r\n\r\n   public static void main(String args[]) {\r\n      /* Create two objects using constructor */\r\n      Employee empOne = new Employee(&quot;James Smith&quot;);\r\n      Employee empTwo = new Employee(&quot;Mary Anne&quot;);\r\n\r\n      // Invoking methods for each object created\r\n      empOne.empAge(26);\r\n      empOne.empDesignation(&quot;Senior Software Engineer&quot;);\r\n      empOne.empSalary(1000);\r\n      empOne.printEmployee();\r\n\r\n      empTwo.empAge(21);\r\n      empTwo.empDesignation(&quot;Software Engineer&quot;);\r\n      empTwo.empSalary(500);\r\n      empTwo.printEmployee();\r\n   }\r\n}</pre>\r\n\r\n<p>Now, compile both the classes and then run&nbsp;<em>EmployeeTest</em>&nbsp;to see the result as follows &minus;</p>\r\n\r\n<h3>Output</h3>\r\n\r\n<pre>\r\nC:&gt; javac Employee.java\r\nC:&gt; javac EmployeeTest.java\r\nC:&gt; java EmployeeTest\r\nName:James Smith\r\nAge:26\r\nDesignation:Senior Software Engineer\r\nSalary:1000.0\r\nName:Mary Anne\r\nAge:21\r\nDesignation:Software Engineer\r\nSalary:500.0\r\n</pre>\r\n\r\n<h2>What is Next?</h2>\r\n\r\n<p>In the next session, we will discuss the basic data types in Java and how they can be used when developing Java applications.</p>\r\n', 'java'),
(36, 'Java - Constructors', '<p style=\"margin-left:120px\"><span style=\"color:#3498db\"><span style=\"font-size:24px\"><strong>Java - Constructors</strong></span></span></p>\r\n\r\n<p>A constructor initializes an object when it is created. It has the same name as its class and is syntactically similar to a method. However, constructors have no explicit return type.</p>\r\n\r\n<p>Typically, you will use a constructor to give initial values to the instance variables defined by the class, or to perform any other start-up procedures required to create a fully formed object.</p>\r\n\r\n<p>All classes have constructors, whether you define one or not, because Java automatically provides a default constructor that initializes all member variables to zero. However, once you define your own constructor, the default constructor is no longer used.</p>\r\n\r\n<h2>Syntax</h2>\r\n\r\n<p>Following is the syntax of a constructor &minus;</p>\r\n\r\n<pre>\r\nclass ClassName {\r\n   ClassName() {\r\n   }\r\n}</pre>\r\n\r\n<p>Java allows two types of constructors namely &minus;</p>\r\n\r\n<ul>\r\n	<li>No argument Constructors</li>\r\n	<li>Parameterized Constructors</li>\r\n</ul>\r\n\r\n<h2>No argument Constructors</h2>\r\n\r\n<p>As the name specifies the no argument constructors of Java does not accept any parameters instead, using these constructors the instance variables of a method will be initialized with fixed values for all objects.</p>\r\n\r\n<h2>Example</h2>\r\n\r\n<pre>\r\nPublic class MyClass {\r\n   Int num;\r\n   MyClass() {\r\n      num = 100;\r\n   }\r\n}</pre>\r\n\r\n<p>You would call constructor to initialize objects as follows</p>\r\n\r\n<pre>\r\npublic class ConsDemo {\r\n   public static void main(String args[]) {\r\n      MyClass t1 = new MyClass();\r\n      MyClass t2 = new MyClass();\r\n      System.out.println(t1.num + &quot; &quot; + t2.num);\r\n   }\r\n}</pre>\r\n\r\n<p>This would produce the following result</p>\r\n\r\n<pre>\r\n100 100\r\n</pre>\r\n\r\n<h2>Parameterized Constructors</h2>\r\n\r\n<p>Most often, you will need a constructor that accepts one or more parameters. Parameters are added to a constructor in the same way that they are added to a method, just declare them inside the parentheses after the constructor&#39;s name.</p>\r\n\r\n<h2>Example</h2>\r\n\r\n<p>Here is a simple example that uses a constructor &minus;</p>\r\n\r\n<pre>\r\n// A simple constructor.\r\nclass MyClass {\r\n   int x;\r\n   \r\n   // Following is the constructor\r\n   MyClass(int i ) {\r\n      x = i;\r\n   }\r\n}</pre>\r\n\r\n<p>You would call constructor to initialize objects as follows &minus;</p>\r\n\r\n<pre>\r\npublic class ConsDemo {\r\n   public static void main(String args[]) {\r\n      MyClass t1 = new MyClass( 10 );\r\n      MyClass t2 = new MyClass( 20 );\r\n      System.out.println(t1.x + &quot; &quot; + t2.x);\r\n   }\r\n}</pre>\r\n\r\n<p>This would produce the following result &minus;</p>\r\n', 'java'),
(37, 'Java - Basic Datatypes', '<p style=\"margin-left:120px\"><span style=\"color:#3498db\"><span style=\"font-size:24px\"><strong>Java - Basic Datatypes</strong></span></span></p>\r\n\r\n<p>Based on the data type of a variable, the operating system allocates memory and decides what can be stored in the reserved memory. Therefore, by assigning different data types to variables, you can store integers, decimals, or characters in these variables.</p>\r\n\r\n<p>There are two data types available in Java &minus;</p>\r\n\r\n<ul>\r\n	<li>Primitive Data Types</li>\r\n	<li>Reference/Object Data Types</li>\r\n</ul>\r\n\r\n<h2>Primitive Data Types</h2>\r\n\r\n<p>There are eight primitive datatypes supported by Java. Primitive datatypes are predefined by the language and named by a keyword. Let us now look into the eight primitive data types in detail.</p>\r\n\r\n<h3>byte</h3>\r\n\r\n<ul>\r\n	<li>\r\n	<p>Byte data type is an 8-bit signed two&#39;s complement integer</p>\r\n	</li>\r\n	<li>\r\n	<p>Minimum value is -128 (-2^7)</p>\r\n	</li>\r\n	<li>\r\n	<p>Maximum value is 127 (inclusive)(2^7 -1)</p>\r\n	</li>\r\n	<li>\r\n	<p>Default value is 0</p>\r\n	</li>\r\n	<li>\r\n	<p>Byte data type is used to save space in large arrays, mainly in place of integers, since a byte is four times smaller than an integer.</p>\r\n	</li>\r\n	<li>\r\n	<p>Example: byte a = 100, byte b = -50</p>\r\n	</li>\r\n</ul>\r\n\r\n<h3>short</h3>\r\n\r\n<ul>\r\n	<li>\r\n	<p>Short data type is a 16-bit signed two&#39;s complement integer</p>\r\n	</li>\r\n	<li>\r\n	<p>Minimum value is -32,768 (-2^15)</p>\r\n	</li>\r\n	<li>\r\n	<p>Maximum value is 32,767 (inclusive) (2^15 -1)</p>\r\n	</li>\r\n	<li>\r\n	<p>Short data type can also be used to save memory as byte data type. A short is 2 times smaller than an integer</p>\r\n	</li>\r\n	<li>\r\n	<p>Default value is 0.</p>\r\n	</li>\r\n	<li>\r\n	<p>Example: short s = 10000, short r = -20000</p>\r\n	</li>\r\n</ul>\r\n\r\n<h3>int</h3>\r\n\r\n<ul>\r\n	<li>\r\n	<p>Int data type is a 32-bit signed two&#39;s complement integer.</p>\r\n	</li>\r\n	<li>\r\n	<p>Minimum value is - 2,147,483,648 (-2^31)</p>\r\n	</li>\r\n	<li>\r\n	<p>Maximum value is 2,147,483,647(inclusive) (2^31 -1)</p>\r\n	</li>\r\n	<li>\r\n	<p>Integer is generally used as the default data type for integral values unless there is a concern about memory.</p>\r\n	</li>\r\n	<li>\r\n	<p>The default value is 0</p>\r\n	</li>\r\n	<li>\r\n	<p>Example: int a = 100000, int b = -200000</p>\r\n	</li>\r\n</ul>\r\n\r\n<h3>long</h3>\r\n\r\n<ul>\r\n	<li>Long data type is a 64-bit signed two&#39;s complement integer</li>\r\n	<li>Minimum value is -9,223,372,036,854,775,808(-2^63)</li>\r\n	<li>Maximum value is 9,223,372,036,854,775,807 (inclusive)(2^63 -1)</li>\r\n	<li>This type is used when a wider range than int is needed</li>\r\n	<li>Default value is 0L</li>\r\n	<li>Example: long a = 100000L, long b = -200000L</li>\r\n</ul>\r\n\r\n<h3>float</h3>\r\n\r\n<ul>\r\n	<li>\r\n	<p>Float data type is a single-precision 32-bit IEEE 754 floating point</p>\r\n	</li>\r\n	<li>\r\n	<p>Float is mainly used to save memory in large arrays of floating point numbers</p>\r\n	</li>\r\n	<li>\r\n	<p>Default value is 0.0f</p>\r\n	</li>\r\n	<li>\r\n	<p>Float data type is never used for precise values such as currency</p>\r\n	</li>\r\n	<li>\r\n	<p>Example: float f1 = 234.5f</p>\r\n	</li>\r\n</ul>\r\n\r\n<h3>double</h3>\r\n\r\n<ul>\r\n	<li>\r\n	<p>double data type is a double-precision 64-bit IEEE 754 floating point</p>\r\n	</li>\r\n	<li>\r\n	<p>This data type is generally used as the default data type for decimal values, generally the default choice</p>\r\n	</li>\r\n	<li>\r\n	<p>Double data type should never be used for precise values such as currency</p>\r\n	</li>\r\n	<li>\r\n	<p>Default value is 0.0d</p>\r\n	</li>\r\n	<li>\r\n	<p>Example: double d1 = 123.4</p>\r\n	</li>\r\n</ul>\r\n\r\n<h3>boolean</h3>\r\n\r\n<ul>\r\n	<li>boolean data type represents one bit of information</li>\r\n	<li>There are only two possible values: true and false</li>\r\n	<li>This data type is used for simple flags that track true/false conditions</li>\r\n	<li>Default value is false</li>\r\n	<li>Example: boolean one = true</li>\r\n</ul>\r\n\r\n<h3>char</h3>\r\n\r\n<ul>\r\n	<li>char data type is a single 16-bit Unicode character</li>\r\n	<li>Minimum value is &#39;u0000&#39; (or 0)</li>\r\n	<li>Maximum value is &#39;uffff&#39; (or 65,535 inclusive)</li>\r\n	<li>Char data type is used to store any character</li>\r\n	<li>Example: char letterA = &#39;A&#39;</li>\r\n</ul>\r\n\r\n<h2>Reference Datatypes</h2>\r\n\r\n<ul>\r\n	<li>\r\n	<p>Reference variables are created using defined constructors of the classes. They are used to access objects. These variables are declared to be of a specific type that cannot be changed. For example, Employee, Puppy, etc.</p>\r\n	</li>\r\n	<li>\r\n	<p>Class objects and various type of array variables come under reference datatype.</p>\r\n	</li>\r\n	<li>\r\n	<p>Default value of any reference variable is null.</p>\r\n	</li>\r\n	<li>\r\n	<p>A reference variable can be used to refer any object of the declared type or any compatible type.</p>\r\n	</li>\r\n	<li>\r\n	<p>Example: Animal animal = new Animal(&quot;giraffe&quot;);</p>\r\n	</li>\r\n</ul>\r\n\r\n<h2>Java Literals</h2>\r\n\r\n<p>A literal is a source code representation of a fixed value. They are represented directly in the code without any computation.</p>\r\n\r\n<p>Literals can be assigned to any primitive type variable. For example &minus;</p>\r\n\r\n<pre>\r\nbyte a = 68;\r\nchar a = &#39;A&#39;;</pre>\r\n\r\n<p>byte, int, long, and short can be expressed in decimal(base 10), hexadecimal(base 16) or octal(base 8) number systems as well.</p>\r\n\r\n<p>Prefix 0 is used to indicate octal, and prefix 0x indicates hexadecimal when using these number systems for literals. For example &minus;</p>\r\n\r\n<pre>\r\nint decimal = 100;\r\nint octal = 0144;\r\nint hexa =  0x64;</pre>\r\n\r\n<p>String literals in Java are specified like they are in most other languages by enclosing a sequence of characters between a pair of double quotes. Examples of string literals are &minus;</p>\r\n\r\n<h3>Example</h3>\r\n\r\n<pre>\r\n&quot;Hello World&quot;\r\n&quot;two\nlines&quot;\r\n&quot;&quot;This is in quotes&quot;&quot;</pre>\r\n\r\n<p>String and char types of literals can contain any Unicode characters. For example &minus;</p>\r\n\r\n<pre>\r\nchar a = &#39;u0001&#39;;\r\nString a = &quot;u0001&quot;;</pre>\r\n\r\n<p>Java language supports few special escape sequences for String and char literals as well. They are &minus;</p>\r\n\r\n<table>\r\n	<tbody>\r\n		<tr>\r\n			<th>Notation</th>\r\n			<th>Character represented</th>\r\n		</tr>\r\n		<tr>\r\n			<td>\n</td>\r\n			<td>Newline (0x0a)</td>\r\n		</tr>\r\n		<tr>\r\n			<td>\r</td>\r\n			<td>Carriage return (0x0d)</td>\r\n		</tr>\r\n		<tr>\r\n			<td>f</td>\r\n			<td>Formfeed (0x0c)</td>\r\n		</tr>\r\n		<tr>\r\n			<td></td>\r\n			<td>Backspace (0x08)</td>\r\n		</tr>\r\n		<tr>\r\n			<td>s</td>\r\n			<td>Space (0x20)</td>\r\n		</tr>\r\n		<tr>\r\n			<td>	</td>\r\n			<td>tab</td>\r\n		</tr>\r\n		<tr>\r\n			<td>&quot;</td>\r\n			<td>Double quote</td>\r\n		</tr>\r\n		<tr>\r\n			<td>&#39;</td>\r\n			<td>Single quote</td>\r\n		</tr>\r\n		<tr>\r\n			<td>\\</td>\r\n			<td>backslash</td>\r\n		</tr>\r\n		<tr>\r\n			<td>ddd</td>\r\n			<td>Octal character (ddd)</td>\r\n		</tr>\r\n		<tr>\r\n			<td>uxxxx</td>\r\n			<td>Hexadecimal UNICODE character (xxxx)</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n\r\n<h2>What is Next?</h2>\r\n\r\n<p>This chapter explained the various data types. The next topic explains different variable types and their usage. This will give you a good understanding on how they can be used in the Java classes, interfaces, etc.</p>\r\n', 'java');
INSERT INTO `courses` (`id`, `topic_name`, `description`, `course_name`) VALUES
(38, 'Java - Variable Types', '<h1 style=\"margin-left:120px\"><span style=\"color:#3498db\"><span style=\"font-size:24px\"><strong>Java - Variable Types</strong></span></span></h1>\r\n\r\n<p>A variable provides us with named storage that our programs can manipulate. Each variable in Java has a specific type, which determines the size and layout of the variable&#39;s memory; the range of values that can be stored within that memory; and the set of operations that can be applied to the variable.</p>\r\n\r\n<p>You must declare all variables before they can be used. Following is the basic form of a variable declaration &minus;</p>\r\n\r\n<pre>\r\ndata type variable [ = value][, variable [ = value] ...] ;\r\n</pre>\r\n\r\n<p>Here&nbsp;<em>data type</em>&nbsp;is one of Java&#39;s datatypes and&nbsp;<em>variable</em>&nbsp;is the name of the variable. To declare more than one variable of the specified type, you can use a comma-separated list.</p>\r\n\r\n<p>Following are valid examples of variable declaration and initialization in Java &minus;</p>\r\n\r\n<h2>Example</h2>\r\n\r\n<pre>\r\nint a, b, c;         // Declares three ints, a, b, and c.\r\nint a = 10, b = 10;  // Example of initialization\r\nbyte B = 22;         // initializes a byte type variable B.\r\ndouble pi = 3.14159; // declares and assigns a value of PI.\r\nchar a = &#39;a&#39;;        // the char variable a iis initialized with value &#39;a&#39;</pre>\r\n\r\n<p>This chapter will explain various variable types available in Java Language. There are three kinds of variables in Java &minus;</p>\r\n\r\n<ul>\r\n	<li>Local variables</li>\r\n	<li>Instance variables</li>\r\n	<li>Class/Static variables</li>\r\n</ul>\r\n\r\n<h2>Local Variables</h2>\r\n\r\n<ul>\r\n	<li>\r\n	<p>Local variables are declared in methods, constructors, or blocks.</p>\r\n	</li>\r\n	<li>\r\n	<p>Local variables are created when the method, constructor or block is entered and the variable will be destroyed once it exits the method, constructor, or block.</p>\r\n	</li>\r\n	<li>\r\n	<p>Access modifiers cannot be used for local variables.</p>\r\n	</li>\r\n	<li>\r\n	<p>Local variables are visible only within the declared method, constructor, or block.</p>\r\n	</li>\r\n	<li>\r\n	<p>Local variables are implemented at stack level internally.</p>\r\n	</li>\r\n	<li>\r\n	<p>There is no default value for local variables, so local variables should be declared and an initial value should be assigned before the first use.</p>\r\n	</li>\r\n</ul>\r\n\r\n<h3>Example</h3>\r\n\r\n<p>Here,&nbsp;<em>age</em>&nbsp;is a local variable. This is defined inside&nbsp;<em>pupAge()</em>&nbsp;method and its scope is limited to only this method.</p>\r\n\r\n<p><a href=\"http://tpcg.io/07heJ9\" rel=\"nofollow\" target=\"_blank\">&nbsp;Live Demo</a></p>\r\n\r\n<pre>\r\npublic class Test {\r\n   public void pupAge() {\r\n      int age = 0;\r\n      age = age + 7;\r\n      System.out.println(&quot;Puppy age is : &quot; + age);\r\n   }\r\n\r\n   public static void main(String args[]) {\r\n      Test test = new Test();\r\n      test.pupAge();\r\n   }\r\n}</pre>\r\n\r\n<p>This will produce the following result &minus;</p>\r\n\r\n<h3>Output</h3>\r\n\r\n<pre>\r\nPuppy age is: 7\r\n</pre>\r\n\r\n<h3>Example</h3>\r\n\r\n<p>Following example uses&nbsp;<em>age</em>&nbsp;without initializing it, so it would give an error at the time of compilation.</p>\r\n\r\n<p><a href=\"http://tpcg.io/kv9gf6\" rel=\"nofollow\" target=\"_blank\">&nbsp;Live Demo</a></p>\r\n\r\n<pre>\r\npublic class Test {\r\n   public void pupAge() {\r\n      int age;\r\n      age = age + 7;\r\n      System.out.println(&quot;Puppy age is : &quot; + age);\r\n   }\r\n\r\n   public static void main(String args[]) {\r\n      Test test = new Test();\r\n      test.pupAge();\r\n   }\r\n}</pre>\r\n\r\n<p>This will produce the following error while compiling it &minus;</p>\r\n\r\n<h3>Output</h3>\r\n\r\n<pre>\r\nTest.java:4:variable number might not have been initialized\r\nage = age + 7;\r\n         ^\r\n1 error\r\n</pre>\r\n\r\n<h2>Instance Variables</h2>\r\n\r\n<ul>\r\n	<li>\r\n	<p>Instance variables are declared in a class, but outside a method, constructor or any block.</p>\r\n	</li>\r\n	<li>\r\n	<p>When a space is allocated for an object in the heap, a slot for each instance variable value is created.</p>\r\n	</li>\r\n	<li>\r\n	<p>Instance variables are created when an object is created with the use of the keyword &#39;new&#39; and destroyed when the object is destroyed.</p>\r\n	</li>\r\n	<li>\r\n	<p>Instance variables hold values that must be referenced by more than one method, constructor or block, or essential parts of an object&#39;s state that must be present throughout the class.</p>\r\n	</li>\r\n	<li>\r\n	<p>Instance variables can be declared in class level before or after use.</p>\r\n	</li>\r\n	<li>\r\n	<p>Access modifiers can be given for instance variables.</p>\r\n	</li>\r\n	<li>\r\n	<p>The instance variables are visible for all methods, constructors and block in the class. Normally, it is recommended to make these variables private (access level). However, visibility for subclasses can be given for these variables with the use of access modifiers.</p>\r\n	</li>\r\n	<li>\r\n	<p>Instance variables have default values. For numbers, the default value is 0, for Booleans it is false, and for object references it is null. Values can be assigned during the declaration or within the constructor.</p>\r\n	</li>\r\n	<li>\r\n	<p>Instance variables can be accessed directly by calling the variable name inside the class. However, within static methods (when instance variables are given accessibility), they should be called using the fully qualified name.&nbsp;<em>ObjectReference.VariableName</em>.</p>\r\n	</li>\r\n</ul>\r\n\r\n<h3>Example</h3>\r\n\r\n<p><a href=\"http://tpcg.io/mULkxL\" rel=\"nofollow\" target=\"_blank\">&nbsp;Live Demo</a></p>\r\n\r\n<pre>\r\nimport java.io.*;\r\npublic class Employee {\r\n\r\n   // this instance variable is visible for any child class.\r\n   public String name;\r\n\r\n   // salary  variable is visible in Employee class only.\r\n   private double salary;\r\n\r\n   // The name variable is assigned in the constructor.\r\n   public Employee (String empName) {\r\n      name = empName;\r\n   }\r\n\r\n   // The salary variable is assigned a value.\r\n   public void setSalary(double empSal) {\r\n      salary = empSal;\r\n   }\r\n\r\n   // This method prints the employee details.\r\n   public void printEmp() {\r\n      System.out.println(&quot;name  : &quot; + name );\r\n      System.out.println(&quot;salary :&quot; + salary);\r\n   }\r\n\r\n   public static void main(String args[]) {\r\n      Employee empOne = new Employee(&quot;Ransika&quot;);\r\n      empOne.setSalary(1000);\r\n      empOne.printEmp();\r\n   }\r\n}</pre>\r\n\r\n<p>This will produce the following result &minus;</p>\r\n\r\n<h3>Output</h3>\r\n\r\n<pre>\r\nname  : Ransika\r\nsalary :1000.0\r\n</pre>\r\n\r\n<h2>Class/Static Variables</h2>\r\n\r\n<ul>\r\n	<li>\r\n	<p>Class variables also known as static variables are declared with the static keyword in a class, but outside a method, constructor or a block.</p>\r\n	</li>\r\n	<li>\r\n	<p>There would only be one copy of each class variable per class, regardless of how many objects are created from it.</p>\r\n	</li>\r\n	<li>\r\n	<p>Static variables are rarely used other than being declared as constants. Constants are variables that are declared as public/private, final, and static. Constant variables never change from their initial value.</p>\r\n	</li>\r\n	<li>\r\n	<p>Static variables are stored in the static memory. It is rare to use static variables other than declared final and used as either public or private constants.</p>\r\n	</li>\r\n	<li>\r\n	<p>Static variables are created when the program starts and destroyed when the program stops.</p>\r\n	</li>\r\n	<li>\r\n	<p>Visibility is similar to instance variables. However, most static variables are declared public since they must be available for users of the class.</p>\r\n	</li>\r\n	<li>\r\n	<p>Default values are same as instance variables. For numbers, the default value is 0; for Booleans, it is false; and for object references, it is null. Values can be assigned during the declaration or within the constructor. Additionally, values can be assigned in special static initializer blocks.</p>\r\n	</li>\r\n	<li>\r\n	<p>Static variables can be accessed by calling with the class name&nbsp;<em>ClassName.VariableName</em>.</p>\r\n	</li>\r\n	<li>\r\n	<p>When declaring class variables as public static final, then variable names (constants) are all in upper case. If the static variables are not public and final, the naming syntax is the same as instance and local variables.</p>\r\n	</li>\r\n</ul>\r\n\r\n<h3>Example</h3>\r\n\r\n<p><a href=\"http://tpcg.io/NHe4EU\" rel=\"nofollow\" target=\"_blank\">&nbsp;Live Demo</a></p>\r\n\r\n<pre>\r\nimport java.io.*;\r\npublic class Employee {\r\n\r\n   // salary  variable is a private static variable\r\n   private static double salary;\r\n\r\n   // DEPARTMENT is a constant\r\n   public static final String DEPARTMENT = &quot;Development &quot;;\r\n\r\n   public static void main(String args[]) {\r\n      salary = 1000;\r\n      System.out.println(DEPARTMENT + &quot;average salary:&quot; + salary);\r\n   }\r\n}</pre>\r\n\r\n<p>This will produce the following result &minus;</p>\r\n\r\n<h3>Output</h3>\r\n\r\n<pre>\r\nDevelopment average salary:1000\r\n</pre>\r\n\r\n<p><strong>Note</strong>&nbsp;&minus; If the variables are accessed from an outside class, the constant should be accessed as Employee.DEPARTMENT</p>\r\n\r\n<h2>What is Next?</h2>\r\n\r\n<p>You already have used access modifiers (public &amp; private) in this chapter. The next chapter will explain Access Modifiers and Non-Access Modifiers in detail.</p>\r\n', 'java'),
(39, 'Java - Modifier Types', '<h1 style=\"margin-left:120px\"><span style=\"color:#3498db\"><span style=\"font-size:24px\"><strong>Java - Modifier Types</strong></span></span></h1>\r\n\r\n<p>Modifiers are keywords that you add to those definitions to change their meanings. Java language has a wide variety of modifiers, including the following &minus;</p>\r\n\r\n<ul>\r\n	<li>\r\n	<p><a href=\"https://www.tutorialspoint.com/java/java_access_modifiers.htm\">Java Access Modifiers</a></p>\r\n	</li>\r\n	<li>\r\n	<p><a href=\"https://www.tutorialspoint.com/java/java_nonaccess_modifiers.htm\">Non Access Modifiers</a></p>\r\n	</li>\r\n</ul>\r\n\r\n<p>To use a modifier, you include its keyword in the definition of a class, method, or variable. The modifier precedes the rest of the statement, as in the following example.</p>\r\n\r\n<h3>Example</h3>\r\n\r\n<pre>\r\n<em>public</em> class className {\r\n   // ...\r\n}\r\n\r\n<em>private</em> boolean myFlag;\r\n<em>static final</em> double weeks = 9.5;\r\n<em>protected static final</em> int BOXWIDTH = 42;\r\n\r\n<em>public static</em> void main(String[] arguments) {\r\n   // body of method\r\n}</pre>\r\n\r\n<h2>Access Control Modifiers</h2>\r\n\r\n<p>Java provides a number of access modifiers to set access levels for classes, variables, methods and constructors. The four access levels are &minus;</p>\r\n\r\n<ul>\r\n	<li>Visible to the package, the default. No modifiers are needed.</li>\r\n	<li>Visible to the class only (private).</li>\r\n	<li>Visible to the world (public).</li>\r\n	<li>Visible to the package and all subclasses (protected).</li>\r\n</ul>\r\n\r\n<h2>Non-Access Modifiers</h2>\r\n\r\n<p>Java provides a number of non-access modifiers to achieve many other functionality.</p>\r\n\r\n<ul>\r\n	<li>\r\n	<p>The&nbsp;<em>static</em>&nbsp;modifier for creating class methods and variables.</p>\r\n	</li>\r\n	<li>\r\n	<p>The&nbsp;<em>final</em>&nbsp;modifier for finalizing the implementations of classes, methods, and variables.</p>\r\n	</li>\r\n	<li>\r\n	<p>The&nbsp;<em>abstract</em>&nbsp;modifier for creating abstract classes and methods.</p>\r\n	</li>\r\n	<li>\r\n	<p>The&nbsp;<em>synchronized</em>&nbsp;and&nbsp;<em>volatile</em>&nbsp;modifiers, which are used for threads.</p>\r\n	</li>\r\n</ul>\r\n\r\n<h2>What is Next?</h2>\r\n\r\n<p>In the next section, we will be discussing about Basic Operators used in Java Language. The chapter will give you an overview of how these operators can be used during application development.</p>\r\n', 'java'),
(40, 'Java - Basic Operators', '<h1 style=\"margin-left:120px\"><span style=\"font-size:24px\"><span style=\"color:#3498db\"><strong>Java - Basic Operators</strong></span></span></h1>\r\n\r\n<p>Java provides a rich set of operators to manipulate variables. We can divide all the Java operators into the following groups &minus;</p>\r\n\r\n<ul>\r\n	<li>Arithmetic Operators</li>\r\n	<li>Relational Operators</li>\r\n	<li>Bitwise Operators</li>\r\n	<li>Logical Operators</li>\r\n	<li>Assignment Operators</li>\r\n	<li>Misc Operators</li>\r\n</ul>\r\n\r\n<h2>The Arithmetic Operators</h2>\r\n\r\n<p>Arithmetic operators are used in mathematical expressions in the same way that they are used in algebra. The following table lists the arithmetic operators &minus;</p>\r\n\r\n<p>Assume integer variable A holds 10 and variable B holds 20, then &minus;</p>\r\n\r\n<p><a href=\"https://www.tutorialspoint.com/java/java_arithmatic_operators_examples.htm\">Show Examples</a></p>\r\n\r\n<table>\r\n	<tbody>\r\n		<tr>\r\n			<th>Operator</th>\r\n			<th>Description</th>\r\n			<th>Example</th>\r\n		</tr>\r\n		<tr>\r\n			<td>+ (Addition)</td>\r\n			<td>Adds values on either side of the operator.</td>\r\n			<td>A + B will give 30</td>\r\n		</tr>\r\n		<tr>\r\n			<td>- (Subtraction)</td>\r\n			<td>Subtracts right-hand operand from left-hand operand.</td>\r\n			<td>A - B will give -10</td>\r\n		</tr>\r\n		<tr>\r\n			<td>* (Multiplication)</td>\r\n			<td>Multiplies values on either side of the operator.</td>\r\n			<td>A * B will give 200</td>\r\n		</tr>\r\n		<tr>\r\n			<td>/ (Division)</td>\r\n			<td>Divides left-hand operand by right-hand operand.</td>\r\n			<td>B / A will give 2</td>\r\n		</tr>\r\n		<tr>\r\n			<td>% (Modulus)</td>\r\n			<td>Divides left-hand operand by right-hand operand and returns remainder.</td>\r\n			<td>B % A will give 0</td>\r\n		</tr>\r\n		<tr>\r\n			<td>++ (Increment)</td>\r\n			<td>Increases the value of operand by 1.</td>\r\n			<td>B++ gives 21</td>\r\n		</tr>\r\n		<tr>\r\n			<td>-- (Decrement)</td>\r\n			<td>Decreases the value of operand by 1.</td>\r\n			<td>B-- gives 19</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n\r\n<h2>The Relational Operators</h2>\r\n\r\n<p>There are following relational operators supported by Java language.</p>\r\n\r\n<p>Assume variable A holds 10 and variable B holds 20, then &minus;</p>\r\n\r\n<p><a href=\"https://www.tutorialspoint.com/java/java_relational_operators_examples.htm\">Show Examples</a></p>\r\n\r\n<table>\r\n	<tbody>\r\n		<tr>\r\n			<th>Operator</th>\r\n			<th>Description</th>\r\n			<th>Example</th>\r\n		</tr>\r\n		<tr>\r\n			<td>== (equal to)</td>\r\n			<td>Checks if the values of two operands are equal or not, if yes then condition becomes true.</td>\r\n			<td>(A == B) is not true.</td>\r\n		</tr>\r\n		<tr>\r\n			<td>!= (not equal to)</td>\r\n			<td>Checks if the values of two operands are equal or not, if values are not equal then condition becomes true.</td>\r\n			<td>(A != B) is true.</td>\r\n		</tr>\r\n		<tr>\r\n			<td>&gt; (greater than)</td>\r\n			<td>Checks if the value of left operand is greater than the value of right operand, if yes then condition becomes true.</td>\r\n			<td>(A &gt; B) is not true.</td>\r\n		</tr>\r\n		<tr>\r\n			<td>&lt; (less than)</td>\r\n			<td>Checks if the value of left operand is less than the value of right operand, if yes then condition becomes true.</td>\r\n			<td>(A &lt; B) is true.</td>\r\n		</tr>\r\n		<tr>\r\n			<td>&gt;= (greater than or equal to)</td>\r\n			<td>Checks if the value of left operand is greater than or equal to the value of right operand, if yes then condition becomes true.</td>\r\n			<td>(A &gt;= B) is not true.</td>\r\n		</tr>\r\n		<tr>\r\n			<td>&lt;= (less than or equal to)</td>\r\n			<td>Checks if the value of left operand is less than or equal to the value of right operand, if yes then condition becomes true.</td>\r\n			<td>(A &lt;= B) is true.</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n\r\n<h2>The Bitwise Operators</h2>\r\n\r\n<p>Java defines several bitwise operators, which can be applied to the integer types, long, int, short, char, and byte.</p>\r\n\r\n<p>Bitwise operator works on bits and performs bit-by-bit operation. Assume if a = 60 and b = 13; now in binary format they will be as follows &minus;</p>\r\n\r\n<p>a = 0011 1100</p>\r\n\r\n<p>b = 0000 1101</p>\r\n\r\n<p>-----------------</p>\r\n\r\n<p>a&amp;b = 0000 1100</p>\r\n\r\n<p>a|b = 0011 1101</p>\r\n\r\n<p>a^b = 0011 0001</p>\r\n\r\n<p>~a&nbsp; = 1100 0011</p>\r\n\r\n<p>The following table lists the bitwise operators &minus;</p>\r\n\r\n<p>Assume integer variable A holds 60 and variable B holds 13 then &minus;</p>\r\n\r\n<p><a href=\"https://www.tutorialspoint.com/java/java_bitwise_operators_examples.htm\">Show Examples</a></p>\r\n\r\n<table>\r\n	<tbody>\r\n		<tr>\r\n			<th>Operator</th>\r\n			<th>Description</th>\r\n			<th>Example</th>\r\n		</tr>\r\n		<tr>\r\n			<td>&amp; (bitwise and)</td>\r\n			<td>Binary AND Operator copies a bit to the result if it exists in both operands.</td>\r\n			<td>(A &amp; B) will give 12 which is 0000 1100</td>\r\n		</tr>\r\n		<tr>\r\n			<td>| (bitwise or)</td>\r\n			<td>Binary OR Operator copies a bit if it exists in either operand.</td>\r\n			<td>(A | B) will give 61 which is 0011 1101</td>\r\n		</tr>\r\n		<tr>\r\n			<td>^ (bitwise XOR)</td>\r\n			<td>Binary XOR Operator copies the bit if it is set in one operand but not both.</td>\r\n			<td>(A ^ B) will give 49 which is 0011 0001</td>\r\n		</tr>\r\n		<tr>\r\n			<td>~ (bitwise compliment)</td>\r\n			<td>Binary Ones Complement Operator is unary and has the effect of &#39;flipping&#39; bits.</td>\r\n			<td>(~A ) will give -61 which is 1100 0011 in 2&#39;s complement form due to a signed binary number.</td>\r\n		</tr>\r\n		<tr>\r\n			<td>&lt;&lt; (left shift)</td>\r\n			<td>Binary Left Shift Operator. The left operands value is moved left by the number of bits specified by the right operand.</td>\r\n			<td>A &lt;&lt; 2 will give 240 which is 1111 0000</td>\r\n		</tr>\r\n		<tr>\r\n			<td>&gt;&gt; (right shift)</td>\r\n			<td>Binary Right Shift Operator. The left operands value is moved right by the number of bits specified by the right operand.</td>\r\n			<td>A &gt;&gt; 2 will give 15 which is 1111</td>\r\n		</tr>\r\n		<tr>\r\n			<td>&gt;&gt;&gt; (zero fill right shift)</td>\r\n			<td>Shift right zero fill operator. The left operands value is moved right by the number of bits specified by the right operand and shifted values are filled up with zeros.</td>\r\n			<td>A &gt;&gt;&gt;2 will give 15 which is 0000 1111</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n\r\n<h2>The Logical Operators</h2>\r\n\r\n<p>The following table lists the logical operators &minus;</p>\r\n\r\n<p>Assume Boolean variables A holds true and variable B holds false, then &minus;</p>\r\n\r\n<p><a href=\"https://www.tutorialspoint.com/java/java_logical_operators_examples.htm\">Show Examples</a></p>\r\n\r\n<table>\r\n	<tbody>\r\n		<tr>\r\n			<th>Operator</th>\r\n			<th>Description</th>\r\n			<th>Example</th>\r\n		</tr>\r\n		<tr>\r\n			<td>&amp;&amp; (logical and)</td>\r\n			<td>Called Logical AND operator. If both the operands are non-zero, then the condition becomes true.</td>\r\n			<td>(A &amp;&amp; B) is false</td>\r\n		</tr>\r\n		<tr>\r\n			<td>|| (logical or)</td>\r\n			<td>Called Logical OR Operator. If any of the two operands are non-zero, then the condition becomes true.</td>\r\n			<td>(A || B) is true</td>\r\n		</tr>\r\n		<tr>\r\n			<td>! (logical not)</td>\r\n			<td>Called Logical NOT Operator. Use to reverses the logical state of its operand. If a condition is true then Logical NOT operator will make false.</td>\r\n			<td>!(A &amp;&amp; B) is true</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n\r\n<h2>The Assignment Operators</h2>\r\n\r\n<p>Following are the assignment operators supported by Java language &minus;</p>\r\n\r\n<p><a href=\"https://www.tutorialspoint.com/java/java_assignment_operators_examples.htm\">Show Examples</a></p>\r\n\r\n<table>\r\n	<tbody>\r\n		<tr>\r\n			<th>Operator</th>\r\n			<th>Description</th>\r\n			<th>Example</th>\r\n		</tr>\r\n		<tr>\r\n			<td>=</td>\r\n			<td>Simple assignment operator. Assigns values from right side operands to left side operand.</td>\r\n			<td>C = A + B will assign value of A + B into C</td>\r\n		</tr>\r\n		<tr>\r\n			<td>+=</td>\r\n			<td>Add AND assignment operator. It adds right operand to the left operand and assign the result to left operand.</td>\r\n			<td>C += A is equivalent to C = C + A</td>\r\n		</tr>\r\n		<tr>\r\n			<td>-=</td>\r\n			<td>Subtract AND assignment operator. It subtracts right operand from the left operand and assign the result to left operand.</td>\r\n			<td>C -= A is equivalent to C = C &ndash; A</td>\r\n		</tr>\r\n		<tr>\r\n			<td>*=</td>\r\n			<td>Multiply AND assignment operator. It multiplies right operand with the left operand and assign the result to left operand.</td>\r\n			<td>C *= A is equivalent to C = C * A</td>\r\n		</tr>\r\n		<tr>\r\n			<td>/=</td>\r\n			<td>Divide AND assignment operator. It divides left operand with the right operand and assign the result to left operand.</td>\r\n			<td>C /= A is equivalent to C = C / A</td>\r\n		</tr>\r\n		<tr>\r\n			<td>%=</td>\r\n			<td>Modulus AND assignment operator. It takes modulus using two operands and assign the result to left operand.</td>\r\n			<td>C %= A is equivalent to C = C % A</td>\r\n		</tr>\r\n		<tr>\r\n			<td>&lt;&lt;=</td>\r\n			<td>Left shift AND assignment operator.</td>\r\n			<td>C &lt;&lt;= 2 is same as C = C &lt;&lt; 2</td>\r\n		</tr>\r\n		<tr>\r\n			<td>&gt;&gt;=</td>\r\n			<td>Right shift AND assignment operator.</td>\r\n			<td>C &gt;&gt;= 2 is same as C = C &gt;&gt; 2</td>\r\n		</tr>\r\n		<tr>\r\n			<td>&amp;=</td>\r\n			<td>Bitwise AND assignment operator.</td>\r\n			<td>C &amp;= 2 is same as C = C &amp; 2</td>\r\n		</tr>\r\n		<tr>\r\n			<td>^=</td>\r\n			<td>bitwise exclusive OR and assignment operator.</td>\r\n			<td>C ^= 2 is same as C = C ^ 2</td>\r\n		</tr>\r\n		<tr>\r\n			<td>|=</td>\r\n			<td>bitwise inclusive OR and assignment operator.</td>\r\n			<td>C |= 2 is same as C = C | 2</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n\r\n<h2>Miscellaneous Operators</h2>\r\n\r\n<p>There are few other operators supported by Java Language.</p>\r\n\r\n<h3>Conditional Operator ( ? : )</h3>\r\n\r\n<p>Conditional operator is also known as the&nbsp;<strong>ternary operator</strong>. This operator consists of three operands and is used to evaluate Boolean expressions. The goal of the operator is to decide, which value should be assigned to the variable. The operator is written as &minus;</p>\r\n\r\n<pre>\r\nvariable x = (expression) ? value if true : value if false\r\n</pre>\r\n\r\n<p>Following is an example &minus;</p>\r\n\r\n<p><strong>Example</strong></p>\r\n\r\n<p><a href=\"http://tpcg.io/xJJ2kP\" rel=\"nofollow\" target=\"_blank\">&nbsp;Live Demo</a></p>\r\n\r\n<pre>\r\npublic class Test {\r\n\r\n   public static void main(String args[]) {\r\n      int a, b;\r\n      a = 10;\r\n      b = (a == 1) ? 20: 30;\r\n      System.out.println( &quot;Value of b is : &quot; +  b );\r\n\r\n      b = (a == 10) ? 20: 30;\r\n      System.out.println( &quot;Value of b is : &quot; + b );\r\n   }\r\n}</pre>\r\n\r\n<p>This will produce the following result &minus;</p>\r\n\r\n<p><strong>Output</strong></p>\r\n\r\n<pre>\r\nValue of b is : 30\r\nValue of b is : 20\r\n</pre>\r\n\r\n<h3>instanceof Operator</h3>\r\n\r\n<p>This operator is used only for object reference variables. The operator checks whether the object is of a particular type (class type or interface type). instanceof operator is written as &minus;</p>\r\n\r\n<pre>\r\n( Object reference variable ) instanceof  (class/interface type)\r\n</pre>\r\n\r\n<p>If the object referred by the variable on the left side of the operator passes the IS-A check for the class/interface type on the right side, then the result will be true. Following is an example &minus;</p>\r\n\r\n<p><strong>Example</strong></p>\r\n\r\n<p><a href=\"http://tpcg.io/P7OE1d\" rel=\"nofollow\" target=\"_blank\">&nbsp;Live Demo</a></p>\r\n\r\n<pre>\r\npublic class Test {\r\n\r\n   public static void main(String args[]) {\r\n\r\n      String name = &quot;James&quot;;\r\n\r\n      // following will return true since name is type of String\r\n      boolean result = name instanceof String;\r\n      System.out.println( result );\r\n   }\r\n}</pre>\r\n\r\n<p>This will produce the following result &minus;</p>\r\n\r\n<p><strong>Output</strong></p>\r\n\r\n<pre>\r\ntrue\r\n</pre>\r\n\r\n<p>This operator will still return true, if the object being compared is the assignment compatible with the type on the right. Following is one more example &minus;</p>\r\n\r\n<p><strong>Example</strong></p>\r\n\r\n<p><a href=\"http://tpcg.io/TWlS7d\" rel=\"nofollow\" target=\"_blank\">&nbsp;Live Demo</a></p>\r\n\r\n<pre>\r\nclass Vehicle {}\r\n\r\npublic class Car extends Vehicle {\r\n\r\n   public static void main(String args[]) {\r\n\r\n      Vehicle a = new Car();\r\n      boolean result =  a instanceof Car;\r\n      System.out.println( result );\r\n   }\r\n}</pre>\r\n\r\n<p>This will produce the following result &minus;</p>\r\n\r\n<p><strong>Output</strong></p>\r\n\r\n<pre>\r\ntrue\r\n</pre>\r\n\r\n<h2>Precedence of Java Operators</h2>\r\n\r\n<p>Operator precedence determines the grouping of terms in an expression. This affects how an expression is evaluated. Certain operators have higher precedence than others; for example, the multiplication operator has higher precedence than the addition operator &minus;</p>\r\n\r\n<p>For example, x = 7 + 3 * 2; here x is assigned 13, not 20 because operator * has higher precedence than +, so it first gets multiplied with 3 * 2 and then adds into 7.</p>\r\n\r\n<p>Here, operators with the highest precedence appear at the top of the table, those with the lowest appear at the bottom. Within an expression, higher precedence operators will be evaluated first.</p>\r\n\r\n<table>\r\n	<tbody>\r\n		<tr>\r\n			<th>Category</th>\r\n			<th>Operator</th>\r\n			<th>Associativity</th>\r\n		</tr>\r\n		<tr>\r\n			<td>Postfix</td>\r\n			<td>expression++ expression--</td>\r\n			<td>Left to right</td>\r\n		</tr>\r\n		<tr>\r\n			<td>Unary</td>\r\n			<td>++expression &ndash;-expression +expression &ndash;expression ~ !</td>\r\n			<td>Right to left</td>\r\n		</tr>\r\n		<tr>\r\n			<td>Multiplicative</td>\r\n			<td>* / %</td>\r\n			<td>Left to right</td>\r\n		</tr>\r\n		<tr>\r\n			<td>Additive</td>\r\n			<td>+ -</td>\r\n			<td>Left to right</td>\r\n		</tr>\r\n		<tr>\r\n			<td>Shift</td>\r\n			<td>&lt;&lt; &gt;&gt; &gt;&gt;&gt;</td>\r\n			<td>Left to right</td>\r\n		</tr>\r\n		<tr>\r\n			<td>Relational</td>\r\n			<td>&lt; &gt; &lt;= &gt;= instanceof</td>\r\n			<td>Left to right</td>\r\n		</tr>\r\n		<tr>\r\n			<td>Equality</td>\r\n			<td>== !=</td>\r\n			<td>Left to right</td>\r\n		</tr>\r\n		<tr>\r\n			<td>Bitwise AND</td>\r\n			<td>&amp;</td>\r\n			<td>Left to right</td>\r\n		</tr>\r\n		<tr>\r\n			<td>Bitwise XOR</td>\r\n			<td>^</td>\r\n			<td>Left to right</td>\r\n		</tr>\r\n		<tr>\r\n			<td>Bitwise OR</td>\r\n			<td>|</td>\r\n			<td>Left to right</td>\r\n		</tr>\r\n		<tr>\r\n			<td>Logical AND</td>\r\n			<td>&amp;&amp;</td>\r\n			<td>Left to right</td>\r\n		</tr>\r\n		<tr>\r\n			<td>Logical OR</td>\r\n			<td>||</td>\r\n			<td>Left to right</td>\r\n		</tr>\r\n		<tr>\r\n			<td>Conditional</td>\r\n			<td>?:</td>\r\n			<td>Right to left</td>\r\n		</tr>\r\n		<tr>\r\n			<td>Assignment</td>\r\n			<td>= += -= *= /= %= ^= |= &lt;&lt;= &gt;&gt;= &gt;&gt;&gt;=</td>\r\n			<td>Right to left</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n\r\n<h2>What is Next?</h2>\r\n\r\n<p>The next chapter will explain about loop control in Java programming. The chapter will describe various types of loops and how these loops can be used in Java program development and for what purposes they are being used.</p>\r\n', 'java'),
(41, 'Java - Loop Control', '<h1 style=\"margin-left:120px\"><span style=\"color:#3498db\"><span style=\"font-size:24px\"><strong>Java - Loop Control</strong></span></span></h1>\r\n\r\n<p>There may be a situation when you need to execute a block of code several number of times. In general, statements are executed sequentially: The first statement in a function is executed first, followed by the second, and so on.</p>\r\n\r\n<p>Programming languages provide various control structures that allow for more complicated execution paths.</p>\r\n\r\n<p>A&nbsp;<strong>loop</strong>&nbsp;statement allows us to execute a statement or group of statements multiple times and following is the general form of a loop statement in most of the programming languages &minus;</p>\r\n\r\n<p><img alt=\"Loop Architecture\" src=\"https://www.tutorialspoint.com/java/images/loop_architecture.jpg\" /></p>\r\n\r\n<p>Java programming language provides the following types of loop to handle looping requirements. Click the following links to check their detail.</p>\r\n\r\n<table>\r\n	<tbody>\r\n		<tr>\r\n			<th>Sr.No.</th>\r\n			<th>Loop &amp; Description</th>\r\n		</tr>\r\n		<tr>\r\n			<td>1</td>\r\n			<td><a href=\"https://www.tutorialspoint.com/java/java_while_loop.htm\">while loop</a>\r\n			<p>Repeats a statement or group of statements while a given condition is true. It tests the condition before executing the loop body.</p>\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>2</td>\r\n			<td><a href=\"https://www.tutorialspoint.com/java/java_for_loop.htm\">for loop</a>\r\n			<p>Execute a sequence of statements multiple times and abbreviates the code that manages the loop variable.</p>\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>3</td>\r\n			<td><a href=\"https://www.tutorialspoint.com/java/java_do_while_loop.htm\">do...while loop</a>\r\n			<p>Like a while statement, except that it tests the condition at the end of the loop body.</p>\r\n			</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n\r\n<h2>Loop Control Statements</h2>\r\n\r\n<p>Loop control statements change execution from its normal sequence. When execution leaves a scope, all automatic objects that were created in that scope are destroyed.</p>\r\n\r\n<p>Java supports the following control statements. Click the following links to check their detail.</p>\r\n\r\n<table>\r\n	<tbody>\r\n		<tr>\r\n			<th>Sr.No.</th>\r\n			<th>Control Statement &amp; Description</th>\r\n		</tr>\r\n		<tr>\r\n			<td>1</td>\r\n			<td><a href=\"https://www.tutorialspoint.com/java/java_break_statement.htm\">break statement</a>\r\n			<p>Terminates the&nbsp;<strong>loop</strong>&nbsp;or&nbsp;<strong>switch</strong>&nbsp;statement and transfers execution to the statement immediately following the loop or switch.</p>\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>2</td>\r\n			<td><a href=\"https://www.tutorialspoint.com/java/java_continue_statement.htm\">continue statement</a>\r\n			<p>Causes the loop to skip the remainder of its body and immediately retest its condition prior to reiterating.</p>\r\n			</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n\r\n<h2>Enhanced for loop in Java</h2>\r\n\r\n<p>As of Java 5, the enhanced for loop was introduced. This is mainly used to traverse collection of elements including arrays.</p>\r\n\r\n<h3>Syntax</h3>\r\n\r\n<p>Following is the syntax of enhanced for loop &minus;</p>\r\n\r\n<pre>\r\nfor(declaration : expression) {\r\n   // Statements\r\n}\r\n</pre>\r\n\r\n<ul>\r\n	<li>\r\n	<p><strong>Declaration</strong>&nbsp;&minus; The newly declared block variable, is of a type compatible with the elements of the array you are accessing. The variable will be available within the for block and its value would be the same as the current array element.</p>\r\n	</li>\r\n	<li>\r\n	<p><strong>Expression</strong>&nbsp;&minus; This evaluates to the array you need to loop through. The expression can be an array variable or method call that returns an array.</p>\r\n	</li>\r\n</ul>\r\n\r\n<h3>Example</h3>\r\n\r\n<p><a href=\"http://tpcg.io/4R5ayk\" rel=\"nofollow\" target=\"_blank\">&nbsp;Live Demo</a></p>\r\n\r\n<pre>\r\npublic class Test {\r\n\r\n   public static void main(String args[]) {\r\n      int [] numbers = {10, 20, 30, 40, 50};\r\n\r\n      for(int x : numbers ) {\r\n         System.out.print( x );\r\n         System.out.print(&quot;,&quot;);\r\n      }\r\n      System.out.print(&quot;\n&quot;);\r\n      String [] names = {&quot;James&quot;, &quot;Larry&quot;, &quot;Tom&quot;, &quot;Lacy&quot;};\r\n\r\n      for( String name : names ) {\r\n         System.out.print( name );\r\n         System.out.print(&quot;,&quot;);\r\n      }\r\n   }\r\n}</pre>\r\n\r\n<p>This will produce the following result &minus;</p>\r\n\r\n<h3>Output</h3>\r\n\r\n<pre>\r\n10, 20, 30, 40, 50,\r\nJames, Larry, Tom, Lacy,\r\n</pre>\r\n\r\n<h2>What is Next?</h2>\r\n\r\n<p>In the following chapter, we will be learning about decision making statements in Java programming.</p>\r\n', 'java'),
(42, 'Java - Decision Making', '<h1 style=\"margin-left:120px\"><span style=\"color:#ffffff\"><span style=\"font-size:24px\"><strong><span style=\"background-color:#3498db\">Java - Decision Making</span></strong></span></span></h1>\r\n\r\n<p>Decision making structures have one or more conditions to be evaluated or tested by the program, along with a statement or statements that are to be executed if the condition is determined to be true, and optionally, other statements to be executed if the condition is determined to be false.</p>\r\n\r\n<p>Following is the general form of a typical decision making structure found in most of the programming languages &minus;</p>\r\n\r\n<p><img alt=\"Decision Making\" src=\"https://www.tutorialspoint.com/java/images/decision_making.jpg\" /></p>\r\n\r\n<p>Java programming language provides following types of decision making statements. Click the following links to check their detail.</p>\r\n\r\n<table>\r\n	<tbody>\r\n		<tr>\r\n			<th>Sr.No.</th>\r\n			<th>Statement &amp; Description</th>\r\n		</tr>\r\n		<tr>\r\n			<td>1</td>\r\n			<td><a href=\"https://www.tutorialspoint.com/java/if_statement_in_java.htm\">if statement</a>\r\n			<p>An&nbsp;<strong>if statement</strong>&nbsp;consists of a boolean expression followed by one or more statements.</p>\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>2</td>\r\n			<td><a href=\"https://www.tutorialspoint.com/java/if_else_statement_in_java.htm\">if...else statement</a>\r\n			<p>An&nbsp;<strong>if statement</strong>&nbsp;can be followed by an optional&nbsp;<strong>else statement</strong>, which executes when the boolean expression is false.</p>\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>3</td>\r\n			<td><a href=\"https://www.tutorialspoint.com/java/nested_if_statements_in_java.htm\">nested if statement</a>\r\n			<p>You can use one&nbsp;<strong>if</strong>&nbsp;or&nbsp;<strong>else if</strong>&nbsp;statement inside another&nbsp;<strong>if</strong>&nbsp;or&nbsp;<strong>else if</strong>statement(s).</p>\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>4</td>\r\n			<td><a href=\"https://www.tutorialspoint.com/java/switch_statement_in_java.htm\">switch statement</a>\r\n			<p>A&nbsp;<strong>switch</strong>&nbsp;statement allows a variable to be tested for equality against a list of values.</p>\r\n			</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n\r\n<h2>The ? : Operator</h2>\r\n\r\n<p>We have covered&nbsp;<strong>conditional operator ? :</strong>&nbsp;in the previous chapter which can be used to replace&nbsp;<strong>if...else</strong>&nbsp;statements. It has the following general form &minus;</p>\r\n\r\n<pre>\r\nExp1 ? Exp2 : Exp3;\r\n</pre>\r\n\r\n<p>Where Exp1, Exp2, and Exp3 are expressions. Notice the use and placement of the colon.</p>\r\n\r\n<p>To determine the value of the whole expression, initially exp1 is evaluated.</p>\r\n\r\n<ul>\r\n	<li>\r\n	<p>If the value of exp1 is true, then the value of Exp2 will be the value of the whole expression.</p>\r\n	</li>\r\n	<li>\r\n	<p>If the value of exp1 is false, then Exp3 is evaluated and its value becomes the value of the entire expression.</p>\r\n	</li>\r\n</ul>\r\n\r\n<h2>What is Next?</h2>\r\n\r\n<p>In the next chapter, we will discuss about Number class (in the java.lang package) and its subclasses in Java Language.</p>\r\n\r\n<p>We will be looking into some of the situations where you will use instantiations of these classes rather than the primitive data types, as well as classes such as formatting, mathematical functions that you need to know about when working with Numbers.</p>\r\n', 'java'),
(43, 'Java - Numbers Class', '<h1 style=\"margin-left:120px\"><span style=\"color:#3498db\"><span style=\"font-size:24px\"><strong>Java - Numbers Class</strong></span></span></h1>\r\n\r\n<p>Normally, when we work with Numbers, we use primitive data types such as byte, int, long, double, etc.</p>\r\n\r\n<h3>Example</h3>\r\n\r\n<pre>\r\nint i = 5000;\r\nfloat gpa = 13.65;\r\ndouble mask = 0xaf;</pre>\r\n\r\n<p>However, in development, we come across situations where we need to use objects instead of primitive data types. In order to achieve this, Java provides&nbsp;<strong>wrapper classes</strong>.</p>\r\n\r\n<p>All the wrapper classes (Integer, Long, Byte, Double, Float, Short) are subclasses of the abstract class Number.</p>\r\n\r\n<p><img alt=\"Number Classes\" src=\"https://www.tutorialspoint.com/java/images/number_classes.jpg\" /></p>\r\n\r\n<p>The object of the wrapper class contains or wraps its respective primitive data type. Converting primitive data types into object is called&nbsp;<strong>boxing</strong>, and this is taken care by the compiler. Therefore, while using a wrapper class you just need to pass the value of the primitive data type to the constructor of the Wrapper class.</p>\r\n\r\n<p>And the Wrapper object will be converted back to a primitive data type, and this process is called unboxing. The&nbsp;<strong>Number</strong>&nbsp;class is part of the java.lang package.</p>\r\n\r\n<p>Following is an example of boxing and unboxing &minus;</p>\r\n\r\n<h3>Example</h3>\r\n\r\n<p><a href=\"http://tpcg.io/rNELk1\" rel=\"nofollow\" target=\"_blank\">&nbsp;Live Demo</a></p>\r\n\r\n<pre>\r\npublic class Test {\r\n\r\n   public static void main(String args[]) {\r\n      Integer x = 5; // boxes int to an Integer object\r\n      x =  x + 10;   // unboxes the Integer to a int\r\n      System.out.println(x); \r\n   }\r\n}</pre>\r\n\r\n<p>This will produce the following result &minus;</p>\r\n\r\n<h3>Output</h3>\r\n\r\n<pre>\r\n15\r\n</pre>\r\n\r\n<p>When x is assigned an integer value, the compiler boxes the integer because x is integer object. Later, x is unboxed so that they can be added as an integer.</p>\r\n\r\n<h2>Number Methods</h2>\r\n\r\n<p>Following is the list of the instance methods that all the subclasses of the Number class implements &minus;</p>\r\n\r\n<table>\r\n	<tbody>\r\n		<tr>\r\n			<th>Sr.No.</th>\r\n			<th>Method &amp; Description</th>\r\n		</tr>\r\n		<tr>\r\n			<td>1</td>\r\n			<td><a href=\"https://www.tutorialspoint.com/java/number_xxxvalue.htm\">xxxValue()</a>\r\n			<p>Converts the value of&nbsp;<em>this</em>&nbsp;Number object to the xxx data type and returns it.</p>\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>2</td>\r\n			<td><a href=\"https://www.tutorialspoint.com/java/number_compareto.htm\">compareTo()</a>\r\n			<p>Compares&nbsp;<em>this</em>&nbsp;Number object to the argument.</p>\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>3</td>\r\n			<td><a href=\"https://www.tutorialspoint.com/java/number_equals.htm\">equals()</a>\r\n			<p>Determines whether&nbsp;<em>this</em>&nbsp;number object is equal to the argument.</p>\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>4</td>\r\n			<td><a href=\"https://www.tutorialspoint.com/java/number_valueof.htm\">valueOf()</a>\r\n			<p>Returns an Integer object holding the value of the specified primitive.</p>\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>5</td>\r\n			<td><a href=\"https://www.tutorialspoint.com/java/number_tostring.htm\">toString()</a>\r\n			<p>Returns a String object representing the value of a specified int or Integer.</p>\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>6</td>\r\n			<td><a href=\"https://www.tutorialspoint.com/java/number_parseint.htm\">parseInt()</a>\r\n			<p>This method is used to get the primitive data type of a certain String.</p>\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>7</td>\r\n			<td><a href=\"https://www.tutorialspoint.com/java/number_abs.htm\">abs()</a>\r\n			<p>Returns the absolute value of the argument.</p>\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>8</td>\r\n			<td><a href=\"https://www.tutorialspoint.com/java/number_ceil.htm\">ceil()</a>\r\n			<p>Returns the smallest integer that is greater than or equal to the argument. Returned as a double.</p>\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>9</td>\r\n			<td><a href=\"https://www.tutorialspoint.com/java/number_floor.htm\">floor()</a>\r\n			<p>Returns the largest integer that is less than or equal to the argument. Returned as a double.</p>\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>10</td>\r\n			<td><a href=\"https://www.tutorialspoint.com/java/number_rint.htm\">rint()</a>\r\n			<p>Returns the integer that is closest in value to the argument. Returned as a double.</p>\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>11</td>\r\n			<td><a href=\"https://www.tutorialspoint.com/java/number_round.htm\">round()</a>\r\n			<p>Returns the closest long or int, as indicated by the method&#39;s return type to the argument.</p>\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>12</td>\r\n			<td><a href=\"https://www.tutorialspoint.com/java/number_min.htm\">min()</a>\r\n			<p>Returns the smaller of the two arguments.</p>\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>13</td>\r\n			<td><a href=\"https://www.tutorialspoint.com/java/number_max.htm\">max()</a>\r\n			<p>Returns the larger of the two arguments.</p>\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>14</td>\r\n			<td><a href=\"https://www.tutorialspoint.com/java/number_exp.htm\">exp()</a>\r\n			<p>Returns the base of the natural logarithms, e, to the power of the argument.</p>\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>15</td>\r\n			<td><a href=\"https://www.tutorialspoint.com/java/number_log.htm\">log()</a>\r\n			<p>Returns the natural logarithm of the argument.</p>\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>16</td>\r\n			<td><a href=\"https://www.tutorialspoint.com/java/number_pow.htm\">pow()</a>\r\n			<p>Returns the value of the first argument raised to the power of the second argument.</p>\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>17</td>\r\n			<td><a href=\"https://www.tutorialspoint.com/java/number_sqrt.htm\">sqrt()</a>\r\n			<p>Returns the square root of the argument.</p>\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>18</td>\r\n			<td><a href=\"https://www.tutorialspoint.com/java/number_sin.htm\">sin()</a>\r\n			<p>Returns the sine of the specified double value.</p>\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>19</td>\r\n			<td><a href=\"https://www.tutorialspoint.com/java/number_cos.htm\">cos()</a>\r\n			<p>Returns the cosine of the specified double value.</p>\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>20</td>\r\n			<td><a href=\"https://www.tutorialspoint.com/java/number_tan.htm\">tan()</a>\r\n			<p>Returns the tangent of the specified double value.</p>\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>21</td>\r\n			<td><a href=\"https://www.tutorialspoint.com/java/number_asin.htm\">asin()</a>\r\n			<p>Returns the arcsine of the specified double value.</p>\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>22</td>\r\n			<td><a href=\"https://www.tutorialspoint.com/java/number_acos.htm\">acos()</a>\r\n			<p>Returns the arccosine of the specified double value.</p>\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>23</td>\r\n			<td><a href=\"https://www.tutorialspoint.com/java/number_atan.htm\">atan()</a>\r\n			<p>Returns the arctangent of the specified double value.</p>\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>24</td>\r\n			<td><a href=\"https://www.tutorialspoint.com/java/number_atan2.htm\">atan2()</a>\r\n			<p>Converts rectangular coordinates (x, y) to polar coordinate (r, theta) and returns theta.</p>\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>25</td>\r\n			<td><a href=\"https://www.tutorialspoint.com/java/number_todegrees.htm\">toDegrees()</a>\r\n			<p>Converts the argument to degrees.</p>\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>26</td>\r\n			<td><a href=\"https://www.tutorialspoint.com/java/number_toradians.htm\">toRadians()</a>\r\n			<p>Converts the argument to radians.</p>\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>27</td>\r\n			<td><a href=\"https://www.tutorialspoint.com/java/number_random.htm\">random()</a>\r\n			<p>Returns a random number.</p>\r\n			</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n\r\n<h2>What is Next?</h2>\r\n\r\n<p>In the next section, we will be going through the Character class in Java. You will be learning how to use object Characters and primitive data type char in Java.</p>\r\n', 'java'),
(51, 'C-Variable', '<p>vavriab;e</p>\r\n', 'C'),
(53, 'java-static', '<p>sdfzf</p>\r\n', 'java'),
(54, 'CSS Variable', '<p>CSS VAriabel demo.</p>\r\n', 'css'),
(55, 'CSS style tag', '<p>it is a description</p>\r\n', 'css');
INSERT INTO `courses` (`id`, `topic_name`, `description`, `course_name`) VALUES
(56, 'Cloud Computing', '<p>In Simplest terms, cloud computing means storing and accessing the data and programs on remote servers that are hosted on the internet instead of the computer&rsquo;s hard drive or local server. Cloud computing is also referred to as Internet-based computing.&nbsp;</p>\r\n\r\n<p><strong>Cloud Computing Architecture:</strong>&nbsp;Cloud computing architecture refers to the components and sub-components required for cloud computing. These components typically refer to:</p>\r\n\r\n<ol>\r\n	<li>Front end(fat client, thin client)</li>\r\n	<li>Back-end platforms(servers, storage)</li>\r\n	<li>Cloud-based delivery and a network(Internet, Intranet, Intercloud).</li>\r\n</ol>\r\n\r\n<p><strong>Hosting a cloud:</strong>&nbsp;There are three layers in cloud computing. Companies use these layers based on the service they provide.</p>\r\n\r\n<ul>\r\n	<li>Infrastructure</li>\r\n	<li>Platform</li>\r\n	<li>Application</li>\r\n</ul>\r\n\r\n<p><img alt=\"Cloud-Computing-Diagram\" src=\"https://media.geeksforgeeks.org/wp-content/uploads/Cloud-Computing-Diagram.png\" /></p>\r\n\r\n<p>Three layers of Cloud Computing</p>\r\n\r\n<p>At the bottom is the foundation, the Infrastructure where the people start and begin to build. This is the layer where the cloud hosting lives.&nbsp;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Now, let&rsquo;s have a look at hosting:</strong>&nbsp;Let&rsquo;s say you have a company and a website and the website has a lot of communications that are exchanged between members. You start with a few members talking with each other and then gradually the number of members increases. As the time passes, as the number of members increases, there would be more traffic on the network and your server will get slow down. This would cause a problem. A few years ago, the websites are put on the server somewhere, in this way you have to run around or buy and set the number of servers. It costs a lot of money and takes a lot of time. You pay for these servers when you are using them and as well as when you are not using them. This is called hosting. This problem is overcome by cloud hosting. With Cloud Computing, you have access to computing power when you needed. Now, your website is put in the cloud server as you put it on a dedicated server. People start visiting your website and if you suddenly need more computing power, you would scale up according to the need.&nbsp;</p>\r\n\r\n<p><strong>Benefits of Cloud Hosting:</strong></p>\r\n\r\n<ol>\r\n	<li><strong>Scalability:</strong>&nbsp;With Cloud hosting, it is easy to grow and shrink the number and size of servers based on the need. This is done by either increasing or decreasing the resources in the cloud. This ability to alter plans due to fluctuation in business size and needs is a superb benefit of cloud computing, especially when experiencing a sudden growth in demand.</li>\r\n	<li><strong>Instant:</strong>&nbsp;Whatever you want is instantly available in the cloud.</li>\r\n	<li><strong>Save Money:</strong>&nbsp;An advantage of cloud computing is the reduction in hardware costs. Instead of purchasing in-house equipment, hardware needs are left to the vendor. For companies that are growing rapidly, new hardware can be large, expensive, and inconvenient. Cloud computing alleviates these issues because resources can be acquired quickly and easily. Even better, the cost of repairing or replacing equipment is passed to the vendors. Along with purchase costs, off-site hardware cuts internal power costs and saves space. Large data centers can take up precious office space and produce a large amount of heat. Moving to cloud applications or storage can help maximize space and significantly cut energy expenditures.</li>\r\n	<li><strong>Reliability:&nbsp;</strong>Rather than being hosted on one single instance of a physical server, hosting is delivered on a virtual partition that draws its resource, such as disk space, from an extensive network of underlying physical servers. If one server goes offline it will have no effect on availability, as the virtual servers will continue to pull resources from the remaining network of servers.</li>\r\n	<li><strong>Physical Security:</strong>&nbsp;The underlying physical servers are still housed within data centers and so benefit from the security measures that those facilities implement to prevent people from accessing or disrupting them on-site.</li>\r\n	<li><strong>Outsource Management:</strong>&nbsp;When you are managing the business, Someone else manages your computing infrastructure. You do not need to worry about management as well as upgradation.</li>\r\n</ol>\r\n\r\n<p>To more clarification about how cloud computing has changed the commercial deployment of the system. Consider the below examples:</p>\r\n\r\n<ol>\r\n	<li><strong>Amazon Web Services(AWS):&nbsp;</strong>One of the most successful cloud-based businesses is Amazon Web Services(AWS), which is an Infrastructure as a Service(Iaas) offering that pays rent for virtual computers on Amazon&rsquo;s infrastructure.</li>\r\n	<li><strong>Microsoft Azure Platform</strong>: Microsoft is creating the Azure platform which enables the .NET Framework Application to run over the internet as an alternative platform for Microsoft developers. This is the classic Platform as a Service(PaaS).</li>\r\n	<li><strong>Google:&nbsp;</strong>Google has built a worldwide network of data centers to service its search engine. From this service, Google has captured the world&rsquo;s advertising revenue. By using that revenue, Google offers free software to users based on infrastructure. This is called Software as a Service(SaaS).</li>\r\n	<li><strong>IBM Cloud</strong>&nbsp;is a collection of cloud computing services for business provided by the IBM Corporation. It provides infrastructure as a service, software as a service, and platform as a service.</li>\r\n	<li><strong>Oracle Cloud</strong>&nbsp;is a collection of cloud services offered by Oracle Corporation, including infrastructure as a service (IaaS), platform as a service (PaaS), and software as a service (SaaS).</li>\r\n	<li><strong>Alibaba Cloud</strong>&nbsp;is the cloud computing arm of Alibaba Group, providing a comprehensive suite of global cloud computing services to power both their international customers&rsquo; online businesses and Alibaba Group&rsquo;s own e-commerce ecosystem.</li>\r\n	<li><strong>Tencent Cloud&nbsp;</strong>is a cloud service platform provided by Tencent. It provides a range of services such as virtual machines, storage, databases, and analytics.</li>\r\n	<li><strong>Rackspace</strong>&nbsp;is a provider of hybrid cloud computing, founded in 1998. It provides managed hosting, cloud hosting, and email and apps services.</li>\r\n	<li><strong>Salesforce &ndash;</strong>&nbsp;A cloud-based customer relationship management (CRM) platform used for sales, marketing, and customer service.</li>\r\n	<li><strong>VMware Cloud &ndash;</strong>&nbsp;A cloud platform by VMware, offering services such as virtualization, cloud management, and network virtualization.</li>\r\n	<li><strong>DigitalOcean &ndash;</strong>&nbsp;A cloud platform focused on providing easy-to-use, scalable compute services.</li>\r\n	<li><strong>Red Hat OpenShift &ndash;</strong>&nbsp;A cloud platform by Red Hat, offering container-based application development and management.</li>\r\n	<li><strong>Cisco Cloud &ndash;&nbsp;</strong>A cloud platform by Cisco, offering a range of services including networking, security, and application development.</li>\r\n	<li><strong>HP Helion &ndash;&nbsp;</strong>A cloud platform by HP, offering services such as compute, storage, and networking.</li>\r\n	<li><strong>SAP Cloud Platform &ndash;</strong>&nbsp;A cloud platform by SAP, offering services such as analytics, application development, and integration.</li>\r\n	<li><strong>Fujitsu Cloud &ndash;</strong>&nbsp;A cloud platform by Fujitsu, offering services such as compute, storage, and networking.</li>\r\n	<li><strong>OVHcloud &ndash;&nbsp;</strong>A cloud platform offering a range of services including compute, storage, and networking.</li>\r\n	<li><strong>CenturyLink Cloud &ndash;&nbsp;</strong>A cloud platform offering a range of services including compute, storage, and networking.</li>\r\n	<li><strong>Joyent &ndash;&nbsp;</strong>A cloud platform offering services such as compute, storage, and container-based application development.</li>\r\n	<li><strong>NTT Communications Cloud &ndash;</strong>&nbsp;A cloud platform offering services such as compute, storage, and networking.</li>\r\n</ol>\r\n\r\n<p>These are just a few examples of the wide range of applications for cloud computing. As technology continues to advance, the possibilities for cloud computing will continue to expand.</p>\r\n\r\n<p>This article is contributed by&nbsp;<strong>Brahmani Sai</strong>. If you like GeeksforGeeks and would like to contribute, you can also write an article using&nbsp;<a href=\"http://write.geeksforgeeks.org/\">write.geeksforgeeks.org</a>&nbsp;or mail your article to review-team@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.&nbsp;</p>\r\n\r\n<p>Please write comments if you find anything incorrect, or if you want to share more information about the topic discussed above.</p>\r\n\r\n<p>Last Updated :&nbsp;27 Feb, 2023</p>\r\n\r\n<p>125</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Similar Reads</p>\r\n\r\n<p>1.<a href=\"https://www.geeksforgeeks.org/difference-between-cloud-computing-and-fog-computing/\" rel=\"bookmark\" title=\"Difference Between Cloud Computing and Fog Computing\">Difference Between Cloud Computing and Fog Computing</a></p>\r\n\r\n<p>2.<a href=\"https://www.geeksforgeeks.org/difference-between-cloud-computing-and-green-computing/\" rel=\"bookmark\" title=\"Difference between Cloud Computing and Green Computing\">Difference between Cloud Computing and Green Computing</a></p>\r\n\r\n<p>3.<a href=\"https://www.geeksforgeeks.org/serverless-computing-and-faas-model-the-next-stage-in-cloud-computing/\" rel=\"bookmark\" title=\"Serverless Computing and FaaS Model - The Next Stage in Cloud Computing\">Serverless Computing and FaaS Model - The Next Stage in Cloud Computing</a></p>\r\n\r\n<p>4.<a href=\"https://www.geeksforgeeks.org/difference-between-edge-computing-and-cloud-computing/\" rel=\"bookmark\" title=\"Difference between Edge Computing and Cloud Computing\">Difference between Edge Computing and Cloud Computing</a></p>\r\n\r\n<p>5.<a href=\"https://www.geeksforgeeks.org/cloud-management-in-cloud-computing/\" rel=\"bookmark\" title=\"Cloud Management in Cloud Computing\">Cloud Management in Cloud Computing</a></p>\r\n\r\n<p>6.<a href=\"https://www.geeksforgeeks.org/public-cloud-vs-private-cloud-vs-hybrid-cloud/\" rel=\"bookmark\" title=\"Public Cloud vs Private Cloud vs Hybrid Cloud\">Public Cloud vs Private Cloud vs Hybrid Cloud</a></p>\r\n\r\n<p>7.<a href=\"https://www.geeksforgeeks.org/conventional-computing-vs-quantum-computing/\" rel=\"bookmark\" title=\"Conventional Computing vs Quantum Computing\">Conventional Computing vs Quantum Computing</a></p>\r\n\r\n<p>8.<a href=\"https://www.geeksforgeeks.org/cloud-computing-platforms-and-technologies/\" rel=\"bookmark\" title=\"Cloud Computing Platforms and Technologies\">Cloud Computing Platforms and Technologies</a></p>\r\n\r\n<p>9.<a href=\"https://www.geeksforgeeks.org/cloud-computing-research-challenges/\" rel=\"bookmark\" title=\"Cloud computing Research challenges\">Cloud computing Research challenges</a></p>\r\n\r\n<p>10.<a href=\"https://www.geeksforgeeks.org/licenses-and-their-management-in-cloud-computing/\" rel=\"bookmark\" title=\"Licenses and their management in Cloud Computing\">Licenses and their management in Cloud Computing</a></p>\r\n', 'Cloud Computing'),
(57, 'History of Cloud Computing', '<p>In this, we will cover the basic overview of cloud computing. And you will see mainly our focus on history of cloud computing and will cover the history of client server computing, distributed computing, and cloud computing.&nbsp;Let&rsquo;s discuss it one by one.&nbsp;</p>\r\n\r\n<p><a href=\"https://www.geeksforgeeks.org/cloud-computing/\"><strong>Cloud Computing</strong></a><strong>&nbsp;:</strong><br />\r\nCloud Computing referred as the accessing and storing of data and provide services related to computing over the internet. It simply referred as it remote services on the internet manage and access data online rather than any local drives. The data can be anything like images, videos, audios, documents, files etc.</p>\r\n\r\n<p><img src=\"https://media.geeksforgeeks.org/wp-content/uploads/20210302081129/cloudonecagain.png\" style=\"width:629px\" /></p>\r\n\r\n<p><strong>Cloud Computing Service Provider&rsquo;s : &nbsp;</strong><br />\r\nCloud computing is in huge demand so, big organization providing the service like<a href=\"https://www.geeksforgeeks.org/introduction-to-amazon-web-services/\">&nbsp;Amazon AWS</a>,&nbsp;<a href=\"https://www.geeksforgeeks.org/introduction-microsoft-azure-cloud-computing-service/\">Microsoft Azure</a>,&nbsp;<a href=\"https://www.geeksforgeeks.org/what-is-google-cloud-platform-gcp/\">Google Cloud</a>,&nbsp;<a href=\"https://www.geeksforgeeks.org/difference-between-alibaba-cloud-tsdb-and-amazon-documentdb/\">Alibaba cloud</a>&nbsp;etc. are some Cloud Computing service Provider.</p>\r\n\r\n<p><strong>History of Cloud Computing :</strong><br />\r\nIn this, we will discuss the history of Cloud computing. And also cover the history of client server computing, distributed computing, and cloud computing.&nbsp;</p>\r\n\r\n<ul>\r\n	<li>Before Computing was come into existence, client Server Architecture was used where all the data and control of client resides in Server side. If a single user want to access some data, firstly user need to connect to the server and after that user will get appropriate access. But it has many disadvantages. So, After Client Server computing, Distributed Computing was come into existence, in this type of computing all computers are networked together with the help of this, user can share their resources when needed. It also has certain limitations. So in order to remove limitations faced in distributed system, cloud computing was emerged.</li>\r\n</ul>\r\n\r\n<p><img src=\"https://media.geeksforgeeks.org/wp-content/uploads/20210302081624/clagain3.png\" style=\"width:500px\" /></p>\r\n\r\n<ul>\r\n	<li>During 1961, John MacCharty delivered his speech at MIT that &ldquo;Computing Can be sold as a Utility, like Water and Electricity.&rdquo; According to John MacCharty it was a brilliant idea. But people at that time don&rsquo;t want to adopt this technology. They thought the technology they are using efficient enough for them. &nbsp;So, this concept of computing was not appreciated much so and very less will research on it. But as the time fleet the technology caught the idea after few years this idea is implemented. So, this is implemented by Salesforce.com in 1999.&nbsp;<br />\r\n	&nbsp;</li>\r\n	<li>This company started delivering an enterprise application over the internet and this way the boom of Cloud Computing was started.<br />\r\n	&nbsp;</li>\r\n	<li>In 2002, Amazon started Amazon Web Services (AWS), Amazon will provide storage, computation over the internet. In 2006 Amazon will launch Elastic Compute Cloud Commercial Service which is open for Everybody to use.<br />\r\n	&nbsp;</li>\r\n	<li>After that in 2009, Google Play also started providing Cloud Computing Enterprise Application as other companies will see the emergence of cloud Computing they also started providing their cloud services. Thus, in 2009, Microsoft launch Microsoft Azure and after that other companies like Alibaba, IBM, Oracle, HP also introduces their Cloud Services. In today the Cloud Computing become very popular and important skill.</li>\r\n</ul>\r\n\r\n<p><strong>Advantages :</strong></p>\r\n\r\n<ul>\r\n	<li>It is easier to get backup in cloud.</li>\r\n	<li>It allows us easy and quick access stored information anywhere and anytime.</li>\r\n	<li>It allows us to access data via mobile.</li>\r\n	<li>It reduces both hardware ad Software cost, and it is easily maintainable.</li>\r\n	<li>One of the biggest advantage of Cloud Computing is Database Security.</li>\r\n</ul>\r\n\r\n<p><strong>Disadvantages :</strong></p>\r\n\r\n<ul>\r\n	<li>It requires good internet connection.</li>\r\n	<li>User have limited control on the data.</li>\r\n</ul>\r\n\r\n<p>Last Updated :&nbsp;05 Mar, 2021</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>15</p>\r\n\r\n<p>&nbsp;</p>\r\n', 'Cloud Computing'),
(58, 'Characteristics of Cloud Computing', '<p>There are many characteristics of&nbsp;<a href=\"https://www.geeksforgeeks.org/cloud-computing/\">Cloud Computing</a>&nbsp;here are few of them :</p>\r\n\r\n<ol>\r\n	<li><strong>On-demand self-services:</strong>&nbsp;The Cloud computing services does not require any human administrators, user themselves are able to provision, monitor and manage computing resources as needed.</li>\r\n	<li><strong>Broad network access:</strong>&nbsp;The Computing services are generally provided over standard networks and heterogeneous devices.</li>\r\n	<li><strong>Rapid elasticity:</strong>&nbsp;The Computing services should have IT resources that are able to scale out and in quickly and on as needed basis. Whenever the user require services it is provided to him and it is scale out as soon as its requirement gets over.</li>\r\n	<li><strong>Resource pooling:</strong>&nbsp;The IT resource (e.g., networks, servers, storage, applications, and services) present are shared across multiple applications and occupant in an uncommitted manner. Multiple clients are provided service from a same physical resource.</li>\r\n	<li><strong>Measured service:</strong>&nbsp;The resource utilization is tracked for each application and occupant, it will provide both the user and the resource provider with an account of what has been used. This is done for various reasons like monitoring billing and effective use of resource.</li>\r\n	<li><strong>Multi-tenancy:</strong>&nbsp;Cloud computing providers can support multiple tenants (users or organizations) on a single set of shared resources.</li>\r\n	<li><strong>Virtualization:</strong>&nbsp;Cloud computing providers use virtualization technology to abstract underlying hardware resources and present them as logical resources to users.</li>\r\n	<li><strong>Resilient computing:&nbsp;</strong>Cloud computing services are typically designed with redundancy and fault tolerance in mind, which ensures high availability and reliability.</li>\r\n	<li><strong>Flexible pricing models:&nbsp;</strong>Cloud providers offer a variety of pricing models, including pay-per-use, subscription-based, and spot pricing, allowing users to choose the option that best suits their needs.</li>\r\n	<li><strong>Security:</strong>&nbsp;Cloud providers invest heavily in security measures to protect their users&rsquo; data and ensure the privacy of sensitive information.</li>\r\n	<li><strong>Automation:</strong>&nbsp;Cloud computing services are often highly automated, allowing users to deploy and manage resources with minimal manual intervention.</li>\r\n	<li><strong>Sustainability:</strong>&nbsp;Cloud providers are increasingly focused on sustainable practices, such as energy-efficient data centers and the use of renewable energy sources, to reduce their environmental impact.</li>\r\n</ol>\r\n\r\n<p><img src=\"https://media.geeksforgeeks.org/wp-content/uploads/20230127190422/Cloud-Computing-characterstics.png\" /></p>\r\n', 'Cloud Computing'),
(59, 'Architecture of Cloud Computing', '<p><a href=\"https://www.geeksforgeeks.org/cloud-computing/\">Cloud Computing</a>&nbsp;, which is one of the demanding technology of the current time and which is giving a new shape to every organization by providing on demand virtualized services/resources. Starting from small to medium and medium to large, every organization use cloud computing services for storing information and accessing it from anywhere and any time only with the help of internet. In this article, we will know more about the internal architecture of cloud computing.</p>\r\n\r\n<p>Transparency, scalability, security and intelligent monitoring are some of the most important constraints which every cloud infrastructure should experience. Current research on other important constraints is helping cloud computing system to come up with new features and strategies with a great capability of providing more advanced cloud solutions.</p>\r\n\r\n<p><strong>Cloud Computing Architecture :</strong><br />\r\nThe cloud architecture is divided into 2 parts i.e.</p>\r\n\r\n<ol>\r\n	<li>Frontend</li>\r\n	<li>Backend</li>\r\n</ol>\r\n\r\n<p>The below figure represents an internal architectural view of cloud computing.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><img src=\"https://media.geeksforgeeks.org/wp-content/uploads/20210318074917/archcloud2.png\" /></p>\r\n\r\n<p>Architecture of Cloud Computing</p>\r\n\r\n<p>Architecture of cloud computing is the combination of both&nbsp;<a href=\"https://www.geeksforgeeks.org/service-oriented-architecture/\">SOA (Service Oriented Architecture)</a>&nbsp;and EDA (Event Driven Architecture). Client infrastructure, application, service, runtime cloud, storage, infrastructure, management and security all these are the components of cloud computing architecture.</p>\r\n\r\n<p><strong>1. Frontend :</strong><br />\r\nFrontend of the cloud architecture refers to the client side of cloud computing system. Means it contains all the user interfaces and applications which are used by the client to access the cloud computing services/resources. For example, use of a web browser to access the cloud platform.</p>\r\n\r\n<ul>\r\n	<li><strong>Client Infrastructure &ndash;</strong>&nbsp;Client Infrastructure is a part of the frontend component. It contains the applications and user interfaces which are required to access the cloud platform.</li>\r\n	<li>In other words, it provides a GUI( Graphical User Interface ) to interact with the cloud.</li>\r\n</ul>\r\n\r\n<p><strong>2. Backend :&nbsp;</strong><br />\r\nBackend refers to the cloud itself which is used by the service provider. It contains the resources as well as manages the resources and provides security mechanisms. Along with this, it includes huge storage, virtual applications, virtual machines, traffic control mechanisms, deployment models, etc.</p>\r\n\r\n<ol>\r\n	<li><strong>Application &ndash;</strong><br />\r\n	Application in backend refers to a software or platform to which client accesses. Means it provides the service in backend as per the client requirement.</li>\r\n	<li><strong>Service &ndash;</strong><br />\r\n	Service in backend refers to the major three types of cloud based services like&nbsp;<a href=\"https://www.geeksforgeeks.org/cloud-based-services/\">SaaS, PaaS and IaaS</a>. Also manages which type of service the user accesses.</li>\r\n	<li><strong>&nbsp;Runtime Cloud-</strong><br />\r\n	Runtime cloud in backend provides the execution and Runtime platform/environment to the Virtual machine.</li>\r\n	<li><strong>Storage &ndash;</strong><br />\r\n	Storage in backend provides flexible and scalable storage service and management of stored data.</li>\r\n	<li><strong>Infrastructure &ndash;</strong><br />\r\n	Cloud Infrastructure in backend refers to the hardware and software components of cloud like it includes servers, storage, network devices, virtualization software etc.</li>\r\n	<li><strong>Management &ndash;</strong><br />\r\n	Management in backend refers to management of backend components like application, service, runtime cloud, storage, infrastructure, and other security mechanisms etc.</li>\r\n	<li><strong>Security &ndash;</strong><br />\r\n	Security in backend refers to implementation of different security mechanisms in the backend for secure cloud resources, systems, files, and infrastructure to end-users.</li>\r\n	<li><strong>Internet &ndash;</strong><br />\r\n	Internet connection acts as the medium or a bridge between frontend and backend and establishes the interaction and communication between frontend and backend.</li>\r\n	<li><strong>Database</strong>&ndash; Database in backend refers to provide database for storing structured data, such as SQL and NOSQL databases. Example of Databases services include Amazon RDS, Microsoft Azure SQL database and Google CLoud SQL. &nbsp;</li>\r\n	<li><strong>Networking</strong>&ndash; Networking in backend services that provide networking infrastructure for application in the cloud, such as load balancing, DNS and virtual private networks.&nbsp;</li>\r\n	<li><strong>Analytics</strong>&ndash; Analytics in backend service that provides analytics capabillities for data in the cloud, such as warehousing, bussness intellegence and machine learning.</li>\r\n</ol>\r\n\r\n<p><strong>Benefits of Cloud Computing Architecture :</strong></p>\r\n\r\n<ul>\r\n	<li>Makes overall cloud computing system simpler.</li>\r\n	<li>Improves data processing requirements.</li>\r\n	<li>Helps in providing high security.</li>\r\n	<li>Makes it more modularized.</li>\r\n	<li>Results in better disaster recovery.</li>\r\n	<li>Gives good user accessibility.</li>\r\n	<li>Reduces IT operating costs.</li>\r\n	<li>Provides high level reliability.</li>\r\n	<li>Scalability.</li>\r\n</ul>\r\n', 'Cloud Computing'),
(60, 'Cloud Computing Infrastructure', '<p><strong>Prerequisite &ndash;</strong><a href=\"https://www.geeksforgeeks.org/cloud-computing/\">&nbsp;Cloud Computing</a></p>\r\n\r\n<p>Cloud Computing which is one of the demanding technology of current scenario and which has been proved as a revolutionary technology trend for businesses of all sizes. It manages a broad and complex infrastructure setup to provide cloud services and resources to the customers. Cloud Infrastructure which comes under the backend part of cloud architecture represents the hardware and software component such as server, storage, networking, management software, deployment software and virtualization software etc. In backend, cloud infrastructure enables the complete cloud computing system.</p>\r\n\r\n<p><strong>Why Cloud Computing Infrastructure :</strong></p>\r\n\r\n<p>Cloud computing refers to providing on demand services to the customer anywhere and anytime irrespective of everything where the cloud infrastructure represents the one who activates the complete cloud computing system. Cloud infrastructure has more capabilities of providing the same services as the physical infrastructure to the customers. It is available for&nbsp;<a href=\"https://www.geeksforgeeks.org/types-of-cloud/\">private cloud, public cloud, and hybrid cloud systems</a>&nbsp;with low cost, greater flexibility and scalability.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Cloud infrastructure components :</strong></p>\r\n\r\n<p>Different components of cloud infrastructure supports the computing requirements of a cloud computing model. Cloud infrastructure has number of key components but not limited to only server, software, network and storage devices. Still cloud infrastructure is categorized into three parts in general i.e.</p>\r\n\r\n<ol>\r\n	<li><strong>Computing</strong></li>\r\n	<li><strong>Networking</strong></li>\r\n	<li><strong>Storage</strong></li>\r\n</ol>\r\n\r\n<p>The most important point is that cloud infrastructure should have some basic infrastructural constraints like transparency, scalability, security and intelligent monitoring etc.</p>\r\n\r\n<p>The below figure&nbsp;<strong>represents components of cloud infrastructure</strong></p>\r\n\r\n<p><img src=\"https://media.geeksforgeeks.org/wp-content/uploads/20210318220041/infra2.png\" style=\"height:385px; width:634px\" /></p>\r\n\r\n<p>Components of Cloud Infrastructure</p>\r\n\r\n<p><strong>1. Hypervisor :</strong></p>\r\n\r\n<p>Hypervisor is a firmware or a low level program which is a key to enable virtualization. It is used to divide and allocate cloud resources between several customers. As it monitors and manages cloud services/resources that&rsquo;s why hypervisor is called as VMM (Virtual Machine Monitor) or (Virtual Machine Manager).</p>\r\n\r\n<p><strong>2. Management Software :</strong></p>\r\n\r\n<p>Management software helps in maintaining and configuring the infrastructure. Cloud management software monitors and optimizes resources, data, applications and services.&nbsp;</p>\r\n\r\n<p><strong>3. Deployment Software :</strong></p>\r\n\r\n<p><iframe frameborder=\"0\" height=\"1\" id=\"google_ads_iframe_/27823234/gfg_outstream_incontent_0\" name=\"\" scrolling=\"no\" src=\"https://553fd83ebe8b893551f74f7655595cce.safeframe.googlesyndication.com/safeframe/1-0-40/html/container.html\" title=\"3rd party ad content\" width=\"1\"></iframe></p>\r\n\r\n<p>Deployment software helps in deploying and integrating the application on the cloud. So, typically it helps in building a virtual computing environment.</p>\r\n\r\n<p><strong>4. Network :</strong></p>\r\n\r\n<p>It is one of the key component of cloud infrastructure which is responsible for connecting cloud services over the internet. For the transmission of data and resources externally and internally network is must required.</p>\r\n\r\n<p><strong>5. Server :</strong></p>\r\n\r\n<p>Server which represents the computing portion of the cloud infrastructure is responsible for managing and<strong>&nbsp;</strong>delivering cloud services for various services and partners, maintaining security etc.</p>\r\n\r\n<p><strong>6. Storage :</strong></p>\r\n\r\n<p>Storage represents the storage facility which is provided to different organizations for storing and managing data. It provides a facility of extracting another resource if one of the resource fails as it<strong>&nbsp;</strong>keeps many copies of storage.</p>\r\n\r\n<p>Along with this, virtualization is also considered as one of important component of cloud infrastructure. Because it abstracts the available data storage and computing power away from the actual hardware and the users interact with their cloud infrastructure through GUI (Graphical User Interface).</p>\r\n', 'Cloud Computing'),
(61, 'Cloud Management in Cloud Computing', '<p><strong>Cloud computing management</strong>&nbsp;is maintaining and controlling the cloud services and resources be it public, private or hybrid. Some of its aspects include load balancing, performance, storage, backups, capacity, deployment etc. To do so a cloud managing personnel needs full access to all the functionality of resources in the cloud. Different software products and technologies are combined to provide a cohesive cloud management strategy and process.</p>\r\n\r\n<p>As we know&nbsp;<a href=\"https://www.geeksforgeeks.org/features-components-of-private-cloud/\">Private cloud&nbsp;</a>infrastructure is operated only for a single organization, so that can be managed by the organization or by a third party. Public cloud services are delivered over a network that is open and available for public use. In this model, the IT infrastructure is owned by a private company and members of the public can purchase or lease data storage or computing capacity as needed. Hybrid cloud environments are a combination of public and private cloud services from different providers. Most organizations store data on private cloud servers for privacy concerns, while leveraging public cloud applications at a lower price point for less sensitive information. The combination of both the public and private cloud are known as Hybrid cloud servers.</p>\r\n\r\n<p><strong>Need of Cloud Management :</strong><br />\r\nCloud is nowadays preferred by huge organizations as their primary data storage. A small downtime or an error can cause a great deal of loss and inconvenience for the organizations. So as to design, handle and maintain a cloud computing service specific members are responsible who make sure things work out as supposed and all arising issues are addressed.</p>\r\n\r\n<p><iframe frameborder=\"0\" height=\"280\" id=\"google_ads_iframe_/27823234/GFG_InContent_Desktop_728x280_0\" name=\"google_ads_iframe_/27823234/GFG_InContent_Desktop_728x280_0\" scrolling=\"no\" title=\"3rd party ad content\" width=\"728\"></iframe></p>\r\n\r\n<p><strong>Cloud Management Platform :</strong><br />\r\nA cloud management platform is a software solution that has a robust and extensive set of APIs that allow it to pull data from every corner of the IT infrastructure. A CMP allows an IT organization to establish a structured approach to security and IT governance that can be implemented across the organization&rsquo;s entire cloud environment.</p>\r\n\r\n<p><strong>Cloud Management Tasks :</strong><br />\r\nThe below figure represents different cloud management tasks :</p>\r\n\r\n<p><img src=\"https://media.geeksforgeeks.org/wp-content/uploads/20210321220758/mng2.png\" /></p>\r\n\r\n<p>Cloud Management Tasks</p>\r\n\r\n<ul>\r\n	<li><strong>Auditing System Backups &ndash;</strong><br />\r\n	It is required to audit the backups from time to time to ensure restoration of randomly selected files of different users. This might be done by the organization or by the cloud provider.</li>\r\n	<li><strong>Flow of data in the system &ndash;</strong><br />\r\n	The managers are responsible for designing a data flow diagram that shows how the data is supposed to flow throughout the organization.</li>\r\n	<li><strong>Vendor Lock-In &ndash;</strong><br />\r\n	The managers should know how to move their data from a server to another in case the organization decides to switch providers.</li>\r\n	<li><strong>Knowing provider&rsquo;s security procedures &ndash;</strong><br />\r\n	The managers should know the security plans of the provider, especially Multitenant use, E-commerce processing, Employee screening and Encryption policy.</li>\r\n	<li><strong>Monitoring the Capacity, Planning and Scaling abilities &ndash;</strong><br />\r\n	The manager should know if their current cloud provider is going to meet their organization&rsquo;s demand in the future and also their scaling capabilities.</li>\r\n	<li><strong>Monitoring audit log &ndash;</strong><br />\r\n	In order to identify errors in the system, logs are audited by the managers on a regular basis.</li>\r\n	<li><strong>Solution Testing and Validation &ndash;</strong><br />\r\n	It is necessary to test the cloud services and verify the results and for error-free solutions.</li>\r\n</ul>\r\n', 'Cloud Computing'),
(62, 'Pros and cons of Virtualization in Cloud Computing', '<p><a href=\"https://www.geeksforgeeks.org/virtualization-cloud-computing-types/\">Virtualization</a>&nbsp;is the creation of Virtual Version of something such as server, desktop, storage device, operating system etc.</p>\r\n\r\n<p>Thus, Virtualization is a technique which allows us to share a single physical instance of a resource or an application among multiple customers and an organization. Virtualization often creates many virtual resources from one physical resource.</p>\r\n\r\n<ul>\r\n	<li>&nbsp;<strong>Host Machine &ndash;</strong><br />\r\n	The machine on which virtual machine is going to create is known as Host Machine.&nbsp;<br />\r\n	&nbsp;</li>\r\n	<li>&nbsp;<strong>Guest Machine &ndash;</strong>&nbsp;<br />\r\n	The virtual machines which are created on Host Machine is called Guest Machine.</li>\r\n</ul>\r\n\r\n<p><strong>Why Virtualization in Cloud Computing ?</strong><br />\r\nVirtualization is very important concept in cloud computing. In cloud computing, a cloud vendor who will provide cloud services have all physical resources like server, storage device, network device etc. and these physical services are rented by cloud vendors so that user&rsquo;s will not worry about these physical services.</p>\r\n\r\n<p><img src=\"https://media.geeksforgeeks.org/wp-content/uploads/20210302081129/cloudonecagain.png\" /></p>\r\n\r\n<p>But it is very costly to provide physical services per customer on rent because firstly it becomes very costly and also user&rsquo;s will not use the fully services. So this problem can be solved by Virtualization. It is very cool approach for not only efficient use of Physical services but also reduce costs of vendors. Thus cloud vendor&rsquo;s can vitalize their single big server and provide smaller spec server to multiple customer&rsquo;s&nbsp;</p>\r\n\r\n<p><strong>Pros of Virtualization in Cloud Computing : &nbsp;</strong></p>\r\n\r\n<ul>\r\n	<li><strong>Utilization of Hardware Efficiently &ndash;</strong><br />\r\n	With the help of Virtualization Hardware is Efficiently used by user as well as Cloud Service Provider. In this the need of Physical Hardware System for the User is decreases and this results in less costly.In Service Provider point of View, they will vitalize the Hardware using Hardware Virtualization which decrease the Hardware requirement from Vendor side which are provided to User is decreased. Before Virtualization, Companies and organizations have to set up their own Server which require extra space for placing them, engineer&rsquo;s to check its performance and require extra hardware cost but with the help of Virtualization the all these limitations are removed by Cloud vendor&rsquo;s who provide Physical Services without setting up any Physical Hardware system.</li>\r\n	<li><strong>Availability increases with Virtualization &ndash;</strong><br />\r\n	One of the main benefit of Virtualization is that it provides advance features which allow virtual instances to be available all the times. It also has capability to move virtual instance from one virtual Server another Server which is very tedious and risky task in Server Based System. During migration of Data from one server to another it ensures its safety. Also, we can access information from any location and any time from any device.</li>\r\n	<li><strong>Disaster Recovery is efficient and easy &ndash;</strong><br />\r\n	With the help of virtualization Data Recovery, Backup, Duplication becomes very easy. In traditional method , if somehow due to some disaster if Server system Damaged then the surety of Data Recovery is very less. But with the tools of Virtualization real time data backup recovery and mirroring become easy task and provide surety of zero percent data loss.</li>\r\n	<li><strong>Virtualization saves Energy &ndash;</strong><br />\r\n	Virtualization will help to save Energy because while moving from physical Servers to Virtual Server&rsquo;s, the number of Server&rsquo;s decreases due to this monthly power and cooling cost decreases which will Save Money as well. As cooling cost reduces it means carbon production by devices &nbsp;also decreases which results in Fresh and pollution free environment.</li>\r\n	<li><strong>Quick and Easy Set up &ndash;</strong><br />\r\n	In traditional methods Setting up physical system and servers are very time-consuming. Firstly Purchase them in bulk after that wait for shipment. When Shipment is done then wait for Setting up and after that again spend time in installing required software etc. Which will consume very time. But with the help of virtualization the entire process is done in very less time which results in productive setup.</li>\r\n	<li><strong>Cloud Migration becomes easy &ndash;</strong><br />\r\n	Most of the companies those who already have spent a lot in the server have a doubt of Shifting to Cloud. But it is more cost-effective to shift to cloud services because all the data that is present in their server&rsquo;s can be easily migrated into the cloud server and save something from maintenance charge, power consumption, cooling cost, cost to Server Maintenance Engineer etc.</li>\r\n</ul>\r\n\r\n<p><strong>Cons of Virtualization :</strong></p>\r\n\r\n<ul>\r\n	<li><strong>Data can be at Risk &ndash;</strong><br />\r\n	Working on virtual instances on shared resources means that our data is hosted on third party resource which put&rsquo;s our data in vulnerable condition. Any hacker can attack on our data or try to perform unauthorized access. Without Security solution our data is in threaten situation<strong>.</strong></li>\r\n	<li><strong>Learning New Infrastructure &ndash;</strong><br />\r\n	As Organization shifted from Servers to Cloud. They required skilled staff who can work with cloud easily. Either they hire new IT staff with relevant skill or provide training on that skill which increase the cost of company.</li>\r\n	<li><strong>High Initial Investment &ndash;</strong><br />\r\n	It is true that Virtualization will reduce the cost of companies but also it is truth that Cloud have high initial investment. It provides numerous services which are not required and when unskilled organization will try to set up in cloud they purchase unnecessary services which are not even required to them.</li>\r\n</ul>\r\n', 'Cloud Computing'),
(63, 'Types of Server Virtualization in Computer Network', '<p><strong>Server Virtualization</strong>&nbsp;is the partitioning of a physical server into a number of small virtual servers, each running its own operating system. These operating systems are known as guest operating systems. These are running on another operating system known as the host operating system. Each guest running in this manner is unaware of any other guests running on the same host. Different virtualization techniques are employed to achieve this transparency.&nbsp;</p>\r\n\r\n<p><strong>Types of Server virtualization :</strong>&nbsp;</p>\r\n\r\n<p><strong>1.&nbsp;</strong><a href=\"https://www.geeksforgeeks.org/hypervisor/\"><strong>Hypervisor</strong></a><strong>&nbsp;&ndash;</strong>&nbsp;</p>\r\n\r\n<p>A Hypervisor or VMM(virtual machine monitor) is a layer that exists between the operating system and hardware. It provides the necessary services and features for the smooth running of multiple operating systems.&nbsp;</p>\r\n\r\n<p><iframe frameborder=\"0\" height=\"280\" id=\"google_ads_iframe_/27823234/GFG_InContent_Desktop_728x280_0\" name=\"google_ads_iframe_/27823234/GFG_InContent_Desktop_728x280_0\" scrolling=\"no\" title=\"3rd party ad content\" width=\"728\"></iframe></p>\r\n\r\n<p>It identifies traps, responds to privileged CPU instructions, and handles queuing, dispatching, and returning the hardware requests. A host operating system also runs on top of the hypervisor to administer and manage the virtual machines.</p>\r\n\r\n<p><strong>2. Para Virtualization &ndash;</strong>&nbsp;</p>\r\n\r\n<p>It is based on Hypervisor. Much of the emulation and trapping overhead in software implemented virtualization is handled in this model. The guest operating system is modified and recompiled before installation into the virtual machine.&nbsp;<br />\r\nDue to the modification in the Guest operating system, performance is enhanced as the modified guest operating system communicates directly with the hypervisor and emulation overhead is removed.&nbsp;</p>\r\n\r\n<p>Example: Xen primarily uses Paravirtualization, where a customized Linux environment is used to support the administrative environment known as domain 0.&nbsp;</p>\r\n\r\n<p><img alt=\"\" src=\"https://media.geeksforgeeks.org/wp-content/uploads/VIRTUALIZATION.jpg\" /></p>\r\n\r\n<p><em><strong>Advantages:</strong></em>&nbsp;</p>\r\n\r\n<ul>\r\n	<li>Easier</li>\r\n	<li>Enhanced Performance</li>\r\n	<li>No emulation overhead</li>\r\n</ul>\r\n\r\n<p><em><strong>Limitations:</strong></em></p>\r\n\r\n<ul>\r\n	<li>Requires modification to a guest operating system</li>\r\n</ul>\r\n\r\n<p><strong>3. Full Virtualization &ndash;</strong>&nbsp;</p>\r\n\r\n<p>It is very much similar to Paravirtualization. It can emulate the underlying hardware when necessary. The hypervisor traps the machine operations used by the operating system to perform I/O or modify the system status. After trapping, these operations are emulated in software and the status codes are returned very much consistent with what the real hardware would deliver. This is why an unmodified operating system is able to run on top of the hypervisor.&nbsp;</p>\r\n\r\n<p>Example: VMWare ESX server uses this method. A customized Linux version known as Service Console is used as the administrative operating system. It is not as fast as Paravirtualization.&nbsp;<br />\r\n&nbsp;</p>\r\n\r\n<p><iframe frameborder=\"0\" height=\"1\" id=\"google_ads_iframe_/27823234/gfg_outstream_incontent_0\" name=\"\" scrolling=\"no\" src=\"https://59140ff8ec181a2cde081fe97919453f.safeframe.googlesyndication.com/safeframe/1-0-40/html/container.html\" title=\"3rd party ad content\" width=\"1\"></iframe></p>\r\n\r\n<p><img alt=\"\" src=\"https://media.geeksforgeeks.org/wp-content/uploads/full-virtualization.jpg\" /></p>\r\n\r\n<p><em><strong>Advantages:</strong></em>&nbsp;</p>\r\n\r\n<ul>\r\n	<li>No modification to the Guest operating system is required.</li>\r\n</ul>\r\n\r\n<p><em><strong>Limitations:</strong></em></p>\r\n\r\n<ul>\r\n	<li>Complex</li>\r\n	<li>Slower due to emulation</li>\r\n	<li>Installation of the new device driver is difficult.</li>\r\n</ul>\r\n\r\n<p><strong>4. Hardware-Assisted Virtualization &ndash;</strong>&nbsp;</p>\r\n\r\n<p>It is similar to Full Virtualization and Paravirtualization in terms of operation except that it requires hardware support. Much of the hypervisor overhead due to trapping and emulating I/O operations and status instructions executed within a guest OS is dealt with by relying on the hardware extensions of the x86 architecture.&nbsp;</p>\r\n\r\n<p>Unmodified OS can be run as the hardware support for virtualization would be used to handle hardware access requests, privileged and protected operations, and to communicate with the virtual machine.&nbsp;</p>\r\n\r\n<p>Examples: AMD &ndash; V Pacifica and Intel VT Vanderpool provide hardware support for virtualization.&nbsp;</p>\r\n\r\n<p><em><strong>Advantages:</strong></em>&nbsp;</p>\r\n\r\n<ul>\r\n	<li>No modification to a guest operating system is required.</li>\r\n	<li>Very less hypervisor overhead</li>\r\n</ul>\r\n\r\n<p><em><strong>Limitations:</strong></em></p>\r\n\r\n<ul>\r\n	<li>Hardware support Required</li>\r\n</ul>\r\n\r\n<p><strong>5. Kernel level Virtualization &ndash;</strong>&nbsp;</p>\r\n\r\n<p>Instead of using a hypervisor, it runs a separate version of the Linux kernel and sees the associated virtual machine as a user-space process on the physical host. This makes it easy to run multiple virtual machines on a single host. A device driver is used for communication between the main Linux kernel and the virtual machine.&nbsp;<br />\r\nProcessor support is required for virtualization ( Intel VT or AMD &ndash; v). A slightly modified QEMU process is used as the display and execution containers for the virtual machines. In many ways, kernel-level virtualization is a specialized form of server virtualization.&nbsp;</p>\r\n\r\n<p>Examples: User &ndash; Mode Linux( UML ) and Kernel Virtual Machine( KVM )&nbsp;</p>\r\n\r\n<p><img alt=\"\" src=\"https://media.geeksforgeeks.org/wp-content/uploads/kernel-virtualization.jpg\" /></p>\r\n\r\n<p><em><strong>Advantages:</strong></em>&nbsp;</p>\r\n\r\n<ul>\r\n	<li>No special administrative software is required.</li>\r\n	<li>Very less overhead</li>\r\n</ul>\r\n\r\n<p><em><strong>Limitations:</strong></em></p>\r\n\r\n<ul>\r\n	<li>Hardware Support Required</li>\r\n</ul>\r\n\r\n<p><strong>6. System Level or OS Virtualization &ndash;</strong>&nbsp;</p>\r\n\r\n<p>Runs multiple but logically distinct environments on a single instance of the operating system kernel. Also called shared kernel approach as all virtual machines share a common kernel of host operating system. Based on the change root concept &ldquo;chroot&rdquo;.&nbsp;<br />\r\nchroot starts during bootup. The kernel uses root filesystems to load drivers and perform other early-stage system initialization tasks. It then switches to another root filesystem using chroot command to mount an on-disk file system as its final root filesystem and continue system initialization and configuration within that file system.&nbsp;<br />\r\nThe chroot mechanism of system-level virtualization is an extension of this concept. It enables the system to start virtual servers with their own set of processes that execute relative to their own filesystem root directories.&nbsp;<br />\r\nThe main difference between system-level and server virtualization is whether different operating systems can be run on different virtual systems. If all virtual servers must share the same copy of the operating system it is system-level virtualization and if different servers can have different operating systems ( including different versions of a single operating system) it is server virtualization.&nbsp;</p>\r\n\r\n<p>Examples: FreeVPS, Linux Vserver, and OpenVZ are some examples.&nbsp;</p>\r\n\r\n<p><img alt=\"\" src=\"https://media.geeksforgeeks.org/wp-content/uploads/system-level-virtualization.jpg\" /></p>\r\n\r\n<p><em><strong>Advantages:&nbsp;</strong></em></p>\r\n\r\n<ul>\r\n	<li>Significantly lightweight than complete machines(including a kernel)</li>\r\n	<li>Can host many more virtual servers</li>\r\n	<li>Enhanced Security and isolation</li>\r\n	<li>Virtualizing an operating system usually has little to no overhead.</li>\r\n	<li>Live migration is possible with OS Virtualization.</li>\r\n	<li>It can also leverage dynamic container load balancing between nodes and clusters.</li>\r\n	<li>On OS virtualization, the file-level copy-on-write (CoW) method is possible, making it easier to back up data, more space-efficient, and easier to cache than block-level copy-on-write schemes.</li>\r\n</ul>\r\n', 'Cloud Computing');
INSERT INTO `courses` (`id`, `topic_name`, `description`, `course_name`) VALUES
(64, 'Python Tutorial | Python Programming Language', '<p>Python tutorial provides basic and advanced concepts of Python. Our Python tutorial is designed for beginners and professionals.</p>\r\n\r\n<p>Python is a simple, general purpose, high level, and object-oriented programming language.</p>\r\n\r\n<p>Python is an interpreted scripting language also.&nbsp;<em>Guido Van Rossum</em>&nbsp;is known as the founder of Python programming.</p>\r\n\r\n<p>Our Python tutorial includes all topics of Python Programming such as installation, control statements,&nbsp;<a href=\"https://www.javatpoint.com/python-strings\">Strings</a>,&nbsp;<a href=\"https://www.javatpoint.com/python-lists\">Lists</a>,&nbsp;<a href=\"https://www.javatpoint.com/python-tuples\">Tuples</a>,&nbsp;<a href=\"https://www.javatpoint.com/python-dictionary\">Dictionary</a>,&nbsp;<a href=\"https://www.javatpoint.com/python-modules\">Modules</a>,&nbsp;<a href=\"https://www.javatpoint.com/python-exception-handling\">Exceptions</a>, Date and Time, File I/O, Programs, etc. There are also given Python interview questions to help you better understand Python Programming.</p>\r\n\r\n<p>Backward Skip 10sPlay VideoForward Skip 10s</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><iframe height=\"225\" id=\"goog_106508097\" src=\"https://imasdk.googleapis.com/js/core/bridge3.572.0_en.html#goog_106508097\" width=\"400\"></iframe></p>\r\n\r\n<h2>What is Python</h2>\r\n\r\n<p><strong>Python</strong>&nbsp;is a general purpose, dynamic,&nbsp;<a href=\"https://www.javatpoint.com/classification-of-programming-languages\">high-level</a>, and interpreted programming language. It supports Object Oriented programming approach to develop applications. It is simple and easy to learn and provides lots of high-level data structures.</p>\r\n\r\n<p>Python is&nbsp;<em>easy to learn</em>&nbsp;yet powerful and versatile scripting language, which makes it attractive for Application Development.</p>\r\n\r\n<p>Python&#39;s syntax and&nbsp;<em>dynamic typing</em>&nbsp;with its interpreted nature make it an ideal language for scripting and rapid application development.</p>\r\n\r\n<p>Python supports&nbsp;<em>multiple programming pattern</em>, including object-oriented, imperative, and functional or procedural programming styles.</p>\r\n\r\n<p>Python is not intended to work in a particular area, such as web programming. That is why it is known as&nbsp;<em>multipurpose</em>&nbsp;programming language because it can be used with web, enterprise, 3D CAD, etc.</p>\r\n\r\n<p>We don&#39;t need to use data types to declare variable because it is&nbsp;<em>dynamically typed</em>&nbsp;so we can write a=10 to assign an integer value in an integer variable.</p>\r\n\r\n<p>Python makes the development and debugging&nbsp;<em>fast</em>&nbsp;because there is no compilation step included in Python development, and edit-test-debug cycle is very fast.</p>\r\n\r\n<h2>Python 2 vs. Python 3</h2>\r\n\r\n<p>In most of the programming languages, whenever a new version releases, it supports the features and syntax of the existing version of the language, therefore, it is easier for the projects to switch in the newer version. However, in the case of Python, the two versions Python 2 and Python 3 are very much different from each other.</p>\r\n\r\n<p>A list of differences between Python 2 and Python 3 are given below:</p>\r\n\r\n<ol>\r\n	<li>Python 2 uses&nbsp;<strong>print</strong>&nbsp;as a statement and used as print &quot;something&quot; to print some string on the console. On the other hand, Python 3 uses&nbsp;<strong>print</strong>&nbsp;as a function and used as print(&quot;something&quot;) to print something on the console.</li>\r\n	<li>Python 2 uses the function raw_input() to accept the user&#39;s input. It returns the string representing the value, which is typed by the user. To convert it into the integer, we need to use the int() function in Python. On the other hand, Python 3 uses input() function which automatically interpreted the type of input entered by the user. However, we can cast this value to any type by using primitive functions (int(), str(), etc.).</li>\r\n	<li>In Python 2, the implicit string type is ASCII, whereas, in Python 3, the implicit string type is Unicode.</li>\r\n	<li>Python 3 doesn&#39;t contain the xrange() function of Python 2. The xrange() is the variant of range() function which returns a xrange object that works similar to Java iterator. The range() returns a list for example the function range(0,3) contains 0, 1, 2.</li>\r\n	<li>There is also a small change made in Exception handling in Python 3. It defines a keyword&nbsp;<strong>as</strong>&nbsp;which is necessary to be used. We will discuss it in Exception handling section of Python programming tutorial.</li>\r\n</ol>\r\n\r\n<h2>Java vs Python Program</h2>\r\n\r\n<p>Unlike the other programming languages, Python provides the facility to execute the code using few lines.&nbsp;<strong>For example</strong>&nbsp;- Suppose we want to print the&nbsp;<strong>&quot;Hello World&quot;</strong>&nbsp;program in Java; it will take three lines to print it.</p>\r\n\r\n<h3>Java Program</h3>\r\n\r\n<ol start=\"1\">\r\n	<li>public&nbsp;class&nbsp;HelloWorld&nbsp;{&nbsp;&nbsp;</li>\r\n	<li>&nbsp;public&nbsp;static&nbsp;void&nbsp;main(String[]&nbsp;args){&nbsp;&nbsp;</li>\r\n	<li>//&nbsp;Prints&nbsp;&quot;Hello,&nbsp;World&quot;&nbsp;to&nbsp;the&nbsp;terminal&nbsp;window.&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;System.out.println(&quot;Hello&nbsp;World&quot;);&nbsp;&nbsp;</li>\r\n	<li>&nbsp;}&nbsp;&nbsp;</li>\r\n	<li>&nbsp;}&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<h3>Python Program</h3>\r\n\r\n<p>On the other hand, we can do this using one statement in Python.</p>\r\n\r\n<pre>\r\nprint(&quot;Hello World&quot;)\r\n</pre>\r\n\r\n<p>Both programs will print the same result, but it takes only one statement without using a semicolon or curly braces in Python.</p>\r\n\r\n<h2>Python Basic Syntax</h2>\r\n\r\n<p>There is no use of curly braces or semicolon in Python programming language. It is English-like language. But Python uses the indentation to define a block of code. Indentation is nothing but adding whitespace before the statement when it is needed.&nbsp;<strong>For example -</strong></p>\r\n\r\n<ol start=\"1\">\r\n	<li>def&nbsp;func():&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;statement&nbsp;1&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;statement&nbsp;2&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;statement&nbsp;N&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p>In the above example, the statements that are same level to right belong to the function. Generally, we can use four whitespaces to define indentation.</p>\r\n\r\n<h2>Python History</h2>\r\n\r\n<p>Python was invented by&nbsp;<strong>Guido van Rossum</strong>&nbsp;in 1991 at CWI in Netherland. The idea of Python programming language has taken from the ABC programming language or we can say that ABC is a predecessor of Python language.</p>\r\n\r\n<p>There is also a fact behind the choosing name Python. Guido van Rossum was a fan of the popular BBC comedy show of that time,&nbsp;<strong>&quot;Monty Python&#39;s Flying Circus&quot;</strong>. So he decided to pick the name&nbsp;<strong>Python</strong>&nbsp;for his newly created programming language.</p>\r\n\r\n<p>Python has the vast community across the world and releases its version within the short period.</p>\r\n\r\n<h2>Why learn Python?</h2>\r\n\r\n<p>Python provides many useful features to the programmer. These features make it most popular and widely used language. We have listed below few-essential feature of Python.</p>\r\n\r\n<ul>\r\n	<li>Easy to use and Learn</li>\r\n	<li>Expressive Language</li>\r\n	<li>Interpreted Language</li>\r\n	<li>Object-Oriented Language</li>\r\n	<li>Open Source Language</li>\r\n	<li>Extensible</li>\r\n	<li>Learn Standard Library</li>\r\n	<li>GUI Programming Support</li>\r\n	<li>Integrated</li>\r\n	<li>Embeddable</li>\r\n	<li>Dynamic Memory Allocation</li>\r\n	<li>Wide Range of Libraries and Frameworks</li>\r\n</ul>\r\n\r\n<p><iframe frameborder=\"0\" height=\"188\" id=\"google_ads_iframe_/103512698,22511567001/22903275080_0\" name=\"google_ads_iframe_/103512698,22511567001/22903275080_0\" scrolling=\"no\" title=\"3rd party ad content\" width=\"728\"></iframe></p>\r\n\r\n<h2>Where is Python used?</h2>\r\n\r\n<p>Python is a general-purpose, popular programming language and it is used in almost every technical field. The various areas of Python use are given below.</p>\r\n\r\n<ul>\r\n	<li>Data Science</li>\r\n	<li>Date Mining</li>\r\n	<li>Desktop Applications</li>\r\n	<li>Console-based Applications</li>\r\n	<li>Mobile Applications</li>\r\n	<li>Software Development</li>\r\n	<li>Artificial Intelligence</li>\r\n	<li>Web Applications</li>\r\n	<li>Enterprise Applications</li>\r\n	<li>3D CAD Applications</li>\r\n	<li>Machine Learning</li>\r\n	<li>Computer Vision or Image Processing Applications.</li>\r\n	<li>Speech Recognitions</li>\r\n</ul>\r\n\r\n<p><iframe frameborder=\"0\" height=\"188\" id=\"google_ads_iframe_/103512698,22511567001/22912473830_0\" name=\"google_ads_iframe_/103512698,22511567001/22912473830_0\" scrolling=\"no\" title=\"3rd party ad content\" width=\"728\"></iframe></p>\r\n\r\n<h2>Python Popular Frameworks and Libraries</h2>\r\n\r\n<p>Python has wide range of libraries and frameworks widely used in various fields such as machine learning, artificial intelligence, web applications, etc. We define some popular frameworks and libraries of Python as follows.</p>\r\n\r\n<ul>\r\n	<li><strong>Web development (Server-side) -</strong>&nbsp;Django Flask, Pyramid, CherryPy</li>\r\n	<li><strong>GUIs based applications -</strong>&nbsp;Tk, PyGTK, PyQt, PyJs, etc.</li>\r\n	<li><strong>Machine Learning -</strong>&nbsp;TensorFlow, PyTorch,&nbsp;<strong>Scikit-learn</strong>, Matplotlib, Scipy, etc.</li>\r\n	<li><strong>Mathematics -</strong>&nbsp;Numpy, Pandas, etc.</li>\r\n</ul>\r\n\r\n<h2>Python print() Function</h2>\r\n\r\n<p>The&nbsp;<strong>print()</strong>&nbsp;function displays the given object to the standard output device (screen) or to the text stream file.</p>\r\n\r\n<p>Unlike the other programming languages, Python&nbsp;<strong>print()</strong>&nbsp;function is most unique and versatile function.</p>\r\n\r\n<p>The syntax of&nbsp;<strong>print()</strong>&nbsp;function is given below.</p>\r\n\r\n<ol start=\"1\">\r\n	<li>print(*objects,&nbsp;sep=&#39;&nbsp;&#39;,&nbsp;end=&#39;\n&#39;,&nbsp;file=sys.stdout,&nbsp;flush=False)&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p>Let&#39;s explain its parameters one by one.</p>\r\n\r\n<ul>\r\n	<li><strong>objects -</strong>&nbsp;An object is nothing but a statement that to be printed. The * sign represents that there can be multiple statements.</li>\r\n	<li><strong>sep -</strong>&nbsp;The&nbsp;<strong>sep</strong>&nbsp;parameter separates the print values. Default values is &#39; &#39;.</li>\r\n	<li><strong>end -</strong>&nbsp;The&nbsp;<strong>end</strong>&nbsp;is printed at last in the statement.</li>\r\n	<li><strong>file -</strong>&nbsp;It must be an object with a write(string) method.</li>\r\n	<li><strong>flush -</strong>&nbsp;The stream or file is forcibly flushed if it is true. By default, its value is false.</li>\r\n</ul>\r\n\r\n<p>Let&#39;s understand the following example.</p>\r\n\r\n<h3>Example - 1: Return a value</h3>\r\n\r\n<ol start=\"1\">\r\n	<li>print(&quot;Welcome&nbsp;to&nbsp;javaTpoint.&quot;)&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;</li>\r\n	<li>a&nbsp;=&nbsp;10&nbsp;&nbsp;</li>\r\n	<li>#&nbsp;Two&nbsp;objects&nbsp;are&nbsp;passed&nbsp;in&nbsp;print()&nbsp;function&nbsp;&nbsp;</li>\r\n	<li>print(&quot;a&nbsp;=&quot;,&nbsp;a)&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;</li>\r\n	<li>b&nbsp;=&nbsp;a&nbsp;&nbsp;</li>\r\n	<li>#&nbsp;Three&nbsp;objects&nbsp;are&nbsp;passed&nbsp;in&nbsp;print&nbsp;function&nbsp;&nbsp;</li>\r\n	<li>print(&#39;a&nbsp;=&#39;,&nbsp;a,&nbsp;&#39;=&nbsp;b&#39;)&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p><strong>Output:</strong></p>\r\n\r\n<pre>\r\nWelcome to javaTpoint.\r\na = 10\r\na = 10 = b\r\n</pre>\r\n\r\n<p>As we can see in the above output, the multiple objects can be printed in the single&nbsp;<strong>print()</strong>&nbsp;statement. We just need to use comma (,) to separate with each other.</p>\r\n\r\n<h3>Example - 2: Using sep and end argument</h3>\r\n\r\n<ol start=\"1\">\r\n	<li>a&nbsp;=&nbsp;10&nbsp;&nbsp;</li>\r\n	<li>print(&quot;a&nbsp;=&quot;,&nbsp;a,&nbsp;sep=&#39;dddd&#39;,&nbsp;end=&#39;\n\n\n&#39;)&nbsp;&nbsp;</li>\r\n	<li>print(&quot;a&nbsp;=&quot;,&nbsp;a,&nbsp;sep=&#39;0&#39;,&nbsp;end=&#39;$$$$$&#39;)&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p><strong>Output:</strong></p>\r\n\r\n<pre>\r\na =dddd10\r\n\r\n\r\na =010$$$$$\r\n</pre>\r\n\r\n<p>In the first&nbsp;<strong>print()</strong>&nbsp;statement, we use the&nbsp;<strong>sep</strong>&nbsp;and&nbsp;<strong>end</strong>&nbsp;arguments. The given object is printed just after the&nbsp;<strong>sep</strong>&nbsp;values. The value of end parameter printed at the last of given object. As we can see that, the second&nbsp;<strong>print()</strong>&nbsp;function printed the result after the three black lines.</p>\r\n\r\n<h2>Taking Input to the User</h2>\r\n\r\n<p>Python provides the&nbsp;<strong>input()</strong>&nbsp;function which is used to take input from the user. Let&#39;s understand the following example.</p>\r\n\r\n<p><iframe frameborder=\"0\" height=\"188\" id=\"google_ads_iframe_/103512698,22511567001/22903138979_0\" name=\"google_ads_iframe_/103512698,22511567001/22903138979_0\" scrolling=\"no\" title=\"3rd party ad content\" width=\"728\"></iframe></p>\r\n\r\n<p><strong>Example -</strong></p>\r\n\r\n<ol start=\"1\">\r\n	<li>name&nbsp;=&nbsp;input(&quot;Enter&nbsp;a&nbsp;name&nbsp;of&nbsp;student:&quot;)&nbsp;&nbsp;</li>\r\n	<li>print(&quot;The&nbsp;student&nbsp;name&nbsp;is:&nbsp;&quot;,&nbsp;name)&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p><strong>Output:</strong></p>\r\n\r\n<pre>\r\nEnter a name of student: Devansh\r\nThe student name is:   Devansh\r\n</pre>\r\n\r\n<p>By default, the&nbsp;<strong>input()</strong>&nbsp;function takes the string input but what if we want to take other data types as an input.</p>\r\n\r\n<p>If we want to take input as an integer number, we need to typecast the&nbsp;<strong>input()</strong>&nbsp;function into an integer.</p>\r\n\r\n<p><strong>For example -</strong></p>\r\n\r\n<p><strong>Example -</strong></p>\r\n\r\n<ol start=\"1\">\r\n	<li>a&nbsp;&nbsp;=&nbsp;int(input(&quot;Enter&nbsp;first&nbsp;number:&nbsp;&quot;))&nbsp;&nbsp;</li>\r\n	<li>b&nbsp;=&nbsp;int(input(&quot;Enter&nbsp;second&nbsp;number:&nbsp;&quot;))&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;</li>\r\n	<li>print(a+b)&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p><strong>Output:</strong></p>\r\n\r\n<pre>\r\nEnter first number: 50\r\nEnter second number: 100\r\n150\r\n</pre>\r\n\r\n<p>We can take any type of values using&nbsp;<strong>input()</strong>&nbsp;function.</p>\r\n\r\n<h2>Python Operators</h2>\r\n\r\n<p>Operators are the symbols which perform various operations on Python objects. Python operators are the most essential to work with the Python data types. In addition, Python also provides identify membership and bitwise operators. We will learn all these operators with the suitable example in following tutorial.</p>\r\n\r\n<ul>\r\n	<li><strong>Python Operators</strong></li>\r\n</ul>\r\n\r\n<h2>Python Conditional Statements</h2>\r\n\r\n<p>Conditional statements help us to execute a particular block for a particular condition. In this tutorial, we will learn how to use the conditional expression to execute a different block of statements. Python provides if and else keywords to set up logical conditions. The elif keyword is also used as conditional statement.</p>\r\n\r\n<ul>\r\n	<li><strong>Python if..else statement</strong></li>\r\n</ul>\r\n\r\n<h2>Python Loops</h2>\r\n\r\n<p>Sometimes we may need to alter the flow of the program. The execution of a specific code may need to be repeated several numbers of times. For this purpose, the programming languages provide various types of loops capable of repeating some specific code several times. Consider the following tutorial to understand the statements in detail.</p>\r\n\r\n<ul>\r\n	<li><strong>Python Loops</strong></li>\r\n	<li><strong>Python For Loop</strong></li>\r\n	<li><strong>Python While Loop</strong></li>\r\n</ul>\r\n\r\n<h2>Python Data Structures</h2>\r\n\r\n<p>Data structures are referred which can hold some data together or we say that they are used to store the data in organized way. Python provides built-in data structures such as&nbsp;<strong>list, tuple, dictionary, and set</strong>. We can perform complex tasks using data structures.</p>\r\n\r\n<h3>Python List</h3>\r\n\r\n<p>Python list holds the ordered collection of items. We can store a sequence of items in a list. Python list is mutable which means it can be modified after its creation. The items of lists are enclosed within the square bracket [] and separated by the comma. Let&#39;s see the example of list.</p>\r\n\r\n<ol start=\"1\">\r\n	<li>L1&nbsp;=&nbsp;[&quot;John&quot;,&nbsp;102,&nbsp;&quot;USA&quot;]&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>L2&nbsp;=&nbsp;[1,&nbsp;2,&nbsp;3,&nbsp;4,&nbsp;5,&nbsp;6]&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p>If we try to print the type of L1, L2, and L3 using&nbsp;<strong>type()</strong>&nbsp;function then it will come out to be a list.</p>\r\n\r\n<ol start=\"1\">\r\n	<li>print(type(L1))&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>print(type(L2))&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p><strong>Output:</strong></p>\r\n\r\n<pre>\r\n&lt;class &#39;list&#39;&gt;\r\n&lt;class &#39;list&#39;&gt;\r\n</pre>\r\n\r\n<p>To learn more about list, visit the following tutorial.</p>\r\n\r\n<ul>\r\n	<li><strong>Python List</strong></li>\r\n	<li><strong>Python List Functions</strong></li>\r\n</ul>\r\n\r\n<h3>Python Tuple</h3>\r\n\r\n<p>Python Tuple is used to store the sequence of immutable Python objects. The tuple is similar to lists since the value of the items stored in the list can be changed, whereas the tuple is immutable, and the value of the items stored in the tuple cannot be changed.</p>\r\n\r\n<p>Tuple can be defined as follows</p>\r\n\r\n<p><strong>Example -</strong></p>\r\n\r\n<ol start=\"1\">\r\n	<li>tup&nbsp;=&nbsp;(&quot;Apple&quot;,&nbsp;&quot;Mango&quot;&nbsp;,&nbsp;&quot;Orange&quot;&nbsp;,&nbsp;&quot;Banana&quot;)&nbsp;&nbsp;</li>\r\n	<li>print(type(tup))&nbsp;&nbsp;</li>\r\n	<li>print(tup)&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p><strong>Output:</strong></p>\r\n\r\n<pre>\r\n&lt;class &#39;tuple&#39;&gt;\r\n(&#39;Apple&#39;, &#39;Mango&#39;, &#39;Orange&#39;, &#39;Banana&#39;)\r\n</pre>\r\n\r\n<p>If we try to add new to the tuple, it will throw an error.</p>\r\n\r\n<p><strong>Example -</strong></p>\r\n\r\n<ol start=\"1\">\r\n	<li>tup&nbsp;=&nbsp;(&quot;Apple&quot;,&nbsp;&quot;Mango&quot;&nbsp;,&nbsp;&quot;Orange&quot;&nbsp;,&nbsp;&quot;Banana&quot;)&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;</li>\r\n	<li>tup[2]&nbsp;=&nbsp;&quot;Papaya&quot;&nbsp;&nbsp;</li>\r\n	<li>print(tup)&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p><strong>Output:</strong></p>\r\n\r\n<pre>\r\nTraceback (most recent call last):\r\n  File &quot;C:/Users/DEVANSH SHARMA/PycharmProjects/Hello/gamewithturtle.py&quot;, line 3, in \r\n    tup[2] = &quot;Papaya&quot;\r\nTypeError: &#39;tuple&#39; object does not support item assignment\r\n</pre>\r\n\r\n<p>The above program throws an error because tuples are immutable type. To learn more about tuple, visit the Python Tuples.</p>\r\n\r\n<ul>\r\n	<li><strong>Python Tuple</strong></li>\r\n</ul>\r\n\r\n<h3>Python String</h3>\r\n\r\n<p>Python string is a sequence of characters. It is a collection of the characters surrounded by single quotes, double quotes, or triple quotes. It can also define as collection of the Unicode characters. We can create a string as follows.</p>\r\n\r\n<p><strong>Example -</strong></p>\r\n\r\n<ol start=\"1\">\r\n	<li>#&nbsp;Creating&nbsp;string&nbsp;using&nbsp;double&nbsp;quotes&nbsp;&nbsp;</li>\r\n	<li>str1&nbsp;=&nbsp;&quot;Hi&nbsp;Python&quot;&nbsp;&nbsp;</li>\r\n	<li>print(str1)&nbsp;&nbsp;</li>\r\n	<li>#&nbsp;Creating&nbsp;string&nbsp;using&nbsp;single&nbsp;quotes&nbsp;&nbsp;</li>\r\n	<li>str1&nbsp;=&nbsp;&#39;Hi&nbsp;Python&#39;&nbsp;&nbsp;</li>\r\n	<li>print(str1)&nbsp;&nbsp;</li>\r\n	<li>#&nbsp;Creating&nbsp;string&nbsp;using&nbsp;triple&nbsp;quotes&nbsp;&nbsp;</li>\r\n	<li>str1&nbsp;=&nbsp;&#39;&#39;&#39;Hi&nbsp;Python&#39;&#39;&#39;&nbsp;&nbsp;</li>\r\n	<li>print(str1)&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p><strong>Output:</strong></p>\r\n\r\n<pre>\r\nHi Python\r\nHi Python\r\nHi Python\r\n</pre>\r\n\r\n<p>Python doesn&#39;t support the character data-type. A single character written as &#39;p&#39; is treated as a string of length 1.</p>\r\n\r\n<p>Stings are also immutable. We can&#39;t change after it is declared. To learn more about the string, visit the following tutorial.</p>\r\n\r\n<ul>\r\n	<li><strong>Python Strings</strong></li>\r\n	<li><strong>Python String Method</strong></li>\r\n</ul>\r\n\r\n<h3>Dictionaries</h3>\r\n\r\n<p>Python Dictionary is a most efficient data structure and used to store the large amount of data. It stores the data in the key-value pair format. Each value is stored corresponding to its key.</p>\r\n\r\n<p>Keys must be a unique and value can be any type such as integer, list, tuple, etc.</p>\r\n\r\n<p>It is a mutable type; we can reassign after its creation. Below is the example of creating dictionary in Python.</p>\r\n\r\n<p><strong>Example -</strong></p>\r\n\r\n<ol start=\"1\">\r\n	<li>employee&nbsp;=&nbsp;{&quot;Name&quot;:&nbsp;&quot;John&quot;,&nbsp;&quot;Age&quot;:&nbsp;29,&nbsp;&quot;salary&quot;:250000,&quot;Company&quot;:&quot;GOOGLE&quot;}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>print(type(employee))&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>print(&quot;printing&nbsp;Employee&nbsp;data&nbsp;....&nbsp;&quot;)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>print(employee)&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p><strong>Output:</strong></p>\r\n\r\n<pre>\r\n&lt;class &#39;dict&#39;&gt;\r\nPrinting Employee data .... \r\n{&#39;Name&#39;: &#39;John&#39;, &#39;Age&#39;: 29, &#39;salary&#39;: 250000, &#39;Company&#39;: &#39;GOOGLE&#39;}\r\n</pre>\r\n\r\n<p>The empty curly braces {} are used to create empty dictionary. To learn more, visit the complete tutorial of the dictionary.</p>\r\n\r\n<ul>\r\n	<li><strong>Python Dictionary</strong></li>\r\n	<li><strong>Python Dictionary Methods</strong></li>\r\n</ul>\r\n\r\n<h3>Python Sets</h3>\r\n\r\n<p>A Python set is a collection of unordered elements. Each element in set must be unique and immutable. Sets are mutable which means we can modify anytime throughout the program. Let&#39;s understand the example of creating set in Python.</p>\r\n\r\n<p><strong>Example -</strong></p>\r\n\r\n<ol start=\"1\">\r\n	<li>#&nbsp;Creating&nbsp;Set&nbsp;&nbsp;</li>\r\n	<li>Month&nbsp;=&nbsp;{&quot;January&quot;,&nbsp;&quot;February&quot;,&nbsp;&quot;March&quot;,&nbsp;&quot;April&quot;,&nbsp;&quot;May&quot;,&nbsp;&quot;June&quot;,&nbsp;&quot;July&quot;}&nbsp;&nbsp;</li>\r\n	<li>print(Month)&nbsp;&nbsp;</li>\r\n	<li>print(type(Month))&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p><strong>Output:</strong></p>\r\n\r\n<pre>\r\n{&#39;March&#39;, &#39;July&#39;, &#39;April&#39;, &#39;May&#39;, &#39;June&#39;, &#39;February&#39;, &#39;January&#39;}\r\n&lt;class &#39;set&#39;&gt;\r\n</pre>\r\n\r\n<p>To get the more information about sets, visit the following resources.</p>\r\n\r\n<ul>\r\n	<li><strong>Python Sets</strong></li>\r\n	<li><strong>Python Set Methods</strong></li>\r\n</ul>\r\n\r\n<h2>Python Functional Programming</h2>\r\n\r\n<p>This section of Python tutorial defines some important tools related to functional programming such as&nbsp;<strong>lambda and recursive functions</strong>. These functions are very efficient in accomplishing the complex tasks. We define a few important functions, such as&nbsp;<strong>reduce, map,</strong>&nbsp;and&nbsp;<strong>filter.</strong>&nbsp;Python provides the&nbsp;<strong>functools</strong>&nbsp;module that includes various&nbsp;<strong>functional programming tools</strong>. Visit the following tutorial to learn more about functional programming.</p>\r\n\r\n<ul>\r\n	<li>Python Function</li>\r\n	<li>Python map() Function</li>\r\n	<li>Python filter() Function</li>\r\n	<li>Python reduce() Function</li>\r\n	<li>Python functool Module</li>\r\n	<li>Python Lambda Function</li>\r\n</ul>\r\n\r\n<h2>Python File I/O</h2>\r\n\r\n<p>Files are used to store data in a computer disk. In this tutorial, we explain the built-in file object of Python. We can open a file using Python script and perform various operations such as writing, reading, and appending. There are various ways of opening a file. We are explained with the relevant example. We will also learn to perform read/write operations on binary files.</p>\r\n\r\n<ul>\r\n	<li><strong>Python File I/O</strong></li>\r\n</ul>\r\n\r\n<h2>Python Modules</h2>\r\n\r\n<p>Python modules are the program files that contain a Python code or functions. There are two types of module in the Python - User-define modules and built-in modules. A module that the user defines, or we can say that our Python code saved with&nbsp;<strong>.py</strong>&nbsp;extension, is treated as a user-define module.</p>\r\n\r\n<p>Built-in modules are predefined modules of Python. To use the functionality of the modules, we need to import them into our current working program.</p>\r\n\r\n<ul>\r\n	<li><strong>Python Modules</strong></li>\r\n</ul>\r\n\r\n<h2>Python Exceptions</h2>\r\n\r\n<p>An exception can be defined as an unusual condition in a program resulting in the interruption in the flow of the program.</p>\r\n\r\n<p>Whenever an exception occurs, the program stops the execution, and thus the further code is not executed. Therefore, an exception is the run-time errors that are unable to handle to Python script. An exception is a Python object that represents an error.</p>\r\n\r\n<ul>\r\n	<li><strong>Python Exceptions</strong></li>\r\n</ul>\r\n\r\n<h2>Python CSV</h2>\r\n\r\n<p>A&nbsp;<strong>csv</strong>&nbsp;stands for &quot;comma separated values&quot;, which is defined as a simple file format that uses specific structuring to arrange tabular data. It stores tabular data such as spreadsheet or database in plain text and has a common format for data interchange. A&nbsp;<strong>csv</strong>&nbsp;file opens into the excel sheet, and the rows and columns data define the standard format. Visit the following tutorial to learn the CSV module in detail.</p>\r\n\r\n<ul>\r\n	<li><strong>Python Read CSV File</strong></li>\r\n	<li><strong>Python Write CSV File</strong></li>\r\n</ul>\r\n\r\n<h2>Python Sending Mail</h2>\r\n\r\n<p>We can send or read a mail using the Python script. Python&#39;s standard library modules are useful for handling various protocols such as PoP3 and IMAP. We will learn how to send a mail with the popular email service SMTP from a Python script.</p>\r\n\r\n<ul>\r\n	<li><strong>Python Sending Emails</strong></li>\r\n</ul>\r\n\r\n<h2>Python Magic Methods</h2>\r\n\r\n<p>Python magic method is defined as the special method which adds &quot;magic&quot; to a class. It starts and ends with double underscores, for example,&nbsp;<strong>_init_</strong>&nbsp;or&nbsp;<strong>_str_.</strong></p>\r\n\r\n<p>The built-in classes define many magic methods. The&nbsp;<strong>dir()</strong>&nbsp;function can be used to see the number of magic methods inherited by a class. It has two prefixes and suffix underscores in the method name.</p>\r\n\r\n<ul>\r\n	<li><strong>Python Magic Methods</strong></li>\r\n</ul>\r\n\r\n<h2>Python Oops Concepts</h2>\r\n\r\n<p>Everything in Python is treated as an object including integer values, floats, functions, classes, and none. Apart from that, Python supports all oriented concepts. Below is the brief introduction of oops concepts of Python.</p>\r\n\r\n<ul>\r\n	<li><strong>Classes and Objects -</strong>&nbsp;Python classes are the blueprint of the object. An object is a collection of data and method that act on the data.</li>\r\n	<li><strong>Inheritance -</strong>&nbsp;An inheritance is a technique where one class inherits the properties of other classes.</li>\r\n	<li><strong>Constructor -</strong>&nbsp;Python provides a special method&nbsp;<strong>__init__()</strong>&nbsp;which is known as a constructor. This method is automatically called when an object is instantiated.</li>\r\n	<li><strong>Data Member -</strong>&nbsp;A variable that holds data associated with a class and its objects.</li>\r\n</ul>\r\n\r\n<p>To read the oops concept in detail, visit the following resources.</p>\r\n\r\n<ul>\r\n	<li><strong>Python Oops Concepts</strong></li>\r\n	<li><strong>Python Object and classes</strong></li>\r\n	<li><strong>Python Constructor</strong></li>\r\n	<li><strong>Python Inheritance</strong></li>\r\n	<li><strong>Python Polymorphism</strong></li>\r\n</ul>\r\n\r\n<h2>Python Advance Topics</h2>\r\n\r\n<p>Python includes many advance and useful concepts that help the programmer to solve the complex tasks. These concepts are given below.</p>\r\n\r\n<h3>Python Iterator</h3>\r\n\r\n<p>An iterator is simply an object that can be iterated upon. It returns one object at a time. It can be implemented using the two special methods,&nbsp;<strong>__iter__() and __next__()</strong>.</p>\r\n\r\n<p>To learn more about the iterators visit our&nbsp;<strong>Python Iterators</strong>&nbsp;tutorial.</p>\r\n\r\n<h3>Python Generators</h3>\r\n\r\n<p>The Generators are an easiest way of creating Iterators. To learn more about, visit our&nbsp;<strong>Python Generators</strong>&nbsp;tutorial.</p>\r\n\r\n<h3>Python Decorators</h3>\r\n\r\n<p>These are used to modify the behavior of the function. Decorators provide the flexibility to wrap another function to expand the working of wrapped function, without permanently modifying it.</p>\r\n', 'PYTHON'),
(65, 'Python Applications', '<h1>Python Applications</h1>\r\n\r\n<p>Python is known for its general-purpose nature that makes it applicable in almost every domain of software development. Python makes its presence in every emerging field. It is the fastest-growing programming language and can develop any application.</p>\r\n\r\n<p>Here, we are specifying application areas where Python can be applied.</p>\r\n\r\n<p><img alt=\"Python Applications\" src=\"https://static.javatpoint.com/python/images/python-applications.png\" /></p>\r\n\r\n<h3>1) Web Applications</h3>\r\n\r\n<p>We can use Python to develop web applications. It provides libraries to handle internet protocols such as HTML and XML, JSON, Email processing, request, beautifulSoup, Feedparser, etc. One of Python web-framework named Django is used on&nbsp;<strong>Instagram</strong>. Python provides many useful frameworks, and these are given below:</p>\r\n\r\n<ul>\r\n	<li>Django and Pyramid framework(Use for heavy applications)</li>\r\n	<li>Flask and Bottle (Micro-framework)</li>\r\n	<li>Plone and Django CMS (Advance Content management)</li>\r\n</ul>\r\n\r\n<h3>2) Desktop GUI Applications</h3>\r\n\r\n<p>The GUI stands for the Graphical User Interface, which provides a smooth interaction to any application. Python provides a&nbsp;<strong>Tk GUI library</strong>&nbsp;to develop a user interface. Some popular GUI libraries are given below.</p>\r\n\r\n<p>PauseNext</p>\r\n\r\n<p>Unmute</p>\r\n\r\n<p>Current Time&Acirc;&nbsp;0:35</p>\r\n\r\n<p>/</p>\r\n\r\n<p>Duration&Acirc;&nbsp;18:10</p>\r\n\r\n<p>Loaded:&nbsp;8.81%</p>\r\n\r\n<p>&Acirc;&nbsp;</p>\r\n\r\n<p>Fullscreen</p>\r\n\r\n<ul>\r\n	<li>Tkinter or Tk</li>\r\n	<li>wxWidgetM</li>\r\n	<li>Kivy (used for writing multitouch applications )</li>\r\n	<li>PyQt or Pyside</li>\r\n</ul>\r\n\r\n<h3>3) Console-based Application</h3>\r\n\r\n<p>Console-based applications run from the command-line or shell. These applications are computer program which are used commands to execute. This kind of application was more popular in the old generation of computers. Python can develop this kind of application very effectively. It is famous for having REPL, which means&nbsp;<strong>the Read-Eval-Print Loop</strong>&nbsp;that makes it the most suitable language for the command-line applications.</p>\r\n\r\n<p>Python provides many free library or module which helps to build the command-line apps. The necessary&nbsp;<strong>IO</strong>&nbsp;libraries are used to read and write. It helps to parse argument and create console help text out-of-the-box. There are also advance libraries that can develop independent console apps.</p>\r\n\r\n<h3>4) Software Development</h3>\r\n\r\n<p>Python is useful for the software development process. It works as a support language and can be used to build control and management, testing, etc.</p>\r\n\r\n<ul>\r\n	<li><strong>SCons</strong>&nbsp;is used to build control.</li>\r\n	<li><strong>Buildbot</strong>&nbsp;and&nbsp;<strong>Apache</strong>&nbsp;Gumps are used for automated continuous compilation and testing.</li>\r\n	<li><strong>Round</strong>&nbsp;or&nbsp;<strong>Trac</strong>&nbsp;for bug tracking and project management.</li>\r\n</ul>\r\n\r\n<h3>5) Scientific and Numeric</h3>\r\n\r\n<p>This is the era of Artificial intelligence where the machine can perform the task the same as the human. Python language is the most suitable language for Artificial intelligence or machine learning. It consists of many scientific and mathematical libraries, which makes easy to solve complex calculations.</p>\r\n\r\n<p>Implementing machine learning algorithms require complex mathematical calculation. Python has many libraries for scientific and numeric such as Numpy, Pandas, Scipy, Scikit-learn, etc. If you have some basic knowledge of Python, you need to import libraries on the top of the code. Few popular frameworks of machine libraries are given below.</p>\r\n\r\n<ul>\r\n	<li>SciPy</li>\r\n	<li>Scikit-learn</li>\r\n	<li>NumPy</li>\r\n	<li>Pandas</li>\r\n	<li>Matplotlib</li>\r\n</ul>\r\n\r\n<h3>6) Business Applications</h3>\r\n\r\n<p>Business Applications differ from standard applications. E-commerce and ERP are an example of a business application. This kind of application requires extensively, scalability and readability, and Python provides all these features.</p>\r\n\r\n<p>Oddo is an example of the all-in-one Python-based application which offers a range of business applications. Python provides a&nbsp;<strong>Tryton</strong>&nbsp;platform which is used to develop the business application.</p>\r\n\r\n<h3>7) Audio or Video-based Applications</h3>\r\n\r\n<p>Python is flexible to perform multiple tasks and can be used to create multimedia applications. Some multimedia applications which are made by using Python are&nbsp;<strong>TimPlayer, cplay,</strong>&nbsp;etc. The few multimedia libraries are given below.</p>\r\n\r\n<ul>\r\n	<li>Gstreamer</li>\r\n	<li>Pyglet</li>\r\n	<li>QT Phonon</li>\r\n</ul>\r\n\r\n<h3>8) 3D CAD Applications</h3>\r\n\r\n<p>The CAD (Computer-aided design) is used to design engineering related architecture. It is used to develop the 3D representation of a part of a system. Python can create a 3D CAD application by using the following functionalities.</p>\r\n\r\n<ul>\r\n	<li>Fandango (Popular )</li>\r\n	<li>CAMVOX</li>\r\n	<li>HeeksCNC</li>\r\n	<li>AnyCAD</li>\r\n	<li>RCAM</li>\r\n</ul>\r\n\r\n<h3>9) Enterprise Applications</h3>\r\n\r\n<p>Python can be used to create applications that can be used within an Enterprise or an Organization. Some real-time applications are OpenERP, Tryton, Picalo, etc.</p>\r\n\r\n<h3>10) Image Processing Application</h3>\r\n\r\n<p>Python contains many libraries that are used to work with the image. The image can be manipulated according to our requirements. Some libraries of image processing are given below.</p>\r\n\r\n<ul>\r\n	<li>OpenCV</li>\r\n	<li>Pillow</li>\r\n	<li>SimpleITK</li>\r\n</ul>\r\n\r\n<p>In this topic, we have described all types of applications where Python plays an essential role in the development of these applications. In the next tutorial, we will learn more concepts about Python.</p>\r\n', 'PYTHON');
INSERT INTO `courses` (`id`, `topic_name`, `description`, `course_name`) VALUES
(66, 'Python Variables', '<p>Variable is a name that is used to refer to memory location. Python variable is also known as an identifier and used to hold value.</p>\r\n\r\n<p>In Python, we don&#39;t need to specify the type of variable because Python is a infer language and smart enough to get variable type.</p>\r\n\r\n<p>Variable names can be a group of both the letters and digits, but they have to begin with a letter or an underscore.</p>\r\n\r\n<p>It is recommended to use lowercase letters for the variable name. Rahul and rahul both are two different variables.</p>\r\n\r\n<p>PlayNext</p>\r\n\r\n<p>Unmute</p>\r\n\r\n<p>Current Time&Acirc;&nbsp;0:00</p>\r\n\r\n<p>/</p>\r\n\r\n<p>Duration&Acirc;&nbsp;18:10</p>\r\n\r\n<p>Loaded:&nbsp;0.37%</p>\r\n\r\n<p>&Acirc;&nbsp;</p>\r\n\r\n<p>Fullscreen</p>\r\n\r\n<p>Backward Skip 10sPlay VideoForward Skip 10s</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h2>Identifier Naming</h2>\r\n\r\n<p>Variables are the example of identifiers. An Identifier is used to identify the literals used in the program. The rules to name an identifier are given below.</p>\r\n\r\n<ul>\r\n	<li>The first character of the variable must be an alphabet or underscore ( _ ).</li>\r\n	<li>All the characters except the first character may be an alphabet of lower-case(a-z), upper-case (A-Z), underscore, or digit (0-9).</li>\r\n	<li>Identifier name must not contain any white-space, or special character (!, @, #, %, ^, &amp;, *).</li>\r\n	<li>Identifier name must not be similar to any keyword defined in the language.</li>\r\n	<li>Identifier names are case sensitive; for example, my name, and MyName is not the same.</li>\r\n	<li>Examples of valid identifiers: a123, _n, n_9, etc.</li>\r\n	<li>Examples of invalid identifiers: 1a, n%4, n 9, etc.</li>\r\n</ul>\r\n\r\n<h2>Declaring Variable and Assigning Values</h2>\r\n\r\n<p>Python does not bind us to declare a variable before using it in the application. It allows us to create a variable at the required time.</p>\r\n\r\n<p>We don&#39;t need to declare explicitly variable in Python. When we assign any value to the variable, that variable is declared automatically.</p>\r\n\r\n<p>The equal (=) operator is used to assign value to a variable.</p>\r\n\r\n<h2>Object References</h2>\r\n\r\n<p>It is necessary to understand how the Python interpreter works when we declare a variable. The process of treating variables is somewhat different from many other programming languages.</p>\r\n\r\n<p>Python is the highly object-oriented programming language; that&#39;s why every data item belongs to a specific type of class. Consider the following example.</p>\r\n\r\n<ol start=\"1\">\r\n	<li>print(&quot;John&quot;)&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p><strong>Output:</strong></p>\r\n\r\n<pre>\r\nJohn\r\n</pre>\r\n\r\n<p>The Python object creates an integer object and displays it to the console. In the above print statement, we have created a string object. Let&#39;s check the type of it using the Python built-in&nbsp;<strong>type()</strong>&nbsp;function.</p>\r\n\r\n<ol start=\"1\">\r\n	<li>type(&quot;John&quot;)&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p><strong>Output:</strong></p>\r\n\r\n<pre>\r\n&lt;class &#39;str&#39;&gt;\r\n</pre>\r\n\r\n<p>In Python, variables are a symbolic name that is a reference or pointer to an object. The variables are used to denote objects by that name.</p>\r\n\r\n<p>Let&#39;s understand the following example</p>\r\n\r\n<ol start=\"1\">\r\n	<li>a&nbsp;=&nbsp;50&nbsp;&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p><br />\r\n<img alt=\"Python Variables\" src=\"https://static.javatpoint.com/python/images/python-variables.png\" /></p>\r\n\r\n<p>In the above image, the variable&nbsp;<strong>a</strong>&nbsp;refers to an integer object.</p>\r\n\r\n<p>Suppose we assign the integer value 50 to a new variable b.</p>\r\n\r\n<p>a = 50</p>\r\n\r\n<p>b = a</p>\r\n\r\n<p><br />\r\n<img alt=\"Python Variables\" src=\"https://static.javatpoint.com/python/images/python-variables2.png\" /></p>\r\n\r\n<p>The variable b refers to the same object that a points to because Python does not create another object.</p>\r\n\r\n<p>Let&#39;s assign the new value to b. Now both variables will refer to the different objects.</p>\r\n\r\n<p>a = 50</p>\r\n\r\n<p>b =100</p>\r\n\r\n<p><br />\r\n<img alt=\"Python Variables\" src=\"https://static.javatpoint.com/python/images/python-variables3.png\" /></p>\r\n\r\n<p>Python manages memory efficiently if we assign the same variable to two different values.</p>\r\n\r\n<h2>Object Identity</h2>\r\n\r\n<p>In Python, every created object identifies uniquely in Python. Python provides the guaranteed that no two objects will have the same identifier. The built-in&nbsp;<strong>id()</strong>&nbsp;function, is used to identify the object identifier. Consider the following example.</p>\r\n\r\n<ol start=\"1\">\r\n	<li>a&nbsp;=&nbsp;50&nbsp;&nbsp;</li>\r\n	<li>b&nbsp;=&nbsp;a&nbsp;&nbsp;</li>\r\n	<li>print(id(a))&nbsp;&nbsp;</li>\r\n	<li>print(id(b))&nbsp;&nbsp;</li>\r\n	<li>#&nbsp;Reassigned&nbsp;variable&nbsp;a&nbsp;&nbsp;</li>\r\n	<li>a&nbsp;=&nbsp;500&nbsp;&nbsp;</li>\r\n	<li>print(id(a))&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p><strong>Output:</strong></p>\r\n\r\n<pre>\r\n140734982691168\r\n140734982691168\r\n2822056960944\r\n</pre>\r\n\r\n<p>We assigned the&nbsp;<strong>b = a, a</strong>&nbsp;and&nbsp;<strong>b</strong>&nbsp;both point to the same object. When we checked by the&nbsp;<strong>id()</strong>&nbsp;function it returned the same number. We reassign&nbsp;<strong>a</strong>&nbsp;to 500; then it referred to the new object identifier.</p>\r\n\r\n<h2>Variable Names</h2>\r\n\r\n<p>We have already discussed how to declare the valid variable. Variable names can be any length can have uppercase, lowercase (A to Z, a to z), the digit (0-9), and underscore character(_). Consider the following example of valid variables names.</p>\r\n\r\n<ol start=\"1\">\r\n	<li>name&nbsp;=&nbsp;&quot;Devansh&quot;&nbsp;&nbsp;</li>\r\n	<li>age&nbsp;=&nbsp;20&nbsp;&nbsp;</li>\r\n	<li>marks&nbsp;=&nbsp;80.50&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;</li>\r\n	<li>print(name)&nbsp;&nbsp;</li>\r\n	<li>print(age)&nbsp;&nbsp;</li>\r\n	<li>print(marks)&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p><strong>Output:</strong></p>\r\n\r\n<pre>\r\nDevansh\r\n20\r\n80.5\r\n</pre>\r\n\r\n<p>Consider the following valid variables name.</p>\r\n\r\n<ol start=\"1\">\r\n	<li>name&nbsp;=&nbsp;&quot;A&quot;&nbsp;&nbsp;</li>\r\n	<li>Name&nbsp;=&nbsp;&quot;B&quot;&nbsp;&nbsp;</li>\r\n	<li>naMe&nbsp;=&nbsp;&quot;C&quot;&nbsp;&nbsp;</li>\r\n	<li>NAME&nbsp;=&nbsp;&quot;D&quot;&nbsp;&nbsp;</li>\r\n	<li>n_a_m_e&nbsp;=&nbsp;&quot;E&quot;&nbsp;&nbsp;</li>\r\n	<li>_name&nbsp;=&nbsp;&quot;F&quot;&nbsp;&nbsp;</li>\r\n	<li>name_&nbsp;=&nbsp;&quot;G&quot;&nbsp;&nbsp;</li>\r\n	<li>_name_&nbsp;=&nbsp;&quot;H&quot;&nbsp;&nbsp;</li>\r\n	<li>na56me&nbsp;=&nbsp;&quot;I&quot;&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;</li>\r\n	<li>print(name,Name,naMe,NAME,n_a_m_e,&nbsp;NAME,&nbsp;n_a_m_e,&nbsp;_name,&nbsp;name_,_name,&nbsp;na56me)&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p><strong>Output:</strong></p>\r\n\r\n<pre>\r\nA B C D E D E F G F I\r\n</pre>\r\n\r\n<p>In the above example, we have declared a few valid variable names such as name, _name_ , etc. But it is not recommended because when we try to read code, it may create confusion. The variable name should be descriptive to make code more readable.</p>\r\n\r\n<p>The multi-word keywords can be created by the following method.</p>\r\n\r\n<ul>\r\n	<li><strong>Camel Case -</strong>&nbsp;In the camel case, each word or abbreviation in the middle of begins with a capital letter. There is no intervention of whitespace. For example - nameOfStudent, valueOfVaraible, etc.</li>\r\n	<li><strong>Pascal Case -</strong>&nbsp;It is the same as the Camel Case, but here the first word is also capital. For example - NameOfStudent, etc.</li>\r\n	<li><strong>Snake Case -</strong>&nbsp;In the snake case, Words are separated by the underscore. For example - name_of_student, etc.</li>\r\n</ul>\r\n\r\n<h2>Multiple Assignment</h2>\r\n\r\n<p>Python allows us to assign a value to multiple variables in a single statement, which is also known as multiple assignments.</p>\r\n\r\n<p>We can apply multiple assignments in two ways, either by assigning a single value to multiple variables or assigning multiple values to multiple variables. Consider the following example.</p>\r\n\r\n<p><strong>1. Assigning single value to multiple variables</strong></p>\r\n\r\n<p><strong>Eg:</strong></p>\r\n\r\n<ol start=\"1\">\r\n	<li>x=y=z=50&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>print(x)&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>print(y)&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>print(z)&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p><strong>Output:</strong></p>\r\n\r\n<pre>\r\n50  \r\n50  \r\n50  \r\n</pre>\r\n\r\n<p><strong>2. Assigning multiple values to multiple variables:</strong></p>\r\n\r\n<p><strong>Eg:</strong></p>\r\n\r\n<ol start=\"1\">\r\n	<li>a,b,c=5,10,15&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>print&nbsp;a&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>print&nbsp;b&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>print&nbsp;c&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p><strong>Output:</strong></p>\r\n\r\n<pre>\r\n5  \r\n10  \r\n15  \r\n</pre>\r\n\r\n<p>The values will be assigned in the order in which variables appear.</p>\r\n\r\n<h2>Python Variable Types</h2>\r\n\r\n<p>There are two types of variables in Python - Local variable and Global variable. Let&#39;s understand the following variables.</p>\r\n\r\n<h3>Local Variable</h3>\r\n\r\n<p>Local variables are the variables that declared inside the function and have scope within the function. Let&#39;s understand the following example.</p>\r\n\r\n<p><strong>Example -</strong></p>\r\n\r\n<ol start=\"1\">\r\n	<li>#&nbsp;Declaring&nbsp;a&nbsp;function&nbsp;&nbsp;</li>\r\n	<li>def&nbsp;add():&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;#&nbsp;Defining&nbsp;local&nbsp;variables.&nbsp;They&nbsp;has&nbsp;scope&nbsp;only&nbsp;within&nbsp;a&nbsp;function&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;a&nbsp;=&nbsp;20&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;b&nbsp;=&nbsp;30&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;c&nbsp;=&nbsp;a&nbsp;+&nbsp;b&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;print(&quot;The&nbsp;sum&nbsp;is:&quot;,&nbsp;c)&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;</li>\r\n	<li>#&nbsp;Calling&nbsp;a&nbsp;function&nbsp;&nbsp;</li>\r\n	<li>add()&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p><strong>Output:</strong></p>\r\n\r\n<pre>\r\nThe sum is: 50\r\n</pre>\r\n\r\n<p><strong>Explanation:</strong></p>\r\n\r\n<p>In the above code, we declared a function named&nbsp;<strong>add()</strong>&nbsp;and assigned a few variables within the function. These variables will be referred to as the&nbsp;<strong>local variables</strong>&nbsp;which have scope only inside the function. If we try to use them outside the function, we get a following error.</p>\r\n\r\n<ol start=\"1\">\r\n	<li>add()&nbsp;&nbsp;</li>\r\n	<li>#&nbsp;Accessing&nbsp;local&nbsp;variable&nbsp;outside&nbsp;the&nbsp;function&nbsp;&nbsp;&nbsp;</li>\r\n	<li>print(a)&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p><strong>Output:</strong></p>\r\n\r\n<pre>\r\nThe sum is: 50\r\n    print(a)\r\nNameError: name &#39;a&#39; is not defined\r\n</pre>\r\n\r\n<p>We tried to use local variable outside their scope; it threw the&nbsp;<strong>NameError.</strong></p>\r\n\r\n<h3>Global Variables</h3>\r\n\r\n<p>Global variables can be used throughout the program, and its scope is in the entire program. We can use global variables inside or outside the function.</p>\r\n\r\n<p>A variable declared outside the function is the global variable by default. Python provides the&nbsp;<strong>global</strong>&nbsp;keyword to use global variable inside the function. If we don&#39;t use the&nbsp;<strong>global</strong>&nbsp;keyword, the function treats it as a local variable. Let&#39;s understand the following example.</p>\r\n\r\n<p><strong>Example -</strong></p>\r\n\r\n<ol start=\"1\">\r\n	<li>#&nbsp;Declare&nbsp;a&nbsp;variable&nbsp;and&nbsp;initialize&nbsp;it&nbsp;&nbsp;</li>\r\n	<li>x&nbsp;=&nbsp;101&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;</li>\r\n	<li>#&nbsp;Global&nbsp;variable&nbsp;in&nbsp;function&nbsp;&nbsp;</li>\r\n	<li>def&nbsp;mainFunction():&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;#&nbsp;printing&nbsp;a&nbsp;global&nbsp;variable&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;global&nbsp;x&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;print(x)&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;#&nbsp;modifying&nbsp;a&nbsp;global&nbsp;variable&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;x&nbsp;=&nbsp;&#39;Welcome&nbsp;To&nbsp;Javatpoint&#39;&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;print(x)&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;</li>\r\n	<li>mainFunction()&nbsp;&nbsp;</li>\r\n	<li>print(x)&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p><strong>Output:</strong></p>\r\n\r\n<pre>\r\n101\r\nWelcome To Javatpoint\r\nWelcome To Javatpoint\r\n</pre>\r\n\r\n<p><strong>Explanation:</strong></p>\r\n\r\n<p>In the above code, we declare a global variable&nbsp;<strong>x</strong>&nbsp;and assign a value to it. Next, we defined a function and accessed the declared variable using the&nbsp;<strong>global</strong>&nbsp;keyword inside the function. Now we can modify its value. Then, we assigned a new string value to the variable x.</p>\r\n\r\n<p>Now, we called the function and proceeded to print&nbsp;<strong>x</strong>. It printed the as newly assigned value of x.</p>\r\n\r\n<h2>Delete a variable</h2>\r\n\r\n<p>We can delete the variable using the&nbsp;<strong>del</strong>&nbsp;keyword. The syntax is given below.</p>\r\n\r\n<p><strong>Syntax -</strong></p>\r\n\r\n<ol start=\"1\">\r\n	<li>del&nbsp;&lt;variable_name&gt;&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p>In the following example, we create a variable x and assign value to it. We deleted variable x, and print it, we get the error&nbsp;<strong>&quot;variable x is not defined&quot;</strong>. The variable x will no longer use in future.</p>\r\n\r\n<p><strong>Example -</strong></p>\r\n\r\n<ol start=\"1\">\r\n	<li>#&nbsp;Assigning&nbsp;a&nbsp;value&nbsp;to&nbsp;x&nbsp;&nbsp;</li>\r\n	<li>x&nbsp;=&nbsp;6&nbsp;&nbsp;</li>\r\n	<li>print(x)&nbsp;&nbsp;</li>\r\n	<li>#&nbsp;deleting&nbsp;a&nbsp;variable.&nbsp;&nbsp;&nbsp;</li>\r\n	<li>del&nbsp;x&nbsp;&nbsp;</li>\r\n	<li>print(x)&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p><strong>Output:</strong></p>\r\n\r\n<pre>\r\n6\r\nTraceback (most recent call last):\r\n  File &quot;C:/Users/DEVANSH SHARMA/PycharmProjects/Hello/multiprocessing.py&quot;, line 389, in \r\n    print(x)\r\nNameError: name &#39;x&#39; is not defined\r\n</pre>\r\n\r\n<h2>Maximum Possible Value of an Integer in Python</h2>\r\n\r\n<p>Unlike the other programming languages, Python doesn&#39;t have long int or float data types. It treats all integer values as an&nbsp;<strong>int</strong>&nbsp;data type. Here, the question arises. What is the maximum possible value can hold by the variable in Python? Consider the following example.</p>\r\n\r\n<p><strong>Example -</strong></p>\r\n\r\n<ol start=\"1\">\r\n	<li>#&nbsp;A&nbsp;Python&nbsp;program&nbsp;to&nbsp;display&nbsp;that&nbsp;we&nbsp;can&nbsp;store&nbsp;&nbsp;</li>\r\n	<li>#&nbsp;large&nbsp;numbers&nbsp;in&nbsp;Python&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;</li>\r\n	<li>a&nbsp;=&nbsp;10000000000000000000000000000000000000000000&nbsp;&nbsp;</li>\r\n	<li>a&nbsp;=&nbsp;a&nbsp;+&nbsp;1&nbsp;&nbsp;</li>\r\n	<li>print(type(a))&nbsp;&nbsp;</li>\r\n	<li>print&nbsp;(a)&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p><strong>Output:</strong></p>\r\n\r\n<pre>\r\n&lt;class &#39;int&#39;&gt;\r\n10000000000000000000000000000000000000000001\r\n</pre>\r\n\r\n<p>As we can see in the above example, we assigned a large integer value to variable&nbsp;<strong>x</strong>&nbsp;and checked its type. It printed&nbsp;<strong>class &lt;int&gt;</strong>&nbsp;not long int. Hence, there is no limitation number by bits and we can expand to the limit of our memory.</p>\r\n\r\n<p>Python doesn&#39;t have any special data type to store larger numbers.</p>\r\n\r\n<h3>Print Single and Multiple Variables in Python</h3>\r\n\r\n<p>We can print multiple variables within the single print statement. Below are the example of single and multiple printing values.</p>\r\n\r\n<p><strong>Example - 1 (Printing Single Variable)</strong></p>\r\n\r\n<ol start=\"1\">\r\n	<li>#&nbsp;printing&nbsp;single&nbsp;value&nbsp;&nbsp;&nbsp;</li>\r\n	<li>a&nbsp;=&nbsp;5&nbsp;&nbsp;</li>\r\n	<li>print(a)&nbsp;&nbsp;</li>\r\n	<li>print((a))&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p><strong>Output:</strong></p>\r\n\r\n<pre>\r\n5\r\n5\r\n</pre>\r\n\r\n<p><strong>Example - 2 (Printing Multiple Variables)</strong></p>\r\n\r\n<ol start=\"1\">\r\n	<li>a&nbsp;=&nbsp;5&nbsp;&nbsp;</li>\r\n	<li>b&nbsp;=&nbsp;6&nbsp;&nbsp;</li>\r\n	<li>#&nbsp;printing&nbsp;multiple&nbsp;variables&nbsp;&nbsp;</li>\r\n	<li>print(a,b)&nbsp;&nbsp;</li>\r\n	<li>#&nbsp;separate&nbsp;the&nbsp;variables&nbsp;by&nbsp;the&nbsp;comma&nbsp;&nbsp;</li>\r\n	<li>Print(1,&nbsp;2,&nbsp;3,&nbsp;4,&nbsp;5,&nbsp;6,&nbsp;7,&nbsp;8)&nbsp;&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p><strong>Output:</strong></p>\r\n\r\n<pre>\r\n5 6\r\n1 2 3 4 5 6 7 8\r\n</pre>\r\n\r\n<h2>Basic Fundamentals:</h2>\r\n\r\n<p>This section contains the fundamentals of Python, such as:</p>\r\n\r\n<p><strong>i)Tokens and their types.</strong></p>\r\n\r\n<p><strong>ii) Comments</strong></p>\r\n\r\n<p><strong>a)Tokens:</strong></p>\r\n\r\n<ul>\r\n	<li>The tokens can be defined as a punctuator mark, reserved words, and each word in a statement.</li>\r\n	<li>The token is the smallest unit inside the given program.</li>\r\n</ul>\r\n\r\n<p>There are following tokens in Python:</p>\r\n\r\n<ul>\r\n	<li>Keywords.</li>\r\n	<li>Identifiers.</li>\r\n	<li>Literals.</li>\r\n	<li>Operators.</li>\r\n</ul>\r\n', 'PYTHON'),
(67, 'Python Data Types', '<p>Variables can hold values, and every value has a data-type. Python is a dynamically typed language; hence we do not need to define the type of the variable while declaring it. The interpreter implicitly binds the value with its type.</p>\r\n\r\n<ol start=\"1\">\r\n	<li>a&nbsp;=&nbsp;5&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p>The variable&nbsp;<strong>a</strong>&nbsp;holds integer value five and we did not define its type. Python interpreter will automatically interpret variables&nbsp;<strong>a</strong>&nbsp;as an integer type.</p>\r\n\r\n<p>Python enables us to check the type of the variable used in the program. Python provides us the&nbsp;<strong>type()</strong>&nbsp;function, which returns the type of the variable passed.</p>\r\n\r\n<p>Consider the following example to define the values of different data types and checking its type.</p>\r\n\r\n<p>PlayNext</p>\r\n\r\n<p>Unmute</p>\r\n\r\n<p>Current Time&Acirc;&nbsp;0:00</p>\r\n\r\n<p>/</p>\r\n\r\n<p>Duration&Acirc;&nbsp;18:10</p>\r\n\r\n<p>Loaded:&nbsp;0.37%</p>\r\n\r\n<p>&Acirc;&nbsp;</p>\r\n\r\n<p>Fullscreen</p>\r\n\r\n<p>Backward Skip 10sPlay VideoForward Skip 10s</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<ol start=\"1\">\r\n	<li>a=10&nbsp;&nbsp;</li>\r\n	<li>b=&quot;Hi&nbsp;Python&quot;&nbsp;&nbsp;</li>\r\n	<li>c&nbsp;=&nbsp;10.5&nbsp;&nbsp;</li>\r\n	<li>print(type(a))&nbsp;&nbsp;</li>\r\n	<li>print(type(b))&nbsp;&nbsp;</li>\r\n	<li>print(type(c))&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p><strong>Output:</strong></p>\r\n\r\n<pre>\r\n&lt;type &#39;int&#39;&gt;\r\n&lt;type &#39;str&#39;&gt;\r\n&lt;type &#39;float&#39;&gt;\r\n</pre>\r\n\r\n<h2>Standard data types</h2>\r\n\r\n<p>A variable can hold different types of values. For example, a person&#39;s name must be stored as a string whereas its id must be stored as an integer.</p>\r\n\r\n<p>Python provides various standard data types that define the storage method on each of them. The data types defined in Python are given below.</p>\r\n\r\n<ol>\r\n	<li><a href=\"https://www.javatpoint.com/python-data-types#numbers\">Numbers</a></li>\r\n	<li><a href=\"https://www.javatpoint.com/python-data-types#SequenceType\">Sequence Type</a></li>\r\n	<li><a href=\"https://www.javatpoint.com/python-data-types#Boolean\">Boolean</a></li>\r\n	<li><a href=\"https://www.javatpoint.com/python-data-types#Set\">Set</a></li>\r\n	<li><a href=\"https://www.javatpoint.com/python-data-types#dictionary\">Dictionary</a></li>\r\n</ol>\r\n\r\n<p><img alt=\"Python Data Types\" src=\"https://static.javatpoint.com/python/images/python-data-types.png\" /></p>\r\n\r\n<p>In this section of the tutorial, we will give a brief introduction of the above data-types. We will discuss each one of them in detail later in this tutorial.</p>\r\n\r\n<h3>Numbers</h3>\r\n\r\n<p>Number stores numeric values. The integer, float, and complex values belong to a Python Numbers data-type. Python provides the&nbsp;<strong>type()</strong>&nbsp;function to know the data-type of the variable. Similarly, the&nbsp;<strong>isinstance()</strong>&nbsp;function is used to check an object belongs to a particular class.</p>\r\n\r\n<p>Python creates Number objects when a number is assigned to a variable. For example;</p>\r\n\r\n<ol start=\"1\">\r\n	<li>a&nbsp;=&nbsp;5&nbsp;&nbsp;</li>\r\n	<li>print(&quot;The&nbsp;type&nbsp;of&nbsp;a&quot;,&nbsp;type(a))&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;</li>\r\n	<li>b&nbsp;=&nbsp;40.5&nbsp;&nbsp;</li>\r\n	<li>print(&quot;The&nbsp;type&nbsp;of&nbsp;b&quot;,&nbsp;type(b))&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;</li>\r\n	<li>c&nbsp;=&nbsp;1+3j&nbsp;&nbsp;</li>\r\n	<li>print(&quot;The&nbsp;type&nbsp;of&nbsp;c&quot;,&nbsp;type(c))&nbsp;&nbsp;</li>\r\n	<li>print(&quot;&nbsp;c&nbsp;is&nbsp;a&nbsp;complex&nbsp;number&quot;,&nbsp;isinstance(1+3j,complex))&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p><strong>Output:</strong></p>\r\n\r\n<pre>\r\nThe type of a &lt;class &#39;int&#39;&gt;\r\nThe type of b &lt;class &#39;float&#39;&gt;\r\nThe type of c &lt;class &#39;complex&#39;&gt;\r\nc is complex number: True\r\n</pre>\r\n\r\n<p>Python supports three types of numeric data.</p>\r\n\r\n<ol>\r\n	<li><strong>Int -</strong>&nbsp;Integer value can be any length such as integers 10, 2, 29, -20, -150 etc. Python has no restriction on the length of an integer. Its value belongs to&nbsp;<strong>int</strong></li>\r\n	<li><strong>Float -</strong>&nbsp;Float is used to store floating-point numbers like 1.9, 9.902, 15.2, etc. It is accurate upto 15 decimal points.</li>\r\n	<li><strong>complex -</strong>&nbsp;A complex number contains an ordered pair, i.e., x + iy where x and y denote the real and imaginary parts, respectively. The complex numbers like 2.14j, 2.0 + 2.3j, etc.</li>\r\n</ol>\r\n\r\n<h3>Sequence Type</h3>\r\n\r\n<h3>String</h3>\r\n\r\n<p>The string can be defined as the sequence of characters represented in the quotation marks. In Python, we can use single, double, or triple quotes to define a string.</p>\r\n\r\n<p>String handling in Python is a straightforward task since Python provides built-in functions and operators to perform operations in the string.</p>\r\n\r\n<p>In the case of string handling, the operator + is used to concatenate two strings as the operation&nbsp;<em>&quot;hello&quot;+&quot; python&quot;</em>&nbsp;returns&nbsp;<em>&quot;hello python&quot;</em>.</p>\r\n\r\n<p>The operator * is known as a repetition operator as the operation &quot;Python&quot; *2 returns &#39;Python Python&#39;.</p>\r\n\r\n<p>The following example illustrates the string in Python.</p>\r\n\r\n<p><strong>Example - 1</strong></p>\r\n\r\n<ol start=\"1\">\r\n	<li>str&nbsp;=&nbsp;&quot;string&nbsp;using&nbsp;double&nbsp;quotes&quot;&nbsp;&nbsp;</li>\r\n	<li>print(str)&nbsp;&nbsp;</li>\r\n	<li>s&nbsp;=&nbsp;&#39;&#39;&#39;&#39;&#39;A&nbsp;multiline&nbsp;</li>\r\n	<li>string&#39;&#39;&#39;&nbsp;&nbsp;</li>\r\n	<li>print(s)&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p><strong>Output:</strong></p>\r\n\r\n<pre>\r\nstring using double quotes\r\nA multiline\r\nstring\r\n</pre>\r\n\r\n<p>Consider the following example of string handling.</p>\r\n\r\n<p><strong>Example - 2</strong></p>\r\n\r\n<ol start=\"1\">\r\n	<li>str1&nbsp;=&nbsp;&#39;hello&nbsp;javatpoint&#39;&nbsp;#string&nbsp;str1&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>str2&nbsp;=&nbsp;&#39;&nbsp;how&nbsp;are&nbsp;you&#39;&nbsp;#string&nbsp;str2&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>print&nbsp;(str1[0:2])&nbsp;#printing&nbsp;first&nbsp;two&nbsp;character&nbsp;using&nbsp;slice&nbsp;operator&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>print&nbsp;(str1[4])&nbsp;#printing&nbsp;4th&nbsp;character&nbsp;of&nbsp;the&nbsp;string&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>print&nbsp;(str1*2)&nbsp;#printing&nbsp;the&nbsp;string&nbsp;twice&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>print&nbsp;(str1&nbsp;+&nbsp;str2)&nbsp;#printing&nbsp;the&nbsp;concatenation&nbsp;of&nbsp;str1&nbsp;and&nbsp;str2&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p><strong>Output:</strong></p>\r\n\r\n<pre>\r\nhe\r\no\r\nhello javatpointhello javatpoint\r\nhello javatpoint how are you\r\n</pre>\r\n\r\n<h3>List</h3>\r\n\r\n<p>Python Lists are similar to arrays in C. However, the list can contain data of different types. The items stored in the list are separated with a comma (,) and enclosed within square brackets [].</p>\r\n\r\n<p>We can use slice [:] operators to access the data of the list. The concatenation operator (+) and repetition operator (*) works with the list in the same way as they were working with the strings.</p>\r\n\r\n<p>Consider the following example.</p>\r\n\r\n<ol start=\"1\">\r\n	<li>list1&nbsp;&nbsp;=&nbsp;[1,&nbsp;&quot;hi&quot;,&nbsp;&quot;Python&quot;,&nbsp;2]&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>#Checking&nbsp;type&nbsp;of&nbsp;given&nbsp;list&nbsp;&nbsp;</li>\r\n	<li>print(type(list1))&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;</li>\r\n	<li>#Printing&nbsp;the&nbsp;list1&nbsp;&nbsp;</li>\r\n	<li>print&nbsp;(list1)&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;</li>\r\n	<li>#&nbsp;List&nbsp;slicing&nbsp;&nbsp;</li>\r\n	<li>print&nbsp;(list1[3:])&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;</li>\r\n	<li>#&nbsp;List&nbsp;slicing&nbsp;&nbsp;</li>\r\n	<li>print&nbsp;(list1[0:2])&nbsp;&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;</li>\r\n	<li>#&nbsp;List&nbsp;Concatenation&nbsp;using&nbsp;+&nbsp;operator&nbsp;&nbsp;</li>\r\n	<li>print&nbsp;(list1&nbsp;+&nbsp;list1)&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;</li>\r\n	<li>#&nbsp;List&nbsp;repetation&nbsp;using&nbsp;*&nbsp;operator&nbsp;&nbsp;</li>\r\n	<li>print&nbsp;(list1&nbsp;*&nbsp;3)&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p><strong>Output:</strong></p>\r\n\r\n<pre>\r\n[1, &#39;hi&#39;, &#39;Python&#39;, 2]\r\n[2]\r\n[1, &#39;hi&#39;]\r\n[1, &#39;hi&#39;, &#39;Python&#39;, 2, 1, &#39;hi&#39;, &#39;Python&#39;, 2]\r\n[1, &#39;hi&#39;, &#39;Python&#39;, 2, 1, &#39;hi&#39;, &#39;Python&#39;, 2, 1, &#39;hi&#39;, &#39;Python&#39;, 2]\r\n</pre>\r\n\r\n<h3>Tuple</h3>\r\n\r\n<p>A tuple is similar to the list in many ways. Like lists, tuples also contain the collection of the items of different data types. The items of the tuple are separated with a comma (,) and enclosed in parentheses ().</p>\r\n\r\n<p>A tuple is a read-only data structure as we can&#39;t modify the size and value of the items of a tuple.</p>\r\n\r\n<p>Let&#39;s see a simple example of the tuple.</p>\r\n\r\n<ol start=\"1\">\r\n	<li>tup&nbsp;&nbsp;=&nbsp;(&quot;hi&quot;,&nbsp;&quot;Python&quot;,&nbsp;2)&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>#&nbsp;Checking&nbsp;type&nbsp;of&nbsp;tup&nbsp;&nbsp;</li>\r\n	<li>print&nbsp;(type(tup))&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;</li>\r\n	<li>#Printing&nbsp;the&nbsp;tuple&nbsp;&nbsp;</li>\r\n	<li>print&nbsp;(tup)&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;</li>\r\n	<li>#&nbsp;Tuple&nbsp;slicing&nbsp;&nbsp;</li>\r\n	<li>print&nbsp;(tup[1:])&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>print&nbsp;(tup[0:1])&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;</li>\r\n	<li>#&nbsp;Tuple&nbsp;concatenation&nbsp;using&nbsp;+&nbsp;operator&nbsp;&nbsp;</li>\r\n	<li>print&nbsp;(tup&nbsp;+&nbsp;tup)&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;</li>\r\n	<li>#&nbsp;Tuple&nbsp;repatation&nbsp;using&nbsp;*&nbsp;operator&nbsp;&nbsp;</li>\r\n	<li>print&nbsp;(tup&nbsp;*&nbsp;3)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;</li>\r\n	<li>#&nbsp;Adding&nbsp;value&nbsp;to&nbsp;tup.&nbsp;It&nbsp;will&nbsp;throw&nbsp;an&nbsp;error.&nbsp;&nbsp;</li>\r\n	<li>t[2]&nbsp;=&nbsp;&quot;hi&quot;&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p><strong>Output:</strong></p>\r\n\r\n<pre>\r\n&lt;class &#39;tuple&#39;&gt;\r\n(&#39;hi&#39;, &#39;Python&#39;, 2)\r\n(&#39;Python&#39;, 2)\r\n(&#39;hi&#39;,)\r\n(&#39;hi&#39;, &#39;Python&#39;, 2, &#39;hi&#39;, &#39;Python&#39;, 2)\r\n(&#39;hi&#39;, &#39;Python&#39;, 2, &#39;hi&#39;, &#39;Python&#39;, 2, &#39;hi&#39;, &#39;Python&#39;, 2)\r\n\r\nTraceback (most recent call last):\r\n  File &quot;main.py&quot;, line 14, in &lt;module&gt;\r\n    t[2] = &quot;hi&quot;;\r\nTypeError: &#39;tuple&#39; object does not support item assignment\r\n</pre>\r\n\r\n<h3>Dictionary</h3>\r\n\r\n<p>Dictionary is an unordered set of a key-value pair of items. It is like an associative array or a hash table where each key stores a specific value. Key can hold any primitive data type, whereas value is an arbitrary Python object.</p>\r\n\r\n<p>The items in the dictionary are separated with the comma (,) and enclosed in the curly braces {}.</p>\r\n\r\n<p>Consider the following example.</p>\r\n\r\n<ol start=\"1\">\r\n	<li>d&nbsp;=&nbsp;{1:&#39;Jimmy&#39;,&nbsp;2:&#39;Alex&#39;,&nbsp;3:&#39;john&#39;,&nbsp;4:&#39;mike&#39;}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;</li>\r\n	<li>#&nbsp;Printing&nbsp;dictionary&nbsp;&nbsp;</li>\r\n	<li>print&nbsp;(d)&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;</li>\r\n	<li>#&nbsp;Accesing&nbsp;value&nbsp;using&nbsp;keys&nbsp;&nbsp;</li>\r\n	<li>print(&quot;1st&nbsp;name&nbsp;is&nbsp;&quot;+d[1])&nbsp;&nbsp;&nbsp;</li>\r\n	<li>print(&quot;2nd&nbsp;name&nbsp;is&nbsp;&quot;+&nbsp;d[4])&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;</li>\r\n	<li>print&nbsp;(d.keys())&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>print&nbsp;(d.values())&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p><strong>Output:</strong></p>\r\n\r\n<pre>\r\n1st name is Jimmy\r\n2nd name is mike\r\n{1: &#39;Jimmy&#39;, 2: &#39;Alex&#39;, 3: &#39;john&#39;, 4: &#39;mike&#39;}\r\ndict_keys([1, 2, 3, 4])\r\ndict_values([&#39;Jimmy&#39;, &#39;Alex&#39;, &#39;john&#39;, &#39;mike&#39;])\r\n</pre>\r\n\r\n<h3>Boolean</h3>\r\n\r\n<p>Boolean type provides two built-in values, True and False. These values are used to determine the given statement true or false. It denotes by the class bool. True can be represented by any non-zero value or &#39;T&#39; whereas false can be represented by the 0 or &#39;F&#39;. Consider the following example.</p>\r\n\r\n<ol start=\"1\">\r\n	<li>#&nbsp;Python&nbsp;program&nbsp;to&nbsp;check&nbsp;the&nbsp;boolean&nbsp;type&nbsp;&nbsp;</li>\r\n	<li>print(type(True))&nbsp;&nbsp;</li>\r\n	<li>print(type(False))&nbsp;&nbsp;</li>\r\n	<li>print(false)&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p><strong>Output:</strong></p>\r\n\r\n<pre>\r\n&lt;class &#39;bool&#39;&gt;\r\n&lt;class &#39;bool&#39;&gt;\r\nNameError: name &#39;false&#39; is not defined\r\n</pre>\r\n\r\n<h3>Set</h3>\r\n\r\n<p>Python Set is the unordered collection of the data type. It is iterable, mutable(can modify after creation), and has unique elements. In set, the order of the elements is undefined; it may return the changed sequence of the element. The set is created by using a built-in function&nbsp;<strong>set(),</strong>&nbsp;or a sequence of elements is passed in the curly braces and separated by the comma. It can contain various types of values. Consider the following example.</p>\r\n\r\n<ol start=\"1\">\r\n	<li>#&nbsp;Creating&nbsp;Empty&nbsp;set&nbsp;&nbsp;</li>\r\n	<li>set1&nbsp;=&nbsp;set()&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;</li>\r\n	<li>set2&nbsp;=&nbsp;{&#39;James&#39;,&nbsp;2,&nbsp;3,&#39;Python&#39;}&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;</li>\r\n	<li>#Printing&nbsp;Set&nbsp;value&nbsp;&nbsp;</li>\r\n	<li>print(set2)&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;</li>\r\n	<li>#&nbsp;Adding&nbsp;element&nbsp;to&nbsp;the&nbsp;set&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;</li>\r\n	<li>set2.add(10)&nbsp;&nbsp;</li>\r\n	<li>print(set2)&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;</li>\r\n	<li>#Removing&nbsp;element&nbsp;from&nbsp;the&nbsp;set&nbsp;&nbsp;</li>\r\n	<li>set2.remove(2)&nbsp;&nbsp;</li>\r\n	<li>print(set2)&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p><strong>Output:</strong></p>\r\n\r\n<pre>\r\n{3, &#39;Python&#39;, &#39;James&#39;, 2}\r\n{&#39;Python&#39;, &#39;James&#39;, 3, 2, 10}\r\n{&#39;Python&#39;, &#39;James&#39;, 3, 10}</pre>\r\n', 'PYTHON');
INSERT INTO `courses` (`id`, `topic_name`, `description`, `course_name`) VALUES
(68, 'Python Keywords', '<h1>Python Keywords</h1>\r\n\r\n<p>Every scripting language has designated words or keywords, with particular definitions and usage guidelines. Python is no exception. The fundamental constituent elements of any Python program are Python keywords.</p>\r\n\r\n<p>This tutorial will give you a basic overview of all Python keywords and a detailed discussion of some important keywords that are frequently used.</p>\r\n\r\n<h2>Introducing Python Keywords</h2>\r\n\r\n<p>Python keywords are unique words reserved with defined meanings and functions that we can only apply for those functions. You&#39;ll never need to import any keyword into your program because they&#39;re permanently present.</p>\r\n\r\n<p>Python&#39;s built-in methods and classes are not the same as the keywords. Built-in methods and classes are constantly present; however, they are not as limited in their application as keywords.</p>\r\n\r\n<p>PlayNext</p>\r\n\r\n<p>Unmute</p>\r\n\r\n<p>Current Time&Acirc;&nbsp;0:00</p>\r\n\r\n<p>/</p>\r\n\r\n<p>Duration&Acirc;&nbsp;18:10</p>\r\n\r\n<p>Loaded:&nbsp;0.37%</p>\r\n\r\n<p>&Acirc;&nbsp;</p>\r\n\r\n<p>Fullscreen</p>\r\n\r\n<p>Backward Skip 10sPlay VideoForward Skip 10s</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Assigning a particular meaning to Python keywords means you can&#39;t use them for other purposes in our code. You&#39;ll get a message of SyntaxError if you attempt to do the same. If you attempt to assign anything to a built-in method or type, you will not receive a SyntaxError message; however, it is still not a smart idea.</p>\r\n\r\n<p>Python contains thirty-five keywords in the most recent version, i.e., Python 3.8. Here we have shown a complete list of Python keywords for the reader&#39;s reference.</p>\r\n\r\n<table>\r\n	<tbody>\r\n		<tr>\r\n			<td>False</td>\r\n			<td>await</td>\r\n			<td>else</td>\r\n			<td>import</td>\r\n			<td>pass</td>\r\n		</tr>\r\n		<tr>\r\n			<td>None</td>\r\n			<td>break</td>\r\n			<td>except</td>\r\n			<td>in</td>\r\n			<td>raise</td>\r\n		</tr>\r\n		<tr>\r\n			<td>True</td>\r\n			<td>class</td>\r\n			<td>finally</td>\r\n			<td>is</td>\r\n			<td>return</td>\r\n		</tr>\r\n		<tr>\r\n			<td>and</td>\r\n			<td>continue</td>\r\n			<td>for</td>\r\n			<td>lambda</td>\r\n			<td>try</td>\r\n		</tr>\r\n		<tr>\r\n			<td>as</td>\r\n			<td>def</td>\r\n			<td>from</td>\r\n			<td>nonlocal</td>\r\n			<td>while</td>\r\n		</tr>\r\n		<tr>\r\n			<td>assert</td>\r\n			<td>del</td>\r\n			<td>global</td>\r\n			<td>not</td>\r\n			<td>with</td>\r\n		</tr>\r\n		<tr>\r\n			<td>async</td>\r\n			<td>elif</td>\r\n			<td>if</td>\r\n			<td>or</td>\r\n			<td>yield</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n\r\n<p>In distinct versions of Python, the preceding keywords might be changed. Some extras may be introduced, while others may be deleted. By writing the following statement into the coding window, you can anytime retrieve the collection of keywords in the version you are working on.</p>\r\n\r\n<p><strong>Code</strong></p>\r\n\r\n<ol start=\"1\">\r\n	<li>#&nbsp;Python&nbsp;program&nbsp;to&nbsp;demonstrate&nbsp;the&nbsp;application&nbsp;of&nbsp;iskeyword()&nbsp;&nbsp;</li>\r\n	<li>#&nbsp;importing&nbsp;keyword&nbsp;library&nbsp;which&nbsp;has&nbsp;lists&nbsp;&nbsp;</li>\r\n	<li>import&nbsp;keyword&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>#&nbsp;displaying&nbsp;the&nbsp;complete&nbsp;list&nbsp;using&nbsp;&quot;kwlist().&quot;&nbsp;&nbsp;</li>\r\n	<li>print(&quot;The&nbsp;set&nbsp;of&nbsp;keywords&nbsp;in&nbsp;this&nbsp;version&nbsp;is:&nbsp;&quot;)&nbsp;&nbsp;</li>\r\n	<li>print(&nbsp;keyword.kwlist&nbsp;)&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p><strong>Output:</strong></p>\r\n\r\n<pre>\r\nThe set of keywords in this version is : \r\n[&#39;False&#39;, &#39;None&#39;, &#39;True&#39;, &#39;and&#39;, &#39;as&#39;, &#39;assert&#39;, &#39;async&#39;, &#39;await&#39;, &#39;break&#39;, &#39;class&#39;, &#39;continue&#39;, &#39;def&#39;, &#39;del&#39;, &#39;elif&#39;, &#39;else&#39;, &#39;except&#39;, &#39;finally&#39;, &#39;for&#39;, &#39;from&#39;, &#39;global&#39;, &#39;if&#39;, &#39;import&#39;, &#39;in&#39;, &#39;is&#39;, &#39;lambda&#39;, &#39;nonlocal&#39;, &#39;not&#39;, &#39;or&#39;, &#39;pass&#39;, &#39;raise&#39;, &#39;return&#39;, &#39;try&#39;, &#39;while&#39;, &#39;with&#39;, &#39;yield&#39;]\r\n</pre>\r\n\r\n<p>By calling help(), you can retrieve a list of currently offered keywords:</p>\r\n\r\n<p><strong>Code</strong></p>\r\n\r\n<ol start=\"1\">\r\n	<li>help(&quot;keywords&quot;)&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<h2>How to Identify Python Keywords</h2>\r\n\r\n<p>Python&#39;s keyword collection has evolved as new versions were introduced. The await and async keywords, for instance, were not introduced till Python 3.7. Also, in Python 2.7, the words print and exec constituted keywords; however, in Python 3+, they were changed into built-in methods and are no longer part of the set of keywords. In the paragraphs below, you&#39;ll discover numerous methods for determining whether a particular word in Python is a keyword or not.</p>\r\n\r\n<h3>Write Code on a Syntax Highlighting IDE</h3>\r\n\r\n<p>There are plenty of excellent Python IDEs available. They&#39;ll all highlight keywords to set them apart from the rest of the terms in the code. This facility will assist you in immediately identifying Python keywords during coding so that you do not misuse them.</p>\r\n\r\n<h3>Verify Keywords with Script in a REPL</h3>\r\n\r\n<p>There are several ways to detect acceptable Python keywords plus know further regarding them in the Python REPL.</p>\r\n\r\n<h3>Look for a SyntaxError</h3>\r\n\r\n<p>Lastly, if you receive a SyntaxError when attempting to allocate to it, name a method with it, or do anything else with that, and it isn&#39;t permitted, it&#39;s probably a keyword. This one is somewhat more difficult to see, but it is still a technique for Python to tell you if you&#39;re misusing a keyword.</p>\r\n\r\n<h2>Python Keywords and Their Usage</h2>\r\n\r\n<p>The following sections categorize Python keywords under the headings based on their frequency of use. The first category, for instance, includes all keywords utilized as values, whereas the next group includes keywords employed as operators. These classifications will aid in understanding how keywords are employed and will assist you in arranging the huge collection of Python keywords.</p>\r\n\r\n<ul>\r\n	<li>A few terms mentioned in the segment following may be unfamiliar to you. They&#39;re explained here, and you must understand what they mean before moving on:</li>\r\n	<li>The Boolean assessment of a variable is referred to as truthfulness. A value&#39;s truthfulness reveals if the value of the variable is true or false.</li>\r\n</ul>\r\n\r\n<p>In the Boolean paradigm, truth refers to any variable that evaluates to true. Pass an item as an input to bool() to see if it is true. If True is returned, the value of the item is true. Strings and lists which are not empty, non-zero numbers, and many other objects are illustrations of true values.</p>\r\n\r\n<p>False refers to any item in a Boolean expression that returns false. Pass an item as an input to bool() to see if it is false. If False is returned, the value of the item is false. Examples of false values are &quot; &quot;, 0, { }, and [ ].</p>\r\n\r\n<h3>Value Keywords: True, False, None</h3>\r\n\r\n<p>Three Python keywords are employed as values in this example. These are singular values, which we can reuse indefinitely and every time correspond to the same entity. These values will most probably be seen and used frequently.</p>\r\n\r\n<p><strong>The Keywords True and False</strong></p>\r\n\r\n<p>These keywords are typed in lowercase in conventional computer languages (true and false); however, they are typed in uppercase in Python every time. In Python script, the True Python keyword represents the Boolean true state. False is a keyword equivalent to True, except it has the negative Boolean state of false.</p>\r\n\r\n<p>True and False are those keywords that can be allocated to variables or parameters and are compared directly.</p>\r\n\r\n<p><strong>Code</strong></p>\r\n\r\n<ol start=\"1\">\r\n	<li>print(&nbsp;4&nbsp;==&nbsp;4&nbsp;)&nbsp;&nbsp;</li>\r\n	<li>print(&nbsp;6&nbsp;&gt;&nbsp;9&nbsp;)&nbsp;&nbsp;</li>\r\n	<li>print(&nbsp;True&nbsp;or&nbsp;False&nbsp;)&nbsp;&nbsp;</li>\r\n	<li>print(&nbsp;9&nbsp;&lt;=&nbsp;28&nbsp;)&nbsp;&nbsp;</li>\r\n	<li>print(&nbsp;6&nbsp;&gt;&nbsp;9&nbsp;)&nbsp;&nbsp;</li>\r\n	<li>print(&nbsp;True&nbsp;and&nbsp;False&nbsp;)&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p><strong>Output:</strong></p>\r\n\r\n<pre>\r\nTrue\r\nFalse\r\nTrue\r\nTrue\r\nFalse\r\nFalse\r\n</pre>\r\n\r\n<p>Because the first, third, and fourth statements are true, the interpreter gives True for those and False for other statements. True and False are the equivalent in Python as 1 &amp; 0. We can use the accompanying illustration to support this claim:</p>\r\n\r\n<p><strong>Code</strong></p>\r\n\r\n<ol start=\"1\">\r\n	<li>print(&nbsp;True&nbsp;==&nbsp;3&nbsp;)&nbsp;&nbsp;</li>\r\n	<li>print(&nbsp;False&nbsp;==&nbsp;0&nbsp;)&nbsp;&nbsp;</li>\r\n	<li>print(&nbsp;True&nbsp;+&nbsp;True&nbsp;+&nbsp;True)&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p><strong>Output:</strong></p>\r\n\r\n<pre>\r\nFalse\r\nTrue\r\n3\r\n</pre>\r\n\r\n<p><strong>The None Keyword</strong></p>\r\n\r\n<p>None is a Python keyword that means &quot;nothing.&quot; None is known as nil, null, or undefined in different computer languages.</p>\r\n\r\n<p>If a function does not have a return clause, it will give None as the default output:</p>\r\n\r\n<p><strong>Code</strong></p>\r\n\r\n<ol start=\"1\">\r\n	<li>print(&nbsp;None&nbsp;==&nbsp;0&nbsp;)&nbsp;&nbsp;</li>\r\n	<li>print(&nbsp;None&nbsp;==&nbsp;&quot;&nbsp;&quot;&nbsp;)&nbsp;&nbsp;</li>\r\n	<li>print(&nbsp;None&nbsp;==&nbsp;False&nbsp;)&nbsp;&nbsp;</li>\r\n	<li>A&nbsp;=&nbsp;None&nbsp;&nbsp;&nbsp;</li>\r\n	<li>B&nbsp;=&nbsp;None&nbsp;&nbsp;</li>\r\n	<li>print(&nbsp;A&nbsp;==&nbsp;B&nbsp;)&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p><strong>Output:</strong></p>\r\n\r\n<pre>\r\nFalse\r\nFalse\r\nFalse\r\nTrue\r\n</pre>\r\n\r\n<p>If a no_return_function returns nothing, it will simply return a None value. None is delivered by functions that do not meet a return expression in the program flow. Consider the following scenario:</p>\r\n\r\n<p><strong>Code</strong></p>\r\n\r\n<ol start=\"1\">\r\n	<li>def&nbsp;no_return_function():&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;num1&nbsp;=&nbsp;10&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;num2&nbsp;=&nbsp;20&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;addition&nbsp;=&nbsp;num1&nbsp;+&nbsp;num2&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;</li>\r\n	<li>number&nbsp;=&nbsp;no_return_function()&nbsp;&nbsp;</li>\r\n	<li>print(&nbsp;number&nbsp;)&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p><strong>Output:</strong></p>\r\n\r\n<pre>\r\nNone\r\n</pre>\r\n\r\n<p>This program has a function with_return that performs multiple operations and contains a return expression. As a result, if we display a number, we get None, which is given by default when there is no return statement. Here&#39;s an example showing this:</p>\r\n\r\n<p><strong>Code</strong></p>\r\n\r\n<ol start=\"1\">\r\n	<li>def&nbsp;with_return(&nbsp;num&nbsp;):&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;num&nbsp;%&nbsp;4&nbsp;==&nbsp;0:&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;False&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;</li>\r\n	<li>number&nbsp;=&nbsp;with_return(&nbsp;67&nbsp;)&nbsp;&nbsp;</li>\r\n	<li>print(&nbsp;number&nbsp;)&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p><strong>Output:</strong></p>\r\n\r\n<pre>\r\nNone\r\n</pre>\r\n\r\n<h3>Operator Keywords: and, or, not, in, is</h3>\r\n\r\n<p>Several Python keywords are employed as operators to perform mathematical operations. In many other computer languages, these operators are represented by characters such as &amp;, |, and!. All of these are keyword operations in Python:</p>\r\n\r\n<table>\r\n	<tbody>\r\n		<tr>\r\n			<th>Mathematical Operations</th>\r\n			<th>Operations in Other Languages</th>\r\n			<th>Python Keyword</th>\r\n		</tr>\r\n		<tr>\r\n			<td><strong>AND, &and;</strong></td>\r\n			<td>&amp;&amp;</td>\r\n			<td>and</td>\r\n		</tr>\r\n		<tr>\r\n			<td><strong>OR, &or;</strong></td>\r\n			<td>||</td>\r\n			<td>or</td>\r\n		</tr>\r\n		<tr>\r\n			<td><strong>NOT, &not;</strong></td>\r\n			<td>!</td>\r\n			<td>not</td>\r\n		</tr>\r\n		<tr>\r\n			<td><strong>CONTAINS, &isin;</strong></td>\r\n			<td>&nbsp;</td>\r\n			<td>in</td>\r\n		</tr>\r\n		<tr>\r\n			<td><strong>IDENTITY</strong></td>\r\n			<td>===</td>\r\n			<td>is</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n\r\n<p>Writers created Python programming with clarity in mind. As a result, many operators in other computer languages that employ characters in Python are English words called keywords.</p>\r\n\r\n<p><strong>The and Keyword</strong></p>\r\n\r\n<p>The Python keyword and determines whether both the left-hand side and right-hand side operands and are true or false. The outcome will be True if both components are true. If one is false, the outcome will also be False:</p>\r\n\r\n<table>\r\n	<tbody>\r\n		<tr>\r\n			<th colspan=\"3\">Truth table for and</th>\r\n		</tr>\r\n		<tr>\r\n			<th>X</th>\r\n			<th>Y</th>\r\n			<th>X and Y</th>\r\n		</tr>\r\n		<tr>\r\n			<td>True</td>\r\n			<td>True</td>\r\n			<td>True</td>\r\n		</tr>\r\n		<tr>\r\n			<td>False</td>\r\n			<td>True</td>\r\n			<td>False</td>\r\n		</tr>\r\n		<tr>\r\n			<td>True</td>\r\n			<td>False</td>\r\n			<td>False</td>\r\n		</tr>\r\n		<tr>\r\n			<td>False</td>\r\n			<td>False</td>\r\n			<td>False</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<ol start=\"1\">\r\n	<li>&lt;component1&gt;&nbsp;and&nbsp;&lt;component2&gt;&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p>It&#39;s worth noting that the outcomes of an and statement aren&#39;t always True or False. Due to and&#39;s peculiar behavior, this is the case. Instead of processing the inputs to corresponding Boolean values, it just gives &lt;component1&gt; if it is false or &lt;component2&gt; if it is true. The outputs of a and expression could be utilized with a conditional if clause or provided to bool() to acquire an obvious True or False answer.</p>\r\n\r\n<p><strong>The or Keyword</strong></p>\r\n\r\n<p>The or keyword in Python is utilized to check if, at minimum, 1 of the inputs is true. If the first argument is true, the or operation yields it; otherwise, the second argument is returned:</p>\r\n\r\n<ol start=\"1\">\r\n	<li>&lt;component1&gt;&nbsp;or&nbsp;&lt;component2&gt;&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p>Similarly to the and keyword, the or keyword does not change its inputs to corresponding Boolean values. Instead, the outcomes are determined based on whether they are true or false.</p>\r\n\r\n<table>\r\n	<tbody>\r\n		<tr>\r\n			<th colspan=\"3\">Truth table for or</th>\r\n		</tr>\r\n		<tr>\r\n			<th>X</th>\r\n			<th>Y</th>\r\n			<th>X or Y</th>\r\n		</tr>\r\n		<tr>\r\n			<td>True</td>\r\n			<td>True</td>\r\n			<td>True</td>\r\n		</tr>\r\n		<tr>\r\n			<td>True</td>\r\n			<td>False</td>\r\n			<td>True</td>\r\n		</tr>\r\n		<tr>\r\n			<td>False</td>\r\n			<td>True</td>\r\n			<td>True</td>\r\n		</tr>\r\n		<tr>\r\n			<td>False</td>\r\n			<td>False</td>\r\n			<td>False</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n\r\n<p><strong>The not Keyword</strong></p>\r\n\r\n<p>The not keyword in Python is utilized to acquire a variable&#39;s contrary Boolean value:</p>\r\n\r\n<p>The not keyword is employed to switch the Boolean interpretation or outcome in conditional sentences or other Boolean equations. Not, unlike and, and or, determines the specific Boolean state, True or False, afterward returns the inverse.</p>\r\n\r\n<table>\r\n	<tbody>\r\n		<tr>\r\n			<th colspan=\"2\">Truth Table for not</th>\r\n		</tr>\r\n		<tr>\r\n			<th>X</th>\r\n			<th>not X</th>\r\n		</tr>\r\n		<tr>\r\n			<td>True</td>\r\n			<td>False</td>\r\n		</tr>\r\n		<tr>\r\n			<td>False</td>\r\n			<td>True</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n\r\n<p><strong>Code</strong></p>\r\n\r\n<ol start=\"1\">\r\n	<li>False&nbsp;and&nbsp;True&nbsp;&nbsp;</li>\r\n	<li>False&nbsp;or&nbsp;True&nbsp;&nbsp;</li>\r\n	<li>not&nbsp;True&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p><strong>Output:</strong></p>\r\n\r\n<pre>\r\nFalse\r\nTrue\r\nFalse\r\n</pre>\r\n\r\n<p><strong>The in Keyword</strong></p>\r\n\r\n<p>The in keyword of Python is a robust confinement checker, also known as a membership operator. If you provide it an element to seek and a container or series to seek into, it will give True or False, depending on if that given element was located in the given container:</p>\r\n\r\n<ol start=\"1\">\r\n	<li>&lt;an_element&gt;&nbsp;in&nbsp;&lt;a_container&gt;&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p>Testing for a certain character in a string is a nice illustration of how to use the in keyword:</p>\r\n\r\n<p><strong>Code</strong></p>\r\n\r\n<ol start=\"1\">\r\n	<li>container&nbsp;=&nbsp;&quot;Javatpoint&quot;&nbsp;&nbsp;</li>\r\n	<li>print(&nbsp;&quot;p&quot;&nbsp;in&nbsp;container&nbsp;)&nbsp;&nbsp;</li>\r\n	<li>print(&nbsp;&quot;P&quot;&nbsp;in&nbsp;container&nbsp;)&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p><strong>Output:</strong></p>\r\n\r\n<pre>\r\nTrue\r\nFalse\r\n</pre>\r\n\r\n<p>Lists, dictionaries, tuples, strings, or any data type with the method __contains__(), or we can iterate over it will work with the in keyword.</p>\r\n\r\n<p><strong>The is Keyword</strong></p>\r\n\r\n<p>In Python, it&#39;s used to check the identification of objects. The == operation is used to determine whether two arguments are identical. It also determines whether two arguments relate to the unique object.</p>\r\n\r\n<p>When the objects are the same, it gives True; otherwise, it gives False.</p>\r\n\r\n<p><strong>Code</strong></p>\r\n\r\n<ol start=\"1\">\r\n	<li>print(&nbsp;True&nbsp;is&nbsp;True&nbsp;)&nbsp;&nbsp;</li>\r\n	<li>print(&nbsp;False&nbsp;is&nbsp;True&nbsp;)&nbsp;&nbsp;</li>\r\n	<li>print(&nbsp;None&nbsp;is&nbsp;not&nbsp;None&nbsp;)&nbsp;&nbsp;</li>\r\n	<li>print(&nbsp;(9&nbsp;+&nbsp;5)&nbsp;is&nbsp;(7&nbsp;*&nbsp;2)&nbsp;)&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p><strong>Output:</strong></p>\r\n\r\n<pre>\r\nTrue\r\nFalse\r\nFalse\r\nTrue\r\n</pre>\r\n\r\n<p>True, False, and None are all the same in Python since there is just one version.</p>\r\n\r\n<p><strong>Code</strong></p>\r\n\r\n<ol start=\"1\">\r\n	<li>print(&nbsp;[]&nbsp;==&nbsp;[]&nbsp;)&nbsp;&nbsp;</li>\r\n	<li>print(&nbsp;[]&nbsp;is&nbsp;[]&nbsp;)&nbsp;&nbsp;</li>\r\n	<li>print(&nbsp;{}&nbsp;==&nbsp;{}&nbsp;)&nbsp;&nbsp;</li>\r\n	<li>print(&nbsp;{}&nbsp;is&nbsp;{}&nbsp;)&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p><strong>Output:</strong></p>\r\n\r\n<pre>\r\nTrue\r\nFalse\r\nTrue\r\nFalse\r\n</pre>\r\n\r\n<p>A blank dictionary or list is the same as another blank one. However, they aren&#39;t identical entities because they are stored independently in memory. This is because both the list and the dictionary are changeable.</p>\r\n\r\n<p><strong>Code</strong></p>\r\n\r\n<ol start=\"1\">\r\n	<li>print(&nbsp;&#39;&#39;&nbsp;==&nbsp;&#39;&#39;&nbsp;)&nbsp;&nbsp;</li>\r\n	<li>print(&nbsp;&#39;&#39;&nbsp;is&nbsp;&#39;&#39;&nbsp;)&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p><strong>Output:</strong></p>\r\n\r\n<pre>\r\nTrue\r\nTrue\r\n</pre>\r\n\r\n<p>Strings and tuples, unlike lists and dictionaries, are unchangeable. As a result, two equal strings or tuples are also identical. They&#39;re both referring to the unique memory region.</p>\r\n\r\n<h3>The nonlocal Keyword</h3>\r\n\r\n<p>Nonlocal keyword usage is fairly analogous to global keyword usage. The keyword nonlocal is designed to indicate that a variable within a function that is inside a function, i.e., a nested function is just not local to it, implying that it is located in the outer function. We must define a non-local parameter with nonlocal if we ever need to change its value under a nested function. Otherwise, the nested function creates a local variable using that title. The example below will assist us in clarifying this.</p>\r\n\r\n<p><strong>Code</strong></p>\r\n\r\n<ol start=\"1\">\r\n	<li>def&nbsp;the_outer_function():&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;=&nbsp;10&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;def&nbsp;the_inner_function():&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;nonlocal&nbsp;var&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;=&nbsp;14&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;print(&quot;The&nbsp;value&nbsp;inside&nbsp;the&nbsp;inner&nbsp;function:&nbsp;&quot;,&nbsp;var)&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;the_inner_function()&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;print(&quot;The&nbsp;value&nbsp;inside&nbsp;the&nbsp;outer&nbsp;function:&nbsp;&quot;,&nbsp;var)&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;</li>\r\n	<li>the_outer_function()&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p><strong>Output:</strong></p>\r\n\r\n<pre>\r\nThe value inside the inner function:  14\r\nThe value inside the outer function:  14\r\n</pre>\r\n\r\n<p>the_inner_function() is placed inside the_outer_function in this case.</p>\r\n\r\n<p>The the_outer_function has a variable named var. Var is not a global variable, as you may have noticed. As a result, if we wish to change it inside the the_inner_function(), we should declare it using nonlocal.</p>\r\n\r\n<p>As a result, the variable was effectively updated within the nested the_inner_function, as evidenced by the results. The following is what happens if you don&#39;t use the nonlocal keyword:</p>\r\n\r\n<p><strong>Code</strong></p>\r\n\r\n<ol start=\"1\">\r\n	<li>def&nbsp;the_outer_function():&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;=&nbsp;10&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;def&nbsp;the_inner_function():&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;=&nbsp;14&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;print(&quot;Value&nbsp;inside&nbsp;the&nbsp;inner&nbsp;function:&nbsp;&quot;,&nbsp;var)&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;the_inner_function()&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;print(&quot;Value&nbsp;inside&nbsp;the&nbsp;outer&nbsp;function:&nbsp;&quot;,&nbsp;var)&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;</li>\r\n	<li>the_outer_function()&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p><strong>Output:</strong></p>\r\n\r\n<pre>\r\nValue inside the inner function:  14\r\nValue inside the outer function:  10\r\n</pre>\r\n\r\n<h3>Iteration Keywords: for, while, break, continue</h3>\r\n\r\n<p>The iterative process and looping are essential programming fundamentals. To generate and operate with loops, Python has multiple keywords. These would be utilized and observed in almost every Python program. Knowing how to use them correctly can assist you in becoming a better Python developer.</p>\r\n\r\n<p><strong>The for Keyword</strong></p>\r\n\r\n<p>The for loop is by far the most popular loop in Python. It&#39;s built by blending two Python keywords. They are for and in, as previously explained.</p>\r\n\r\n<p><strong>The while Keyword</strong></p>\r\n\r\n<p>Python&#39;s while loop employs the term while and functions similarly to other computer languages&#39; while loops. The block after the while phrase will be repeated repeatedly until the condition following the while keyword is false.</p>\r\n\r\n<p><strong>The break Keyword</strong></p>\r\n\r\n<p>If you want to quickly break out of a loop, employ the break keyword. We can use this keyword in both for and while loops.</p>\r\n\r\n<p><strong>The continue Keyword</strong></p>\r\n\r\n<p>You can use the continue Python keyword if you wish to jump to the subsequent loop iteration. The continue keyword, as in many other computer languages, enables you to quit performing the present loop iteration and go on to the subsequent one.</p>\r\n\r\n<p><strong>Code</strong></p>\r\n\r\n<ol start=\"1\">\r\n	<li>#&nbsp;Program&nbsp;to&nbsp;show&nbsp;the&nbsp;use&nbsp;of&nbsp;keywords&nbsp;for,&nbsp;while,&nbsp;break,&nbsp;continue&nbsp;&nbsp;</li>\r\n	<li>for&nbsp;i&nbsp;in&nbsp;range(15):&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;print(&nbsp;i&nbsp;+&nbsp;4,&nbsp;end&nbsp;=&nbsp;&quot;&nbsp;&quot;)&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;#&nbsp;breaking&nbsp;the&nbsp;loop&nbsp;when&nbsp;i&nbsp;=&nbsp;9&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;i&nbsp;==&nbsp;9:&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>print()&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>#&nbsp;looping&nbsp;from&nbsp;1&nbsp;to&nbsp;15&nbsp;&nbsp;</li>\r\n	<li>i&nbsp;=&nbsp;0&nbsp;#&nbsp;initial&nbsp;condition&nbsp;&nbsp;</li>\r\n	<li>while&nbsp;i&nbsp;&lt;&nbsp;15:&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;#&nbsp;When&nbsp;i&nbsp;has&nbsp;value&nbsp;9,&nbsp;loop&nbsp;will&nbsp;jump&nbsp;to&nbsp;next&nbsp;iteration&nbsp;using&nbsp;continue.&nbsp;It&nbsp;will&nbsp;not&nbsp;print&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;i&nbsp;==&nbsp;9:&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;i&nbsp;+=&nbsp;3&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;continue&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;else:&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#&nbsp;when&nbsp;i&nbsp;is&nbsp;not&nbsp;equal&nbsp;to&nbsp;9,&nbsp;adding&nbsp;2&nbsp;and&nbsp;printing&nbsp;the&nbsp;value&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;print(&nbsp;i&nbsp;+&nbsp;2,&nbsp;end&nbsp;=&nbsp;&quot;&nbsp;&quot;)&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;i&nbsp;+=&nbsp;1&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p><strong>Output:</strong></p>\r\n\r\n<pre>\r\n4 5 6 7 8 9 10 11 12 13 \r\n2 3 4 5 6 7 8 9 10 14 15 16 \r\n</pre>\r\n\r\n<h3>Exception Handling Keywords - try, except, raise, finally, and assert</h3>\r\n\r\n<p><strong>try:</strong>&nbsp;This keyword is designed to handle exceptions and is used in conjunction with the keyword except to handle problems in the program. When there is some kind of error, the program inside the &quot;try&quot; block is verified, but the code in that block is not executed.</p>\r\n\r\n<p><strong>except:</strong>&nbsp;As previously stated, this operates in conjunction with &quot;try&quot; to handle exceptions.</p>\r\n\r\n<p><strong>finally:</strong>&nbsp;Whatever the outcome of the &quot;try&quot; section, the &quot;finally&quot; box is implemented every time.</p>\r\n\r\n<p><strong>raise:</strong>&nbsp;The raise keyword could be used to specifically raise an exception.</p>\r\n\r\n<p><strong>assert:</strong>&nbsp;This method is used to help in troubleshooting. Often used to ensure that code is correct. Nothing occurs if an expression is interpreted as true; however, if it is false, &quot;AssertionError&quot; is raised. An output with the error, followed by a comma, can also be printed.</p>\r\n\r\n<p><strong>Code</strong></p>\r\n\r\n<ol start=\"1\">\r\n	<li>#&nbsp;initializing&nbsp;the&nbsp;numbers&nbsp;&nbsp;</li>\r\n	<li>var1&nbsp;=&nbsp;4&nbsp;&nbsp;</li>\r\n	<li>var2&nbsp;=&nbsp;0&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>#&nbsp;Exception&nbsp;raised&nbsp;in&nbsp;the&nbsp;try&nbsp;section&nbsp;&nbsp;</li>\r\n	<li>try:&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;d&nbsp;=&nbsp;var1&nbsp;//&nbsp;var2&nbsp;#&nbsp;this&nbsp;will&nbsp;raise&nbsp;a&nbsp;&quot;divide&nbsp;by&nbsp;zero&quot;&nbsp;exception.&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;print(&nbsp;d&nbsp;)&nbsp;&nbsp;</li>\r\n	<li>#&nbsp;this&nbsp;section&nbsp;will&nbsp;handle&nbsp;exception&nbsp;raised&nbsp;in&nbsp;try&nbsp;block&nbsp;&nbsp;</li>\r\n	<li>except&nbsp;ZeroDivisionError:&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;print(&quot;We&nbsp;cannot&nbsp;divide&nbsp;by&nbsp;zero&quot;)&nbsp;&nbsp;</li>\r\n	<li>finally:&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;#&nbsp;If&nbsp;exception&nbsp;is&nbsp;raised&nbsp;or&nbsp;not,&nbsp;this&nbsp;block&nbsp;will&nbsp;be&nbsp;executed&nbsp;every&nbsp;time&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;print(&quot;This&nbsp;is&nbsp;inside&nbsp;finally&nbsp;block&quot;)&nbsp;&nbsp;</li>\r\n	<li>#&nbsp;by&nbsp;using&nbsp;assert&nbsp;keyword&nbsp;we&nbsp;will&nbsp;check&nbsp;if&nbsp;var2&nbsp;is&nbsp;0&nbsp;&nbsp;</li>\r\n	<li>print&nbsp;(&quot;The&nbsp;value&nbsp;of&nbsp;var1&nbsp;/&nbsp;var2&nbsp;is&nbsp;:&nbsp;&quot;)&nbsp;&nbsp;</li>\r\n	<li>assert&nbsp;var2&nbsp;!=&nbsp;0,&nbsp;&quot;Divide&nbsp;by&nbsp;0&nbsp;error&quot;&nbsp;&nbsp;</li>\r\n	<li>print&nbsp;(var1&nbsp;/&nbsp;var2)&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p><strong>Output:</strong></p>\r\n\r\n<pre>\r\nWe cannot divide by zero\r\nThis is inside finally block\r\nThe value of var1 / var2 is : \r\n---------------------------------------------------------------------------\r\nAssertionError                            Traceback (most recent call last)\r\nInput In [44], in ()\r\n     15 # by using assert keyword we will check if var2 is 0\r\n     16 print (&quot;The value of var1 / var2 is : &quot;)\r\n---&gt; 17 assert var2 != 0, &quot;Divide by 0 error&quot;\r\n     18 print (var1 / var2)\r\n\r\nAssertionError: Divide by 0 error\r\n</pre>\r\n\r\n<h3>The pass Keyword</h3>\r\n\r\n<p>In Python, a null sentence is called a pass. It serves as a stand-in for something else. When it is run, nothing occurs.</p>\r\n\r\n<p>Let&#39;s say we possess a function that has not been coded yet however we wish to do so in the long term. If we write just this in the middle of code,</p>\r\n\r\n<p><strong>Code</strong></p>\r\n\r\n<ol start=\"1\">\r\n	<li>def&nbsp;function_pass(&nbsp;arguments&nbsp;):&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p><strong>Output:</strong></p>\r\n\r\n<pre>\r\ndef function_pass( arguments ):\r\n                                   ^\r\nIndentationError: expected an indented block after function definition on line 1\r\n</pre>\r\n\r\n<p>as shown, IndentationError will be thrown. Rather, we use the pass command to create a blank container.</p>\r\n\r\n<p><strong>Code</strong></p>\r\n\r\n<ol start=\"1\">\r\n	<li>def&nbsp;function_pass(&nbsp;arguments&nbsp;):&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;pass&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p>We can use the pass keyword to create an empty class too.</p>\r\n\r\n<p><strong>Code</strong></p>\r\n\r\n<ol start=\"1\">\r\n	<li>class&nbsp;passed_class:&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;pass&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<h3>The return Keyword</h3>\r\n\r\n<p>The return expression is used to leave a function and generate a result.</p>\r\n\r\n<p>The None keyword is returned by default if we don&#39;t specifically return a value. The accompanying example demonstrates this.</p>\r\n\r\n<p><strong>Code</strong></p>\r\n\r\n<ol start=\"1\">\r\n	<li>def&nbsp;func_with_return():&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;=&nbsp;13&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;var&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;</li>\r\n	<li>def&nbsp;func_with_no_return():&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;=&nbsp;10&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;</li>\r\n	<li>print(&nbsp;func_with_return()&nbsp;)&nbsp;&nbsp;</li>\r\n	<li>print(&nbsp;func_with_no_return()&nbsp;)&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p><strong>Output:</strong></p>\r\n\r\n<pre>\r\n13\r\nNone\r\n</pre>\r\n\r\n<h3>The del Keyword</h3>\r\n\r\n<p>The del keyword is used to remove any reference to an object. In Python, every entity is an object. We can use the del command to remove a variable reference.</p>\r\n\r\n<p><strong>Code</strong></p>\r\n\r\n<ol start=\"1\">\r\n	<li>var1&nbsp;=&nbsp;var2&nbsp;=&nbsp;5&nbsp;&nbsp;</li>\r\n	<li>del&nbsp;var1&nbsp;&nbsp;</li>\r\n	<li>print(&nbsp;var2&nbsp;)&nbsp;&nbsp;</li>\r\n	<li>print(&nbsp;var1&nbsp;)&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p><strong>Output:</strong></p>\r\n\r\n<pre>\r\n5\r\n---------------------------------------------------------------------------\r\nNameError                                 Traceback (most recent call last)\r\nInput In [42], in ()\r\n      2 del var1\r\n      3 print( var2 )\r\n----&gt; 4 print( var1 )\r\n\r\nNameError: name &#39;var1&#39; is not defined\r\n</pre>\r\n\r\n<p>We can notice that the variable var1&#39;s reference has been removed. As a result, it&#39;s no longer recognized. However, var2 still exists.</p>\r\n\r\n<p>Deleting entries from a collection like a list or a dictionary is also possible with del:</p>\r\n\r\n<p><strong>Code</strong></p>\r\n\r\n<ol start=\"1\">\r\n	<li>list_&nbsp;=&nbsp;[&#39;A&#39;,&#39;B&#39;,&#39;C&#39;]&nbsp;&nbsp;</li>\r\n	<li>del&nbsp;list_[2]&nbsp;&nbsp;</li>\r\n	<li>print(list_)&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p><strong>Output:</strong></p>\r\n\r\n<pre>\r\n[&#39;A&#39;, &#39;B&#39;]</pre>\r\n', 'PYTHON');
INSERT INTO `courses` (`id`, `topic_name`, `description`, `course_name`) VALUES
(69, 'Python String', '<h1>Python String</h1>\r\n\r\n<p>Till now, we have discussed numbers as the standard data-types in Python. In this section of the tutorial, we will discuss the most popular data type in Python, i.e., string.</p>\r\n\r\n<p>Python string is the collection of the characters surrounded by single quotes, double quotes, or triple quotes. The computer does not understand the characters; internally, it stores manipulated character as the combination of the 0&#39;s and 1&#39;s.</p>\r\n\r\n<p>Each character is encoded in the ASCII or Unicode character. So we can say that Python strings are also called the collection of Unicode characters.</p>\r\n\r\n<p>In Python, strings can be created by enclosing the character or the sequence of characters in the quotes. Python allows us to use single quotes, double quotes, or triple quotes to create the string.</p>\r\n\r\n<p>PlayNext</p>\r\n\r\n<p>Unmute</p>\r\n\r\n<p>Current Time&Acirc;&nbsp;0:00</p>\r\n\r\n<p>/</p>\r\n\r\n<p>Duration&Acirc;&nbsp;18:10</p>\r\n\r\n<p>Loaded:&nbsp;0.37%</p>\r\n\r\n<p>&Acirc;&nbsp;</p>\r\n\r\n<p>Fullscreen</p>\r\n\r\n<p>Backward Skip 10sPlay VideoForward Skip 10s</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Consider the following example in Python to create a string.</p>\r\n\r\n<h3>Syntax:</h3>\r\n\r\n<ol start=\"1\">\r\n	<li>str&nbsp;=&nbsp;&quot;Hi&nbsp;Python&nbsp;!&quot;&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p>Here, if we check the type of the variable&nbsp;<strong>str</strong>&nbsp;using a Python script</p>\r\n\r\n<ol start=\"1\">\r\n	<li>print(type(str)),&nbsp;then&nbsp;it&nbsp;will&nbsp;print&nbsp;a&nbsp;string&nbsp;(str).&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p>In Python, strings are treated as the sequence of characters, which means that Python doesn&#39;t support the character data-type; instead, a single character written as &#39;p&#39; is treated as the string of length 1.</p>\r\n\r\n<h2>Creating String in Python</h2>\r\n\r\n<p>We can create a string by enclosing the characters in single-quotes or double- quotes. Python also provides triple-quotes to represent the string, but it is generally used for multiline string or&nbsp;<strong>docstrings</strong>.</p>\r\n\r\n<ol start=\"1\">\r\n	<li>#Using&nbsp;single&nbsp;quotes&nbsp;&nbsp;</li>\r\n	<li>str1&nbsp;=&nbsp;&#39;Hello&nbsp;Python&#39;&nbsp;&nbsp;</li>\r\n	<li>print(str1)&nbsp;&nbsp;</li>\r\n	<li>#Using&nbsp;double&nbsp;quotes&nbsp;&nbsp;</li>\r\n	<li>str2&nbsp;=&nbsp;&quot;Hello&nbsp;Python&quot;&nbsp;&nbsp;</li>\r\n	<li>print(str2)&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;</li>\r\n	<li>#Using&nbsp;triple&nbsp;quotes&nbsp;&nbsp;</li>\r\n	<li>str3&nbsp;=&nbsp;&#39;&#39;&#39;&#39;&#39;Triple&nbsp;quotes&nbsp;are&nbsp;generally&nbsp;used&nbsp;for&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;represent&nbsp;the&nbsp;multiline&nbsp;or&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;docstring&#39;&#39;&#39;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>print(str3)&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p><strong>Output:</strong></p>\r\n\r\n<pre>\r\nHello Python\r\nHello Python\r\nTriple quotes are generally used for \r\n    represent the multiline or\r\n    docstring\r\n</pre>\r\n\r\n<h2>Strings indexing and splitting</h2>\r\n\r\n<p>Like other languages, the indexing of the Python strings starts from 0. For example, The string &quot;HELLO&quot; is indexed as given in the below figure.</p>\r\n\r\n<p><img alt=\"Python String\" src=\"https://static.javatpoint.com/python/images/strings-indexing-and-splitting.png\" /></p>\r\n\r\n<p>Consider the following example:</p>\r\n\r\n<ol start=\"1\">\r\n	<li>str&nbsp;=&nbsp;&quot;HELLO&quot;&nbsp;&nbsp;</li>\r\n	<li>print(str[0])&nbsp;&nbsp;</li>\r\n	<li>print(str[1])&nbsp;&nbsp;</li>\r\n	<li>print(str[2])&nbsp;&nbsp;</li>\r\n	<li>print(str[3])&nbsp;&nbsp;</li>\r\n	<li>print(str[4])&nbsp;&nbsp;</li>\r\n	<li>#&nbsp;It&nbsp;returns&nbsp;the&nbsp;IndexError&nbsp;because&nbsp;6th&nbsp;index&nbsp;doesn&#39;t&nbsp;exist&nbsp;&nbsp;</li>\r\n	<li>print(str[6])&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p><strong>Output:</strong></p>\r\n\r\n<pre>\r\nH\r\nE\r\nL\r\nL\r\nO\r\nIndexError: string index out of range\r\n</pre>\r\n\r\n<p>As shown in Python, the slice operator [] is used to access the individual characters of the string. However, we can use the : (colon) operator in Python to access the substring from the given string. Consider the following example.</p>\r\n\r\n<p><img alt=\"Python String\" src=\"https://static.javatpoint.com/python/images/strings-indexing-and-splitting2.png\" /></p>\r\n\r\n<p>Here, we must notice that the upper range given in the slice operator is always exclusive i.e., if str = &#39;HELLO&#39; is given, then str[1:3] will always include str[1] = &#39;E&#39;, str[2] = &#39;L&#39; and nothing else.</p>\r\n\r\n<p>Consider the following example:</p>\r\n\r\n<ol start=\"1\">\r\n	<li>#&nbsp;Given&nbsp;String&nbsp;&nbsp;</li>\r\n	<li>str&nbsp;=&nbsp;&quot;JAVATPOINT&quot;&nbsp;&nbsp;</li>\r\n	<li>#&nbsp;Start&nbsp;Oth&nbsp;index&nbsp;to&nbsp;end&nbsp;&nbsp;</li>\r\n	<li>print(str[0:])&nbsp;&nbsp;</li>\r\n	<li>#&nbsp;Starts&nbsp;1th&nbsp;index&nbsp;to&nbsp;4th&nbsp;index&nbsp;&nbsp;</li>\r\n	<li>print(str[1:5])&nbsp;&nbsp;</li>\r\n	<li>#&nbsp;Starts&nbsp;2nd&nbsp;index&nbsp;to&nbsp;3rd&nbsp;index&nbsp;&nbsp;</li>\r\n	<li>print(str[2:4])&nbsp;&nbsp;</li>\r\n	<li>#&nbsp;Starts&nbsp;0th&nbsp;to&nbsp;2nd&nbsp;index&nbsp;&nbsp;</li>\r\n	<li>print(str[:3])&nbsp;&nbsp;</li>\r\n	<li>#Starts&nbsp;4th&nbsp;to&nbsp;6th&nbsp;index&nbsp;&nbsp;</li>\r\n	<li>print(str[4:7])&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p><strong>Output:</strong></p>\r\n\r\n<pre>\r\nJAVATPOINT\r\nAVAT\r\nVA\r\nJAV\r\nTPO\r\n</pre>\r\n\r\n<p>We can do the negative slicing in the string; it starts from the rightmost character, which is indicated as -1. The second rightmost index indicates -2, and so on. Consider the following image.</p>\r\n\r\n<p><img alt=\"Python String\" src=\"https://static.javatpoint.com/python/images/strings-indexing-and-splitting3.png\" /></p>\r\n\r\n<p>Consider the following example</p>\r\n\r\n<ol start=\"1\">\r\n	<li>str&nbsp;=&nbsp;&#39;JAVATPOINT&#39;&nbsp;&nbsp;</li>\r\n	<li>print(str[-1])&nbsp;&nbsp;</li>\r\n	<li>print(str[-3])&nbsp;&nbsp;</li>\r\n	<li>print(str[-2:])&nbsp;&nbsp;</li>\r\n	<li>print(str[-4:-1])&nbsp;&nbsp;</li>\r\n	<li>print(str[-7:-2])&nbsp;&nbsp;</li>\r\n	<li>#&nbsp;Reversing&nbsp;the&nbsp;given&nbsp;string&nbsp;&nbsp;</li>\r\n	<li>print(str[::-1])&nbsp;&nbsp;</li>\r\n	<li>print(str[-12])&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p><strong>Output:</strong></p>\r\n\r\n<pre>\r\nT\r\nI\r\nNT\r\nOIN\r\nATPOI\r\nTNIOPTAVAJ\r\nIndexError: string index out of range\r\n</pre>\r\n\r\n<h2>Reassigning Strings</h2>\r\n\r\n<p>Updating the content of the strings is as easy as assigning it to a new string. The string object doesn&#39;t support item assignment i.e., A string can only be replaced with new string since its content cannot be partially replaced. Strings are immutable in Python.</p>\r\n\r\n<p>Consider the following example.</p>\r\n\r\n<h3>Example 1</h3>\r\n\r\n<ol start=\"1\">\r\n	<li>str&nbsp;=&nbsp;&quot;HELLO&quot;&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>str[0]&nbsp;=&nbsp;&quot;h&quot;&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>print(str)&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p><strong>Output:</strong></p>\r\n\r\n<pre>\r\nTraceback (most recent call last):\r\n  File &quot;12.py&quot;, line 2, in &lt;module&gt;\r\n    str[0] = &quot;h&quot;;\r\nTypeError: &#39;str&#39; object does not support item assignment\r\n</pre>\r\n\r\n<p>However, in example 1, the string&nbsp;<strong>str</strong>&nbsp;can be assigned completely to a new content as specified in the following example.</p>\r\n\r\n<h3>Example 2</h3>\r\n\r\n<ol start=\"1\">\r\n	<li>str&nbsp;=&nbsp;&quot;HELLO&quot;&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>print(str)&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>str&nbsp;=&nbsp;&quot;hello&quot;&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>print(str)&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p><strong>Output:</strong></p>\r\n\r\n<pre>\r\nHELLO\r\nhello  \r\n</pre>\r\n\r\n<h2>Deleting the String</h2>\r\n\r\n<p>As we know that strings are immutable. We cannot delete or remove the characters from the string.&nbsp; But we can delete the entire string using the&nbsp;<strong>del</strong>&nbsp;keyword.</p>\r\n\r\n<ol start=\"1\">\r\n	<li>str&nbsp;=&nbsp;&quot;JAVATPOINT&quot;&nbsp;&nbsp;</li>\r\n	<li>del&nbsp;str[1]&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p><strong>Output:</strong></p>\r\n\r\n<pre>\r\nTypeError: &#39;str&#39; object doesn&#39;t support item deletion\r\n</pre>\r\n\r\n<p>Now we are deleting entire string.</p>\r\n\r\n<ol start=\"1\">\r\n	<li>str1&nbsp;=&nbsp;&quot;JAVATPOINT&quot;&nbsp;&nbsp;</li>\r\n	<li>del&nbsp;str1&nbsp;&nbsp;</li>\r\n	<li>print(str1)&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p><strong>Output:</strong></p>\r\n\r\n<pre>\r\nNameError: name &#39;str1&#39; is not defined\r\n</pre>\r\n\r\n<h2>String Operators</h2>\r\n\r\n<table>\r\n	<tbody>\r\n		<tr>\r\n			<th>Operator</th>\r\n			<th>Description</th>\r\n		</tr>\r\n		<tr>\r\n			<td>+</td>\r\n			<td>It is known as concatenation operator used to join the strings given either side of the operator.</td>\r\n		</tr>\r\n		<tr>\r\n			<td>*</td>\r\n			<td>It is known as repetition operator. It concatenates the multiple copies of the same string.</td>\r\n		</tr>\r\n		<tr>\r\n			<td>[]</td>\r\n			<td>It is known as slice operator. It is used to access the sub-strings of a particular string.</td>\r\n		</tr>\r\n		<tr>\r\n			<td>[:]</td>\r\n			<td>It is known as range slice operator. It is used to access the characters from the specified range.</td>\r\n		</tr>\r\n		<tr>\r\n			<td>in</td>\r\n			<td>It is known as membership operator. It returns if a particular sub-string is present in the specified string.</td>\r\n		</tr>\r\n		<tr>\r\n			<td>not in</td>\r\n			<td>It is also a membership operator and does the exact reverse of in. It returns true if a particular substring is not present in the specified string.</td>\r\n		</tr>\r\n		<tr>\r\n			<td>r/R</td>\r\n			<td>It is used to specify the raw string. Raw strings are used in the cases where we need to print the actual meaning of escape characters such as &quot;C://python&quot;. To define any string as a raw string, the character r or R is followed by the string.</td>\r\n		</tr>\r\n		<tr>\r\n			<td>%</td>\r\n			<td>It is used to perform string formatting. It makes use of the format specifiers used in C programming like %d or %f to map their values in python. We will discuss how formatting is done in python.</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n\r\n<h3>Example</h3>\r\n\r\n<p>Consider the following example to understand the real use of Python operators.</p>\r\n\r\n<ol start=\"1\">\r\n	<li>str&nbsp;=&nbsp;&quot;Hello&quot;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>str1&nbsp;=&nbsp;&quot;&nbsp;world&quot;&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>print(str*3)&nbsp;#&nbsp;prints&nbsp;HelloHelloHello&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>print(str+str1)#&nbsp;prints&nbsp;Hello&nbsp;world&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>print(str[4])&nbsp;#&nbsp;prints&nbsp;o&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>print(str[2:4]);&nbsp;#&nbsp;prints&nbsp;ll&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>print(&#39;w&#39;&nbsp;in&nbsp;str)&nbsp;#&nbsp;prints&nbsp;false&nbsp;as&nbsp;w&nbsp;is&nbsp;not&nbsp;present&nbsp;in&nbsp;str&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>print(&#39;wo&#39;&nbsp;not&nbsp;in&nbsp;str1)&nbsp;#&nbsp;prints&nbsp;false&nbsp;as&nbsp;wo&nbsp;is&nbsp;present&nbsp;in&nbsp;str1.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>print(r&#39;C://python37&#39;)&nbsp;#&nbsp;prints&nbsp;C://python37&nbsp;as&nbsp;it&nbsp;is&nbsp;written&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>print(&quot;The&nbsp;string&nbsp;str&nbsp;:&nbsp;%s&quot;%(str))&nbsp;#&nbsp;prints&nbsp;The&nbsp;string&nbsp;str&nbsp;:&nbsp;Hello&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p><strong>Output:</strong></p>\r\n\r\n<pre>\r\nHelloHelloHello\r\nHello world\r\no\r\nll\r\nFalse\r\nFalse\r\nC://python37\r\nThe string str : Hello\r\n</pre>\r\n\r\n<h2>Python String Formatting</h2>\r\n\r\n<h3>Escape Sequence</h3>\r\n\r\n<p>Let&#39;s suppose we need to write the text as - They said, &quot;Hello what&#39;s going on?&quot;- the given statement can be written in single quotes or double quotes but it will raise the&nbsp;<strong>SyntaxError</strong>&nbsp;as it contains both single and double-quotes.</p>\r\n\r\n<h2>Example</h2>\r\n\r\n<p>Consider the following example to understand the real use of Python operators.</p>\r\n\r\n<ol start=\"1\">\r\n	<li>str&nbsp;=&nbsp;&quot;They&nbsp;said,&nbsp;&quot;Hello&nbsp;what&#39;s&nbsp;going&nbsp;on?&quot;&quot;&nbsp;&nbsp;</li>\r\n	<li>print(str)&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p><strong>Output:</strong></p>\r\n\r\n<pre>\r\nSyntaxError: invalid syntax\r\n</pre>\r\n\r\n<p>We can use the triple quotes to accomplish this problem but Python provides the escape sequence.</p>\r\n\r\n<p>The backslash(/) symbol denotes the escape sequence. The backslash can be followed by a special character and it interpreted differently. The single quotes inside the string must be escaped. We can apply the same as in the double quotes.</p>\r\n\r\n<h3>Example -</h3>\r\n\r\n<ol start=\"1\">\r\n	<li>#&nbsp;using&nbsp;triple&nbsp;quotes&nbsp;&nbsp;</li>\r\n	<li>print(&#39;&#39;&#39;&#39;&#39;They&nbsp;said,&nbsp;&quot;What&#39;s&nbsp;there?&quot;&#39;&#39;&#39;)&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;</li>\r\n	<li>#&nbsp;escaping&nbsp;single&nbsp;quotes&nbsp;&nbsp;</li>\r\n	<li>print(&#39;They&nbsp;said,&nbsp;&quot;What&#39;s&nbsp;going&nbsp;on?&quot;&#39;)&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;</li>\r\n	<li>#&nbsp;escaping&nbsp;double&nbsp;quotes&nbsp;&nbsp;</li>\r\n	<li>print(&quot;They&nbsp;said,&nbsp;&quot;What&#39;s&nbsp;going&nbsp;on?&quot;&quot;)&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p><strong>Output:</strong></p>\r\n\r\n<pre>\r\nThey said, &quot;What&#39;s there?&quot;\r\nThey said, &quot;What&#39;s going on?&quot;\r\nThey said, &quot;What&#39;s going on?&quot;\r\n</pre>\r\n\r\n<p>The list of an escape sequence is given below:</p>\r\n\r\n<table>\r\n	<tbody>\r\n		<tr>\r\n			<th>Sr.</th>\r\n			<th>Escape Sequence</th>\r\n			<th>Description</th>\r\n			<th>Example</th>\r\n		</tr>\r\n		<tr>\r\n			<td>1.</td>\r\n			<td>\newline</td>\r\n			<td>It ignores the new line.</td>\r\n			<td>\r\n			<pre>\r\nprint(&quot;Python1 \r\nPython2 \r\nPython3&quot;)</pre>\r\n			<strong>Output:</strong>\r\n\r\n			<pre>\r\nPython1 Python2 Python3</pre>\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>2.</td>\r\n			<td>\\</td>\r\n			<td>Backslash</td>\r\n			<td>\r\n			<pre>\r\nprint(&quot;\\&quot;)</pre>\r\n			<strong>Output:</strong>\r\n\r\n			<pre>\r\n</pre>\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>3.</td>\r\n			<td>&#39;</td>\r\n			<td>Single Quotes</td>\r\n			<td>\r\n			<pre>\r\nprint(&#39;&#39;&#39;)</pre>\r\n			<strong>Output:</strong>\r\n\r\n			<pre>\r\n&#39;</pre>\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>4.</td>\r\n			<td>\\&#39;&#39;</td>\r\n			<td>Double Quotes</td>\r\n			<td>\r\n			<pre>\r\nprint(&quot;&quot;&quot;)</pre>\r\n			<strong>Output:</strong>\r\n\r\n			<pre>\r\n&quot;</pre>\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>5.</td>\r\n			<td>a</td>\r\n			<td>ASCII Bell</td>\r\n			<td>\r\n			<pre>\r\nprint(&quot;a&quot;)</pre>\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>6.</td>\r\n			<td></td>\r\n			<td>ASCII Backspace(BS)</td>\r\n			<td>\r\n			<pre>\r\nprint(&quot;Hello  World&quot;)</pre>\r\n			<strong>Output:</strong>\r\n\r\n			<pre>\r\nHello World</pre>\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>7.</td>\r\n			<td>f</td>\r\n			<td>ASCII Formfeed</td>\r\n			<td>\r\n			<pre>\r\nprint(&quot;Hello f World!&quot;)\r\nHello  World!</pre>\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>8.</td>\r\n			<td>\n</td>\r\n			<td>ASCII Linefeed</td>\r\n			<td>\r\n			<pre>\r\nprint(&quot;Hello \n World!&quot;)</pre>\r\n			<strong>Output:</strong>\r\n\r\n			<pre>\r\nHello\r\n World!</pre>\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>9.</td>\r\n			<td>\r</td>\r\n			<td>ASCII Carriege Return(CR)</td>\r\n			<td>\r\n			<pre>\r\nprint(&quot;Hello \r World!&quot;)</pre>\r\n			<strong>Output:</strong>\r\n\r\n			<pre>\r\nWorld!</pre>\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>10.</td>\r\n			<td>	</td>\r\n			<td>ASCII Horizontal Tab</td>\r\n			<td>\r\n			<pre>\r\nprint(&quot;Hello 	 World!&quot;)</pre>\r\n			<strong>Output:</strong>\r\n\r\n			<pre>\r\nHello 	 World!</pre>\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>11.</td>\r\n			<td>v</td>\r\n			<td>ASCII Vertical Tab</td>\r\n			<td>\r\n			<pre>\r\nprint(&quot;Hello v World!&quot;)</pre>\r\n			<strong>Output:</strong>\r\n\r\n			<pre>\r\nHello \r\n World!</pre>\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>12.</td>\r\n			<td>ooo</td>\r\n			<td>Character with octal value</td>\r\n			<td>\r\n			<pre>\r\nprint(&quot;110145154154157&quot;)</pre>\r\n\r\n			<pre>\r\n<strong>Output:</strong> </pre>\r\n\r\n			<pre>\r\nHello</pre>\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>13</td>\r\n			<td>xHH</td>\r\n			<td>Character with hex value.</td>\r\n			<td>\r\n			<pre>\r\nprint(&quot;x48x65x6cx6cx6f&quot;)</pre>\r\n			<strong>Output:</strong>\r\n\r\n			<pre>\r\nHello</pre>\r\n			</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n\r\n<p>Here is the simple example of escape sequence.</p>\r\n\r\n<ol start=\"1\">\r\n	<li>print(&quot;C:\\Users\\DEVANSH&nbsp;SHARMA\\Python32\\Lib&quot;)&nbsp;&nbsp;</li>\r\n	<li>print(&quot;This&nbsp;is&nbsp;the&nbsp;\n&nbsp;multiline&nbsp;quotes&quot;)&nbsp;&nbsp;</li>\r\n	<li>print(&quot;This&nbsp;is&nbsp;x48x45x58&nbsp;representation&quot;)&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p><strong>Output:</strong></p>\r\n\r\n<pre>\r\nC:UsersDEVANSH SHARMAPython32Lib\r\nThis is the \r\n multiline quotes\r\nThis is HEX representation\r\n</pre>\r\n\r\n<p>We can ignore the escape sequence from the given string by using the raw string. We can do this by writing&nbsp;<strong>r</strong>&nbsp;or&nbsp;<strong>R</strong>&nbsp;in front of the string. Consider the following example.</p>\r\n\r\n<ol start=\"1\">\r\n	<li>print(r&quot;C:\\Users\\DEVANSH&nbsp;SHARMA\\Python32&quot;)&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p><strong>Output:</strong></p>\r\n\r\n<pre>\r\nC:\\Users\\DEVANSH SHARMA\\Python32\r\n</pre>\r\n\r\n<h2>The format() method</h2>\r\n\r\n<p>The&nbsp;<strong>format()</strong>&nbsp;method is the most flexible and useful method in formatting strings. The curly braces {} are used as the placeholder in the string and replaced by the&nbsp;<strong>format()</strong>&nbsp;method argument. Let&#39;s have a look at the given an example:</p>\r\n\r\n<ol start=\"1\">\r\n	<li>#&nbsp;Using&nbsp;Curly&nbsp;braces&nbsp;&nbsp;</li>\r\n	<li>print(&quot;{}&nbsp;and&nbsp;{}&nbsp;both&nbsp;are&nbsp;the&nbsp;best&nbsp;friend&quot;.format(&quot;Devansh&quot;,&quot;Abhishek&quot;))&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;</li>\r\n	<li>#Positional&nbsp;Argument&nbsp;&nbsp;</li>\r\n	<li>print(&quot;{1}&nbsp;and&nbsp;{0}&nbsp;best&nbsp;players&nbsp;&quot;.format(&quot;Virat&quot;,&quot;Rohit&quot;))&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;</li>\r\n	<li>#Keyword&nbsp;Argument&nbsp;&nbsp;</li>\r\n	<li>print(&quot;{a},{b},{c}&quot;.format(a&nbsp;=&nbsp;&quot;James&quot;,&nbsp;b&nbsp;=&nbsp;&quot;Peter&quot;,&nbsp;c&nbsp;=&nbsp;&quot;Ricky&quot;))&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p><strong>Output:</strong></p>\r\n\r\n<pre>\r\nDevansh and Abhishek both are the best friend\r\nRohit and Virat best players \r\nJames,Peter,Ricky \r\n</pre>\r\n\r\n<h2>Python String Formatting Using % Operator</h2>\r\n\r\n<p>Python allows us to use the format specifiers used in C&#39;s printf statement. The format specifiers in Python are treated in the same way as they are treated in C. However, Python provides an additional operator %, which is used as an interface between the format specifiers and their values. In other words, we can say that it binds the format specifiers to the values.</p>\r\n\r\n<p>Consider the following example.</p>\r\n\r\n<ol start=\"1\">\r\n	<li>Integer&nbsp;=&nbsp;10;&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>Float&nbsp;=&nbsp;1.290&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>String&nbsp;=&nbsp;&quot;Devansh&quot;&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>print(&quot;Hi&nbsp;I&nbsp;am&nbsp;Integer&nbsp;...&nbsp;My&nbsp;value&nbsp;is&nbsp;%d\nHi&nbsp;I&nbsp;am&nbsp;float&nbsp;...&nbsp;My&nbsp;value&nbsp;is&nbsp;%f\nHi&nbsp;I&nbsp;am&nbsp;string&nbsp;...&nbsp;My&nbsp;value&nbsp;is&nbsp;%s&quot;%(Integer,Float,String))&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p><strong>Output:</strong></p>\r\n\r\n<pre>\r\nHi I am Integer ... My value is 10\r\nHi I am float ... My value is 1.290000\r\nHi I am string ... My value is Devansh\r\n</pre>\r\n\r\n<hr />\r\n<h2>Python String functions</h2>\r\n\r\n<p>Python provides various in-built functions that are used for string handling. Many String fun</p>\r\n\r\n<table>\r\n	<tbody>\r\n		<tr>\r\n			<th>Method</th>\r\n			<th>Description</th>\r\n		</tr>\r\n		<tr>\r\n			<td><a href=\"https://www.javatpoint.com/python-string-capitalize-method\">capitalize()</a></td>\r\n			<td>It capitalizes the first character of the String. This function is deprecated in python3</td>\r\n		</tr>\r\n		<tr>\r\n			<td><a href=\"https://www.javatpoint.com/python-string-casefold-method\">casefold()</a></td>\r\n			<td>It returns a version of s suitable for case-less comparisons.</td>\r\n		</tr>\r\n		<tr>\r\n			<td><a href=\"https://www.javatpoint.com/python-string-center-method\">center(width ,fillchar)</a></td>\r\n			<td>It returns a space padded string with the original string centred with equal number of left and right spaces.</td>\r\n		</tr>\r\n		<tr>\r\n			<td><a href=\"https://www.javatpoint.com/python-string-count-method\">count(string,begin,end)</a></td>\r\n			<td>It counts the number of occurrences of a substring in a String between begin and end index.</td>\r\n		</tr>\r\n		<tr>\r\n			<td>decode(encoding = &#39;UTF8&#39;, errors = &#39;strict&#39;)</td>\r\n			<td>Decodes the string using codec registered for encoding.</td>\r\n		</tr>\r\n		<tr>\r\n			<td><a href=\"https://www.javatpoint.com/python-string-encode-method\">encode()</a></td>\r\n			<td>Encode S using the codec registered for encoding. Default encoding is &#39;utf-8&#39;.</td>\r\n		</tr>\r\n		<tr>\r\n			<td><a href=\"https://www.javatpoint.com/python-string-endswith-method\">endswith(suffix ,begin=0,end=len(string))</a></td>\r\n			<td>It returns a Boolean value if the string terminates with given suffix between begin and end.</td>\r\n		</tr>\r\n		<tr>\r\n			<td><a href=\"https://www.javatpoint.com/python-string-expandtabs-method\">expandtabs(tabsize = 8)</a></td>\r\n			<td>It defines tabs in string to multiple spaces. The default space value is 8.</td>\r\n		</tr>\r\n		<tr>\r\n			<td><a href=\"https://www.javatpoint.com/python-string-find-method\">find(substring ,beginIndex, endIndex)</a></td>\r\n			<td>It returns the index value of the string where substring is found between begin index and end index.</td>\r\n		</tr>\r\n		<tr>\r\n			<td><a href=\"https://www.javatpoint.com/python-string-format-method\">format(value)</a></td>\r\n			<td>It returns a formatted version of S, using the passed value.</td>\r\n		</tr>\r\n		<tr>\r\n			<td><a href=\"https://www.javatpoint.com/python-string-index-method\">index(subsring, beginIndex, endIndex)</a></td>\r\n			<td>It throws an exception if string is not found. It works same as find() method.</td>\r\n		</tr>\r\n		<tr>\r\n			<td><a href=\"https://www.javatpoint.com/python-string-isalnum-method\">isalnum()</a></td>\r\n			<td>It returns true if the characters in the string are alphanumeric i.e., alphabets or numbers and there is at least 1 character. Otherwise, it returns false.</td>\r\n		</tr>\r\n		<tr>\r\n			<td><a href=\"https://www.javatpoint.com/python-string-isalpha-method\">isalpha()</a></td>\r\n			<td>It returns true if all the characters are alphabets and there is at least one character, otherwise False.</td>\r\n		</tr>\r\n		<tr>\r\n			<td><a href=\"https://www.javatpoint.com/python-string-isdecimal-method\">isdecimal()</a></td>\r\n			<td>It returns true if all the characters of the string are decimals.</td>\r\n		</tr>\r\n		<tr>\r\n			<td><a href=\"https://www.javatpoint.com/python-string-isdigit-method\">isdigit()</a></td>\r\n			<td>It returns true if all the characters are digits and there is at least one character, otherwise False.</td>\r\n		</tr>\r\n		<tr>\r\n			<td><a href=\"https://www.javatpoint.com/python-string-isidentifier-method\">isidentifier()</a></td>\r\n			<td>It returns true if the string is the valid identifier.</td>\r\n		</tr>\r\n		<tr>\r\n			<td><a href=\"https://www.javatpoint.com/python-string-islower-method\">islower()</a></td>\r\n			<td>It returns true if the characters of a string are in lower case, otherwise false.</td>\r\n		</tr>\r\n		<tr>\r\n			<td><a href=\"https://www.javatpoint.com/python-string-isnumeric-method\">isnumeric()</a></td>\r\n			<td>It returns true if the string contains only numeric characters.</td>\r\n		</tr>\r\n		<tr>\r\n			<td><a href=\"https://www.javatpoint.com/python-string-isprintable-method\">isprintable()</a></td>\r\n			<td>It returns true if all the characters of s are printable or s is empty, false otherwise.</td>\r\n		</tr>\r\n		<tr>\r\n			<td><a href=\"https://www.javatpoint.com/python-string-isupper-method\">isupper()</a></td>\r\n			<td>It returns false if characters of a string are in Upper case, otherwise False.</td>\r\n		</tr>\r\n		<tr>\r\n			<td><a href=\"https://www.javatpoint.com/python-string-isspace-method\">isspace()</a></td>\r\n			<td>It returns true if the characters of a string are white-space, otherwise false.</td>\r\n		</tr>\r\n		<tr>\r\n			<td><a href=\"https://www.javatpoint.com/python-string-istitle-method\">istitle()</a></td>\r\n			<td>It returns true if the string is titled properly and false otherwise. A title string is the one in which the first character is upper-case whereas the other characters are lower-case.</td>\r\n		</tr>\r\n		<tr>\r\n			<td><a href=\"https://www.javatpoint.com/python-string-isupper-method\">isupper()</a></td>\r\n			<td>It returns true if all the characters of the string(if exists) is true otherwise it returns false.</td>\r\n		</tr>\r\n		<tr>\r\n			<td><a href=\"https://www.javatpoint.com/python-string-join-method\">join(seq)</a></td>\r\n			<td>It merges the strings representation of the given sequence.</td>\r\n		</tr>\r\n		<tr>\r\n			<td>len(string)</td>\r\n			<td>It returns the length of a string.</td>\r\n		</tr>\r\n		<tr>\r\n			<td><a href=\"https://www.javatpoint.com/python-string-ljust-method\">ljust(width[,fillchar])</a></td>\r\n			<td>It returns the space padded strings with the original string left justified to the given width.</td>\r\n		</tr>\r\n		<tr>\r\n			<td><a href=\"https://www.javatpoint.com/python-string-lower-method\">lower()</a></td>\r\n			<td>It converts all the characters of a string to Lower case.</td>\r\n		</tr>\r\n		<tr>\r\n			<td><a href=\"https://www.javatpoint.com/python-string-lstrip-method\">lstrip()</a></td>\r\n			<td>It removes all leading whitespaces of a string and can also be used to remove particular character from leading.</td>\r\n		</tr>\r\n		<tr>\r\n			<td><a href=\"https://www.javatpoint.com/python-string-partition-method\">partition()</a></td>\r\n			<td>It searches for the separator sep in S, and returns the part before it, the separator itself, and the part after it. If the separator is not found, return S and two empty strings.</td>\r\n		</tr>\r\n		<tr>\r\n			<td>maketrans()</td>\r\n			<td>It returns a translation table to be used in translate function.</td>\r\n		</tr>\r\n		<tr>\r\n			<td><a href=\"https://www.javatpoint.com/python-string-replace-method\">replace(old,new[,count])</a></td>\r\n			<td>It replaces the old sequence of characters with the new sequence. The max characters are replaced if max is given.</td>\r\n		</tr>\r\n		<tr>\r\n			<td><a href=\"https://www.javatpoint.com/python-string-rfind-method\">rfind(str,beg=0,end=len(str))</a></td>\r\n			<td>It is similar to find but it traverses the string in backward direction.</td>\r\n		</tr>\r\n		<tr>\r\n			<td><a href=\"https://www.javatpoint.com/python-string-rindex-method\">rindex(str,beg=0,end=len(str))</a></td>\r\n			<td>It is same as index but it traverses the string in backward direction.</td>\r\n		</tr>\r\n		<tr>\r\n			<td><a href=\"https://www.javatpoint.com/python-string-rjust-method\">rjust(width,[,fillchar])</a></td>\r\n			<td>Returns a space padded string having original string right justified to the number of characters specified.</td>\r\n		</tr>\r\n		<tr>\r\n			<td><a href=\"https://www.javatpoint.com/python-string-rstrip-method\">rstrip()</a></td>\r\n			<td>It removes all trailing whitespace of a string and can also be used to remove particular character from trailing.</td>\r\n		</tr>\r\n		<tr>\r\n			<td><a href=\"https://www.javatpoint.com/python-string-rsplit-method\">rsplit(sep=None, maxsplit = -1)</a></td>\r\n			<td>It is same as split() but it processes the string from the backward direction. It returns the list of words in the string. If Separator is not specified then the string splits according to the white-space.</td>\r\n		</tr>\r\n		<tr>\r\n			<td><a href=\"https://www.javatpoint.com/python-string-split-method\">split(str,num=string.count(str))</a></td>\r\n			<td>Splits the string according to the delimiter str. The string splits according to the space if the delimiter is not provided. It returns the list of substring concatenated with the delimiter.</td>\r\n		</tr>\r\n		<tr>\r\n			<td><a href=\"https://www.javatpoint.com/python-string-splitlines-method\">splitlines(num=string.count(&#39;\n&#39;))</a></td>\r\n			<td>It returns the list of strings at each line with newline removed.</td>\r\n		</tr>\r\n		<tr>\r\n			<td><a href=\"https://www.javatpoint.com/python-string-startswith-method\">startswith(str,beg=0,end=len(str))</a></td>\r\n			<td>It returns a Boolean value if the string starts with given str between begin and end.</td>\r\n		</tr>\r\n		<tr>\r\n			<td>strip([chars])</td>\r\n			<td>It is used to perform lstrip() and rstrip() on the string.</td>\r\n		</tr>\r\n		<tr>\r\n			<td><a href=\"https://www.javatpoint.com/python-string-swapcase-method\">swapcase()</a></td>\r\n			<td>It inverts case of all characters in a string.</td>\r\n		</tr>\r\n		<tr>\r\n			<td>title()</td>\r\n			<td>It is used to convert the string into the title-case i.e., The string&nbsp;<strong>meEruT</strong>&nbsp;will be converted to Meerut.</td>\r\n		</tr>\r\n		<tr>\r\n			<td><a href=\"https://www.javatpoint.com/python-string-translate-method\">translate(table,deletechars = &#39;&#39;)</a></td>\r\n			<td>It translates the string according to the translation table passed in the function .</td>\r\n		</tr>\r\n		<tr>\r\n			<td><a href=\"https://www.javatpoint.com/python-string-upper-method\">upper()</a></td>\r\n			<td>It converts all the characters of a string to Upper Case.</td>\r\n		</tr>\r\n		<tr>\r\n			<td><a href=\"https://www.javatpoint.com/python-string-zfill-method\">zfill(width)</a></td>\r\n			<td>Returns original string leftpadded with zeros to a total of width characters; intended for numbers, zfill() retains any sign given (less one zero).</td>\r\n		</tr>\r\n		<tr>\r\n			<td><a href=\"https://www.javatpoint.com/python-string-rpartition-method\">rpartition()</a></td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n', 'PYTHON');
INSERT INTO `courses` (`id`, `topic_name`, `description`, `course_name`) VALUES
(70, 'Python List', '<h1>Python List</h1>\r\n\r\n<p>A list in Python is used to store the sequence of various types of data. A list can be defined as a collection of values or items of different types. Python lists are mutable type which implies that we may modify its element after it has been formed. The items in the list are separated with the comma (,) and enclosed with the square brackets [].</p>\r\n\r\n<p>Although Python has six data types that may hold sequences, the list is the most popular and dependable form. The collection of data is stored in a list, a sequence data type. Similar sequence data formats are Tuples and String.</p>\r\n\r\n<p>Python lists are identical to dynamically scaled arrays that are specified in other languages, such as Java&#39;s ArrayList and C++&#39;s vector. A list is a group of items that are denoted by the symbol [] and subdivided by commas.</p>\r\n\r\n<h2>List Declaration</h2>\r\n\r\n<p><strong>Code</strong></p>\r\n\r\n<p>Backward Skip 10sPlay VideoForward Skip 10s</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><iframe height=\"225\" id=\"goog_722077369\" src=\"https://imasdk.googleapis.com/js/core/bridge3.572.0_en.html#goog_722077369\" width=\"400\"></iframe></p>\r\n\r\n<ol start=\"1\">\r\n	<li>#&nbsp;a&nbsp;simple&nbsp;list&nbsp;&nbsp;&nbsp;</li>\r\n	<li>list1&nbsp;=&nbsp;[1,&nbsp;2,&nbsp;&quot;Python&quot;,&nbsp;&quot;Program&quot;,&nbsp;15.9]&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>list2&nbsp;=&nbsp;[&quot;Amy&quot;,&nbsp;&quot;Ryan&quot;,&nbsp;&quot;Henry&quot;,&nbsp;&quot;Emma&quot;]&nbsp;&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;</li>\r\n	<li>#&nbsp;printing&nbsp;the&nbsp;list&nbsp;&nbsp;</li>\r\n	<li>print(list1)&nbsp;&nbsp;</li>\r\n	<li>print(list2)&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;</li>\r\n	<li>#&nbsp;printing&nbsp;the&nbsp;type&nbsp;of&nbsp;list&nbsp;&nbsp;</li>\r\n	<li>print(type(list1))&nbsp;&nbsp;</li>\r\n	<li>print(type(list2))&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p><strong>Output:</strong></p>\r\n\r\n<pre>\r\n[1, 2, &#39;Python&#39;, &#39;Program&#39;, 15.9]\r\n[&#39;Amy&#39;, &#39;Ryan&#39;, &#39;Henry&#39;, &#39;Emma&#39;]\r\n&lt; class &#39; list &#39; &gt;\r\n&lt; class &#39; list &#39; &gt;\r\n</pre>\r\n\r\n<h2>Characteristics of Lists</h2>\r\n\r\n<p>The list has the following characteristics:</p>\r\n\r\n<ul>\r\n	<li>The lists are ordered.</li>\r\n	<li>The element of the list can access by index.</li>\r\n	<li>The lists are the mutable type.</li>\r\n	<li>The lists are mutable types.</li>\r\n	<li>A list can store the number of various elements.</li>\r\n</ul>\r\n\r\n<h3>Ordered List Checking</h3>\r\n\r\n<p><strong>Code</strong></p>\r\n\r\n<ol start=\"1\">\r\n	<li>#&nbsp;example&nbsp;&nbsp;</li>\r\n	<li>a&nbsp;=&nbsp;[&nbsp;1,&nbsp;2,&nbsp;&quot;Ram&quot;,&nbsp;3.50,&nbsp;&quot;Rahul&quot;,&nbsp;5,&nbsp;6&nbsp;]&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>b&nbsp;=&nbsp;[&nbsp;1,&nbsp;2,&nbsp;5,&nbsp;&quot;Ram&quot;,&nbsp;3.50,&nbsp;&quot;Rahul&quot;,&nbsp;6&nbsp;]&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>a&nbsp;==&nbsp;b&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p><strong>Output:</strong></p>\r\n\r\n<pre>\r\nFalse\r\n</pre>\r\n\r\n<p>The identical elements were included in both lists, but the second list modified the index position of the fifth element, which is against the lists&#39; intended order. When the two lists are compared, false is returned.</p>\r\n\r\n<p><strong>Code</strong></p>\r\n\r\n<ol start=\"1\">\r\n	<li>#&nbsp;example&nbsp;&nbsp;</li>\r\n	<li>a&nbsp;=&nbsp;[&nbsp;1,&nbsp;2,&nbsp;&quot;Ram&quot;,&nbsp;3.50,&nbsp;&quot;Rahul&quot;,&nbsp;5,&nbsp;6]&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>b&nbsp;=&nbsp;[&nbsp;1,&nbsp;2,&nbsp;&quot;Ram&quot;,&nbsp;3.50,&nbsp;&quot;Rahul&quot;,&nbsp;5,&nbsp;6]&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>a&nbsp;==&nbsp;b&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p><strong>Output:</strong></p>\r\n\r\n<pre>\r\nTrue\r\n</pre>\r\n\r\n<p>Lists permanently preserve the element&#39;s order. It is the arranged gathering of things because of this.</p>\r\n\r\n<p>Let&#39;s have a look at the list example in detail.</p>\r\n\r\n<p><strong>Code</strong></p>\r\n\r\n<ol start=\"1\">\r\n	<li>#&nbsp;list&nbsp;example&nbsp;in&nbsp;detail&nbsp;&nbsp;</li>\r\n	<li>emp&nbsp;=&nbsp;[&nbsp;&quot;John&quot;,&nbsp;102,&nbsp;&quot;USA&quot;]&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>Dep1&nbsp;=&nbsp;[&nbsp;&quot;CS&quot;,10]&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>Dep2&nbsp;=&nbsp;[&nbsp;&quot;IT&quot;,11]&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>HOD_CS&nbsp;=&nbsp;[&nbsp;10,&quot;Mr.&nbsp;Holding&quot;]&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>HOD_IT&nbsp;=&nbsp;[11,&nbsp;&quot;Mr.&nbsp;Bewon&quot;]&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>print(&quot;printing&nbsp;employee&nbsp;data&nbsp;...&quot;)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>print(&quot;&nbsp;Name&nbsp;:&nbsp;%s,&nbsp;ID:&nbsp;%d,&nbsp;Country:&nbsp;%s&quot;&nbsp;%(emp[0],&nbsp;emp[1],&nbsp;emp[2]))&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>print(&quot;printing&nbsp;departments&nbsp;...&quot;)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>print(&quot;Department&nbsp;1:\nName:&nbsp;%s,&nbsp;ID:&nbsp;%d\n&nbsp;Department&nbsp;2:\n&nbsp;Name:&nbsp;%s,&nbsp;ID:&nbsp;%s&quot;%(&nbsp;Dep1[0],&nbsp;Dep2[1],&nbsp;Dep2[0],&nbsp;Dep2[1]))&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>print(&quot;HOD&nbsp;Details&nbsp;....&quot;)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>print(&quot;CS&nbsp;HOD&nbsp;Name:&nbsp;%s,&nbsp;Id:&nbsp;%d&quot;&nbsp;%(HOD_CS[1],&nbsp;HOD_CS[0]))&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>print(&quot;IT&nbsp;HOD&nbsp;Name:&nbsp;%s,&nbsp;Id:&nbsp;%d&quot;&nbsp;%(HOD_IT[1],&nbsp;HOD_IT[0]))&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>print(type(emp),&nbsp;type(Dep1),&nbsp;type(Dep2),&nbsp;type(HOD_CS),&nbsp;type(HOD_IT))&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p><strong>Output:</strong></p>\r\n\r\n<pre>\r\nprinting employee data...\r\nName : John, ID: 102, Country: USA\r\nprinting departments...\r\nDepartment 1:\r\nName: CS, ID: 11\r\nDepartment 2:\r\nName: IT, ID: 11\r\nHOD Details ....\r\nCS HOD Name: Mr. Holding, Id: 10\r\nIT HOD Name: Mr. Bewon, Id: 11\r\n&lt;class &#39; list &#39;&gt; &lt;class &#39; list &#39;&gt; &lt;class &#39; list &#39;&gt; &lt;class &#39; list &#39;&gt; &lt;class &#39; list &#39;&gt;\r\n</pre>\r\n\r\n<p>In the above example, we have created the lists which consist of the employee and department details and printed the corresponding details. Observe the above code to understand the concept of the list better.</p>\r\n\r\n<h2>List Indexing and Splitting</h2>\r\n\r\n<p>The indexing is processed in the same way as it happens with the strings. The elements of the list can be accessed by using the slice operator [].</p>\r\n\r\n<p>The index starts from 0 and goes to length - 1. The first element of the list is stored at the 0th index, the second element of the list is stored at the 1st index, and so on.</p>\r\n\r\n<p><img alt=\"Python List\" src=\"https://static.javatpoint.com/python/images/python-list.png\" /></p>\r\n\r\n<p>We can get the sub-list of the list using the following syntax.</p>\r\n\r\n<ol start=\"1\">\r\n	<li>list_varible(start:stop:step)&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<ul>\r\n	<li>The&nbsp;<strong>start</strong>&nbsp;denotes the starting index position of the list.</li>\r\n	<li>The&nbsp;<strong>stop</strong>&nbsp;denotes the last index position of the list.</li>\r\n	<li>The&nbsp;<strong>step</strong>&nbsp;is used to skip the nth element within a&nbsp;<strong>start:stop</strong></li>\r\n</ul>\r\n\r\n<p>The initial index is represented by the start parameter, the ending index is determined by the step, and also the number of elements which are &quot;stepped&quot; through is the value of the end parameter. In the absence of a specific value for step, the default value equals 1. Inside the resultant SubList, the item also with index start would be present, but the one with the index finish will not. A list&#39;s initial element seems to have the index of 0.</p>\r\n\r\n<p>Consider the following example:</p>\r\n\r\n<p><strong>Code</strong></p>\r\n\r\n<ol start=\"1\">\r\n	<li>list&nbsp;=&nbsp;[1,2,3,4,5,6,7]&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>print(list[0])&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>print(list[1])&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>print(list[2])&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>print(list[3])&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>#&nbsp;Slicing&nbsp;the&nbsp;elements&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>print(list[0:6])&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>#&nbsp;By&nbsp;default,&nbsp;the&nbsp;index&nbsp;value&nbsp;is&nbsp;0&nbsp;so&nbsp;its&nbsp;starts&nbsp;from&nbsp;the&nbsp;0th&nbsp;element&nbsp;and&nbsp;go&nbsp;for&nbsp;index&nbsp;-1.&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>print(list[:])&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>print(list[2:5])&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>print(list[1:6:2])&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p><strong>Output:</strong></p>\r\n\r\n<pre>\r\n1\r\n2\r\n3\r\n4\r\n[1, 2, 3, 4, 5, 6]\r\n[1, 2, 3, 4, 5, 6, 7]\r\n[3, 4, 5]\r\n[2, 4, 6]\r\n</pre>\r\n\r\n<p>In contrast to other languages, Python gives you the option to employ negative indexing as well. From the right, the negative indices are counted. The final element on the right-hand side of the list is represented by the index -1, followed by the next member on the left at the index -2, and so on until the last element on the left is reached.</p>\r\n\r\n<p><img alt=\"Python List\" src=\"https://static.javatpoint.com/python/images/python-list2.png\" /></p>\r\n\r\n<p>Let&#39;s have a look at the following example where we will use negative indexing to access the elements of the list.</p>\r\n\r\n<p><strong>Code</strong></p>\r\n\r\n<ol start=\"1\">\r\n	<li>#&nbsp;negative&nbsp;indexing&nbsp;example&nbsp;&nbsp;</li>\r\n	<li>list&nbsp;=&nbsp;[1,2,3,4,5]&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>print(list[-1])&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>print(list[-3:])&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>print(list[:-1])&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>print(list[-3:-1])&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p><strong>Output:</strong></p>\r\n\r\n<pre>\r\n5\r\n[3, 4, 5]\r\n[1, 2, 3, 4]\r\n[3, 4]\r\n</pre>\r\n\r\n<p>As we discussed above, we can get an element by using negative indexing. In the above code, the first print statement returned the rightmost element of the list. The second print statement returned the sub-list, and so on.</p>\r\n\r\n<h2>Updating List Values</h2>\r\n\r\n<p>Lists are the most versatile data structures in Python since they are mutable, and their values can be updated by using the slice and assignment operator. Python also provides append() and insert() methods, which can be used to add values to the list.</p>\r\n\r\n<p>Consider the following example to update the values inside the list.</p>\r\n\r\n<p><strong>Code</strong></p>\r\n\r\n<ol start=\"1\">\r\n	<li>#&nbsp;updating&nbsp;list&nbsp;values&nbsp;&nbsp;</li>\r\n	<li>list&nbsp;=&nbsp;[1,&nbsp;2,&nbsp;3,&nbsp;4,&nbsp;5,&nbsp;6]&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>print(list)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>#&nbsp;It&nbsp;will&nbsp;assign&nbsp;value&nbsp;to&nbsp;the&nbsp;value&nbsp;to&nbsp;the&nbsp;second&nbsp;index&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>list[2]&nbsp;=&nbsp;10&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>print(list)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>#&nbsp;Adding&nbsp;multiple-element&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>list[1:3]&nbsp;=&nbsp;[89,&nbsp;78]&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>print(list)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>#&nbsp;It&nbsp;will&nbsp;add&nbsp;value&nbsp;at&nbsp;the&nbsp;end&nbsp;of&nbsp;the&nbsp;list&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>list[-1]&nbsp;=&nbsp;25&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>print(list)&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p><strong>Output:</strong></p>\r\n\r\n<pre>\r\n[1, 2, 3, 4, 5, 6]\r\n[1, 2, 10, 4, 5, 6]\r\n[1, 89, 78, 4, 5, 6]\r\n[1, 89, 78, 4, 5, 25]\r\n</pre>\r\n\r\n<p>The list elements can also be deleted by using the&nbsp;<strong>del</strong>&nbsp;keyword. Python also provides us the&nbsp;<strong>remove()</strong>&nbsp;method if we do not know which element is to be deleted from the list.</p>\r\n\r\n<p>Consider the following example to delete the list elements.</p>\r\n\r\n<p><strong>Code</strong></p>\r\n\r\n<ol start=\"1\">\r\n	<li>list&nbsp;=&nbsp;[1,&nbsp;2,&nbsp;3,&nbsp;4,&nbsp;5,&nbsp;6]&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>print(list)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>#&nbsp;It&nbsp;will&nbsp;assign&nbsp;value&nbsp;to&nbsp;the&nbsp;value&nbsp;to&nbsp;second&nbsp;index&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>list[2]&nbsp;=&nbsp;10&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>print(list)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>#&nbsp;Adding&nbsp;multiple&nbsp;element&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>list[1:3]&nbsp;=&nbsp;[89,&nbsp;78]&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>print(list)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>#&nbsp;It&nbsp;will&nbsp;add&nbsp;value&nbsp;at&nbsp;the&nbsp;end&nbsp;of&nbsp;the&nbsp;list&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>list[-1]&nbsp;=&nbsp;25&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>print(list)&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p><strong>Output:</strong></p>\r\n\r\n<pre>\r\n[1, 2, 3, 4, 5, 6]\r\n[1, 2, 10, 4, 5, 6]\r\n[1, 89, 78, 4, 5, 6]\r\n[1, 89, 78, 4, 5, 25]\r\n</pre>\r\n\r\n<h2>Python List Operations</h2>\r\n\r\n<p>The concatenation (+) and repetition (*) operators work in the same way as they were working with the strings. The different operations of list are</p>\r\n\r\n<ol>\r\n	<li>Repetition</li>\r\n	<li>Concatenation</li>\r\n	<li>Length</li>\r\n	<li>Iteration</li>\r\n	<li>Membership</li>\r\n</ol>\r\n\r\n<p>Let&#39;s see how the list responds to various operators.</p>\r\n\r\n<h3>1. Repetition</h3>\r\n\r\n<p>The repetition operator enables the list elements to be repeated multiple times.</p>\r\n\r\n<p><strong>Code</strong></p>\r\n\r\n<ol start=\"1\">\r\n	<li>#&nbsp;repetition&nbsp;of&nbsp;list&nbsp;&nbsp;</li>\r\n	<li>#&nbsp;declaring&nbsp;the&nbsp;list&nbsp;&nbsp;</li>\r\n	<li>list1&nbsp;=&nbsp;[12,&nbsp;14,&nbsp;16,&nbsp;18,&nbsp;20]&nbsp;&nbsp;</li>\r\n	<li>#&nbsp;repetition&nbsp;operator&nbsp;*&nbsp;&nbsp;</li>\r\n	<li>l&nbsp;=&nbsp;list1&nbsp;*&nbsp;2&nbsp;&nbsp;</li>\r\n	<li>print(l)&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p><strong>Output:</strong></p>\r\n\r\n<pre>\r\n[12, 14, 16, 18, 20, 12, 14, 16, 18, 20]\r\n</pre>\r\n\r\n<h3>2. Concatenation</h3>\r\n\r\n<p>It concatenates the list mentioned on either side of the operator.</p>\r\n\r\n<p><strong>Code</strong></p>\r\n\r\n<ol start=\"1\">\r\n	<li>#&nbsp;concatenation&nbsp;of&nbsp;two&nbsp;lists&nbsp;&nbsp;</li>\r\n	<li>#&nbsp;declaring&nbsp;the&nbsp;lists&nbsp;&nbsp;</li>\r\n	<li>list1&nbsp;=&nbsp;[12,&nbsp;14,&nbsp;16,&nbsp;18,&nbsp;20]&nbsp;&nbsp;</li>\r\n	<li>list2&nbsp;=&nbsp;[9,&nbsp;10,&nbsp;32,&nbsp;54,&nbsp;86]&nbsp;&nbsp;</li>\r\n	<li>#&nbsp;concatenation&nbsp;operator&nbsp;+&nbsp;&nbsp;</li>\r\n	<li>l&nbsp;=&nbsp;list1&nbsp;+&nbsp;list2&nbsp;&nbsp;</li>\r\n	<li>print(l)&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p><strong>Output:</strong></p>\r\n\r\n<pre>\r\n[12, 14, 16, 18, 20, 9, 10, 32, 54, 86]\r\n</pre>\r\n\r\n<h3>3. Length</h3>\r\n\r\n<p>It is used to get the length of the list</p>\r\n\r\n<p><strong>Code</strong></p>\r\n\r\n<ol start=\"1\">\r\n	<li>#&nbsp;size&nbsp;of&nbsp;the&nbsp;list&nbsp;&nbsp;</li>\r\n	<li>#&nbsp;declaring&nbsp;the&nbsp;list&nbsp;&nbsp;</li>\r\n	<li>list1&nbsp;=&nbsp;[12,&nbsp;14,&nbsp;16,&nbsp;18,&nbsp;20,&nbsp;23,&nbsp;27,&nbsp;39,&nbsp;40]&nbsp;&nbsp;</li>\r\n	<li>#&nbsp;finding&nbsp;length&nbsp;of&nbsp;the&nbsp;list&nbsp;&nbsp;</li>\r\n	<li>len(list1)&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p><strong>Output:</strong></p>\r\n\r\n<pre>\r\n9\r\n</pre>\r\n\r\n<h3>4. Iteration</h3>\r\n\r\n<p>The for loop is used to iterate over the list elements.</p>\r\n\r\n<p><strong>Code</strong></p>\r\n\r\n<ol start=\"1\">\r\n	<li>#&nbsp;iteration&nbsp;of&nbsp;the&nbsp;list&nbsp;&nbsp;</li>\r\n	<li>#&nbsp;declaring&nbsp;the&nbsp;list&nbsp;&nbsp;</li>\r\n	<li>list1&nbsp;=&nbsp;[12,&nbsp;14,&nbsp;16,&nbsp;39,&nbsp;40]&nbsp;&nbsp;</li>\r\n	<li>#&nbsp;iterating&nbsp;&nbsp;</li>\r\n	<li>for&nbsp;i&nbsp;in&nbsp;list1:&nbsp;&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;print(i)&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p><strong>Output:</strong></p>\r\n\r\n<pre>\r\n12\r\n14\r\n16\r\n39\r\n40\r\n</pre>\r\n\r\n<h3>5. Membership</h3>\r\n\r\n<p>It returns true if a particular item exists in a particular list otherwise false.</p>\r\n\r\n<p><strong>Code</strong></p>\r\n\r\n<ol start=\"1\">\r\n	<li>#&nbsp;membership&nbsp;of&nbsp;the&nbsp;list&nbsp;&nbsp;</li>\r\n	<li>#&nbsp;declaring&nbsp;the&nbsp;list&nbsp;&nbsp;</li>\r\n	<li>list1&nbsp;=&nbsp;[100,&nbsp;200,&nbsp;300,&nbsp;400,&nbsp;500]&nbsp;&nbsp;</li>\r\n	<li>#&nbsp;true&nbsp;will&nbsp;be&nbsp;printed&nbsp;if&nbsp;value&nbsp;exists&nbsp;&nbsp;</li>\r\n	<li>#&nbsp;and&nbsp;false&nbsp;if&nbsp;not&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;</li>\r\n	<li>print(600&nbsp;in&nbsp;list1)&nbsp;&nbsp;</li>\r\n	<li>print(700&nbsp;in&nbsp;list1)&nbsp;&nbsp;</li>\r\n	<li>print(1040&nbsp;in&nbsp;list1)&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;</li>\r\n	<li>print(300&nbsp;in&nbsp;list1)&nbsp;&nbsp;</li>\r\n	<li>print(100&nbsp;in&nbsp;list1)&nbsp;&nbsp;</li>\r\n	<li>print(500&nbsp;in&nbsp;list1)&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p><strong>Output:</strong></p>\r\n\r\n<pre>\r\nFalse\r\nFalse\r\nFalse\r\nTrue\r\nTrue\r\nTrue\r\n</pre>\r\n\r\n<h2>Iterating a List</h2>\r\n\r\n<p>A list can be iterated by using a for - in loop. A simple list containing four strings, which can be iterated as follows.</p>\r\n\r\n<p><strong>Code</strong></p>\r\n\r\n<ol start=\"1\">\r\n	<li>#&nbsp;iterating&nbsp;a&nbsp;list&nbsp;&nbsp;</li>\r\n	<li>list&nbsp;=&nbsp;[&quot;John&quot;,&nbsp;&quot;David&quot;,&nbsp;&quot;James&quot;,&nbsp;&quot;Jonathan&quot;]&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>for&nbsp;i&nbsp;in&nbsp;list:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;#&nbsp;The&nbsp;i&nbsp;variable&nbsp;will&nbsp;iterate&nbsp;over&nbsp;the&nbsp;elements&nbsp;of&nbsp;the&nbsp;List&nbsp;and&nbsp;contains&nbsp;each&nbsp;element&nbsp;in&nbsp;each&nbsp;iteration.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;print(i)&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p><strong>Output:</strong></p>\r\n\r\n<pre>\r\nJohn\r\nDavid\r\nJames\r\nJonathan\r\n</pre>\r\n\r\n<h2>Adding Elements to the List</h2>\r\n\r\n<p>Python provides append() function which is used to add an element to the list. However, the append() function can only add value to the end of the list.</p>\r\n\r\n<p>Consider the following example in which, we are taking the elements of the list from the user and printing the list on the console.</p>\r\n\r\n<p><strong>Code</strong></p>\r\n\r\n<ol start=\"1\">\r\n	<li>#Declaring&nbsp;the&nbsp;empty&nbsp;list&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>l&nbsp;=[]&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>#Number&nbsp;of&nbsp;elements&nbsp;will&nbsp;be&nbsp;entered&nbsp;by&nbsp;the&nbsp;user&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>n&nbsp;=&nbsp;int(input(&quot;Enter&nbsp;the&nbsp;number&nbsp;of&nbsp;elements&nbsp;in&nbsp;the&nbsp;list:&quot;))&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>#&nbsp;for&nbsp;loop&nbsp;to&nbsp;take&nbsp;the&nbsp;input&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>for&nbsp;i&nbsp;in&nbsp;range(0,n):&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;#&nbsp;The&nbsp;input&nbsp;is&nbsp;taken&nbsp;from&nbsp;the&nbsp;user&nbsp;and&nbsp;added&nbsp;to&nbsp;the&nbsp;list&nbsp;as&nbsp;the&nbsp;item&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;l.append(input(&quot;Enter&nbsp;the&nbsp;item:&quot;))&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>print(&quot;printing&nbsp;the&nbsp;list&nbsp;items..&quot;)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>#&nbsp;traversal&nbsp;loop&nbsp;to&nbsp;print&nbsp;the&nbsp;list&nbsp;items&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>for&nbsp;i&nbsp;in&nbsp;l:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;print(i,&nbsp;end&nbsp;=&nbsp;&quot;&nbsp;&nbsp;&quot;)&nbsp;&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p><strong>Output:</strong></p>\r\n\r\n<pre>\r\nEnter the number of elements in the list:10\r\nEnter the item:32\r\nEnter the item:56\r\nEnter the item:81\r\nEnter the item:2\r\nEnter the item:34\r\nEnter the item:65\r\nEnter the item:09\r\nEnter the item:66\r\nEnter the item:12\r\nEnter the item:18\r\nprinting the list items..\r\n32  56  81  2  34  65  09  66  12  18 \r\n</pre>\r\n\r\n<h2>Removing Elements from the List</h2>\r\n\r\n<p>Python provides the&nbsp;<strong>remove()</strong>&nbsp;function which is used to remove the element from the list. Consider the following example to understand this concept.</p>\r\n\r\n<p><strong>Example -</strong></p>\r\n\r\n<p><strong>Code</strong></p>\r\n\r\n<ol start=\"1\">\r\n	<li>list&nbsp;=&nbsp;[0,1,2,3,4]&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>print(&quot;printing&nbsp;original&nbsp;list:&nbsp;&quot;);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>for&nbsp;i&nbsp;in&nbsp;list:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;print(i,end=&quot;&nbsp;&quot;)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>list.remove(2)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>print(&quot;\nprinting&nbsp;the&nbsp;list&nbsp;after&nbsp;the&nbsp;removal&nbsp;of&nbsp;first&nbsp;element...&quot;)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>for&nbsp;i&nbsp;in&nbsp;list:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;print(i,end=&quot;&nbsp;&quot;)&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p><strong>Output:</strong></p>\r\n\r\n<pre>\r\nprinting original list: \r\n0 1 2 3 4 \r\nprinting the list after the removal of first element...\r\n0 1 3 4 \r\n</pre>\r\n\r\n<h2>Python List Built-in Functions</h2>\r\n\r\n<p>Python provides the following built-in functions, which can be used with the lists.</p>\r\n\r\n<ol>\r\n	<li>len()</li>\r\n	<li>max()</li>\r\n	<li>min()</li>\r\n</ol>\r\n\r\n<h3>len( )</h3>\r\n\r\n<p>It is used to calculate the length of the list.</p>\r\n\r\n<p><strong>Code</strong></p>\r\n\r\n<ol start=\"1\">\r\n	<li>#&nbsp;size&nbsp;of&nbsp;the&nbsp;list&nbsp;&nbsp;</li>\r\n	<li>#&nbsp;declaring&nbsp;the&nbsp;list&nbsp;&nbsp;</li>\r\n	<li>list1&nbsp;=&nbsp;[12,&nbsp;16,&nbsp;18,&nbsp;20,&nbsp;39,&nbsp;40]&nbsp;&nbsp;</li>\r\n	<li>#&nbsp;finding&nbsp;length&nbsp;of&nbsp;the&nbsp;list&nbsp;&nbsp;</li>\r\n	<li>len(list1)&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p><strong>Output:</strong></p>\r\n\r\n<pre>\r\n6\r\n</pre>\r\n\r\n<h3>Max( )</h3>\r\n\r\n<p>It returns the maximum element of the list</p>\r\n\r\n<p><strong>Code</strong></p>\r\n\r\n<ol start=\"1\">\r\n	<li>#&nbsp;maximum&nbsp;of&nbsp;the&nbsp;list&nbsp;&nbsp;</li>\r\n	<li>list1&nbsp;=&nbsp;[103,&nbsp;675,&nbsp;321,&nbsp;782,&nbsp;200]&nbsp;&nbsp;</li>\r\n	<li>#&nbsp;large&nbsp;element&nbsp;in&nbsp;the&nbsp;list&nbsp;&nbsp;</li>\r\n	<li>print(max(list1))&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p><strong>Output:</strong></p>\r\n\r\n<pre>\r\n782\r\n</pre>\r\n\r\n<h3>Min( )</h3>\r\n\r\n<p>It returns the minimum element of the list</p>\r\n\r\n<p><strong>Code</strong></p>\r\n\r\n<ol start=\"1\">\r\n	<li>#&nbsp;minimum&nbsp;of&nbsp;the&nbsp;list&nbsp;&nbsp;</li>\r\n	<li>list1&nbsp;=&nbsp;[103,&nbsp;675,&nbsp;321,&nbsp;782,&nbsp;200]&nbsp;&nbsp;</li>\r\n	<li>#&nbsp;smallest&nbsp;element&nbsp;in&nbsp;the&nbsp;list&nbsp;&nbsp;</li>\r\n	<li>print(min(list1))&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p><strong>Output:</strong></p>\r\n\r\n<pre>\r\n103\r\n</pre>\r\n\r\n<p>Let&#39;s have a look at the few list examples.</p>\r\n\r\n<p><strong>Example: 1-</strong>&nbsp;Write the program to remove the duplicate element of the list.</p>\r\n\r\n<p><strong>Code</strong></p>\r\n\r\n<ol start=\"1\">\r\n	<li>list1&nbsp;=&nbsp;[1,2,2,3,55,98,65,65,13,29]&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>#&nbsp;Declare&nbsp;an&nbsp;empty&nbsp;list&nbsp;that&nbsp;will&nbsp;store&nbsp;unique&nbsp;values&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>list2&nbsp;=&nbsp;[]&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>for&nbsp;i&nbsp;in&nbsp;list1:&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;i&nbsp;not&nbsp;in&nbsp;list2:&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;list2.append(i)&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>print(list2)&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p><strong>Output:</strong></p>\r\n\r\n<pre>\r\n[1, 2, 3, 55, 98, 65, 13, 29]\r\n</pre>\r\n\r\n<p><strong>Example:2-</strong>&nbsp;Write a program to find the sum of the element in the list.</p>\r\n\r\n<p><strong>Code</strong></p>\r\n\r\n<ol start=\"1\">\r\n	<li>list1&nbsp;=&nbsp;[3,4,5,9,10,12,24]&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>sum&nbsp;=&nbsp;0&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>for&nbsp;i&nbsp;in&nbsp;list1:&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;sum&nbsp;=&nbsp;sum+i&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>print(&quot;The&nbsp;sum&nbsp;is:&quot;,sum)&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p><strong>Output:</strong></p>\r\n\r\n<pre>\r\nThe sum is: 67\r\nIn [8]:\r\n</pre>\r\n\r\n<p><strong>Example: 3-</strong>&nbsp;Write the program to find the lists consist of at least one common element.</p>\r\n\r\n<p><strong>Code</strong></p>\r\n\r\n<ol start=\"1\">\r\n	<li>list1&nbsp;=&nbsp;[1,2,3,4,5,6]&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>list2&nbsp;=&nbsp;[7,8,9,2,10]&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>for&nbsp;x&nbsp;in&nbsp;list1:&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;y&nbsp;in&nbsp;list2:&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;x&nbsp;==&nbsp;y:&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;print(&quot;The&nbsp;common&nbsp;element&nbsp;is:&quot;,x)&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p><strong>Output:</strong></p>\r\n\r\n<pre>\r\nThe common element is: 2</pre>\r\n', 'PYTHON');
INSERT INTO `courses` (`id`, `topic_name`, `description`, `course_name`) VALUES
(71, 'Python Tuples', '<h1>Python Tuples</h1>\r\n\r\n<p>A Python Tuple is a group of items that are separated by commas. The indexing, nested objects, and repetitions of a tuple are somewhat like those of a list, however unlike a list, a tuple is immutable.</p>\r\n\r\n<p>The distinction between the two is that while we can edit the contents of a list, we cannot alter the elements of a tuple once they have been assigned.</p>\r\n\r\n<p><strong>Example</strong></p>\r\n\r\n<ol start=\"1\">\r\n	<li>(&quot;Suzuki&quot;,&nbsp;&quot;Audi&quot;,&nbsp;&quot;BMW&quot;,&quot;&nbsp;Skoda&nbsp;&quot;)&nbsp;is&nbsp;a&nbsp;tuple.&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<h3>Features of Python Tuple</h3>\r\n\r\n<ul>\r\n	<li>Tuples are an immutable data type, which means that once they have been generated, their elements cannot be changed.</li>\r\n	<li>Since tuples are ordered sequences, each element has a specific order that will never change.</li>\r\n</ul>\r\n\r\n<h3>Creating of Tuple:</h3>\r\n\r\n<p>To create a tuple, all the objects (or &quot;elements&quot;) must be enclosed in parenthesis (), each one separated by a comma. Although it is not necessary to include parentheses, doing so is advised.</p>\r\n\r\n<p>PlayNext</p>\r\n\r\n<p>Unmute</p>\r\n\r\n<p>Current Time&Acirc;&nbsp;0:00</p>\r\n\r\n<p>/</p>\r\n\r\n<p>Duration&Acirc;&nbsp;18:10</p>\r\n\r\n<p>Loaded:&nbsp;0.37%</p>\r\n\r\n<p>&Acirc;&nbsp;</p>\r\n\r\n<p>Fullscreen</p>\r\n\r\n<p>Backward Skip 10sPlay VideoForward Skip 10s</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>A tuple can contain any number of items, including ones with different data types (dictionary, string, float, list, etc.).</p>\r\n\r\n<p><strong>Code:</strong></p>\r\n\r\n<ol start=\"1\">\r\n	<li>#&nbsp;Python&nbsp;program&nbsp;to&nbsp;show&nbsp;how&nbsp;to&nbsp;create&nbsp;a&nbsp;tuple&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>#&nbsp;Creating&nbsp;an&nbsp;empty&nbsp;tuple&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>empty_tuple&nbsp;=&nbsp;()&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>print(&quot;Empty&nbsp;tuple:&nbsp;&quot;,&nbsp;empty_tuple)&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>#&nbsp;Creating&nbsp;tuple&nbsp;having&nbsp;integers&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>int_tuple&nbsp;=&nbsp;(4,&nbsp;6,&nbsp;8,&nbsp;10,&nbsp;12,&nbsp;14)&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>print(&quot;Tuple&nbsp;with&nbsp;integers:&nbsp;&quot;,&nbsp;int_tuple)&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>#&nbsp;Creating&nbsp;a&nbsp;tuple&nbsp;having&nbsp;objects&nbsp;of&nbsp;different&nbsp;data&nbsp;types&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>mixed_tuple&nbsp;=&nbsp;(4,&nbsp;&quot;Python&quot;,&nbsp;9.3)&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>print(&quot;Tuple&nbsp;with&nbsp;different&nbsp;data&nbsp;types:&nbsp;&quot;,&nbsp;mixed_tuple)&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>#&nbsp;Creating&nbsp;a&nbsp;nested&nbsp;tuple&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>nested_tuple&nbsp;=&nbsp;(&quot;Python&quot;,&nbsp;{4:&nbsp;5,&nbsp;6:&nbsp;2,&nbsp;8:2},&nbsp;(5,&nbsp;3,&nbsp;5,&nbsp;6))&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>print(&quot;A&nbsp;nested&nbsp;tuple:&nbsp;&quot;,&nbsp;nested_tuple)&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p><strong>Output:</strong></p>\r\n\r\n<pre>\r\nEmpty tuple:  ()\r\nTuple with integers:  (4, 6, 8, 10, 12, 14)\r\nTuple with different data types:  (4, &#39;Python&#39;, 9.3)\r\nA nested tuple:  (&#39;Python&#39;, {4: 5, 6: 2, 8: 2}, (5, 3, 5, 6))\r\n</pre>\r\n\r\n<p>Tuples can be constructed without using parentheses. This is known as triple packing.</p>\r\n\r\n<p><strong>Code</strong></p>\r\n\r\n<ol start=\"1\">\r\n	<li>#&nbsp;Python&nbsp;program&nbsp;to&nbsp;create&nbsp;a&nbsp;tuple&nbsp;without&nbsp;using&nbsp;parentheses&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>#&nbsp;Creating&nbsp;a&nbsp;tuple&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>tuple_&nbsp;=&nbsp;4,&nbsp;5.7,&nbsp;&quot;Tuples&quot;,&nbsp;[&quot;Python&quot;,&nbsp;&quot;Tuples&quot;]&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>#&nbsp;Displaying&nbsp;the&nbsp;tuple&nbsp;created&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>print(tuple_)&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>#&nbsp;Checking&nbsp;the&nbsp;data&nbsp;type&nbsp;of&nbsp;object&nbsp;tuple_&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>print(type(tuple_)&nbsp;)&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>#&nbsp;Trying&nbsp;to&nbsp;modify&nbsp;tuple_&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>try:&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;tuple_[1]&nbsp;=&nbsp;4.2&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>except:&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;print(TypeError&nbsp;)&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p><strong>Output:</strong></p>\r\n\r\n<pre>\r\n(4, 5.7, &#39;Tuples&#39;, [&#39;Python&#39;, &#39;Tuples&#39;])\r\n&lt;class &#39;tuple&#39;&gt;\r\n&lt;class &#39;TypeError&#39;&gt;\r\n</pre>\r\n\r\n<p>The construction of a tuple from a single member might be hard.</p>\r\n\r\n<p>Simply adding parenthesis around the element is insufficient. To be recognised as a tuple, the element must be followed by a comma.</p>\r\n\r\n<p><strong>Code</strong></p>\r\n\r\n<ol start=\"1\">\r\n	<li>#&nbsp;Python&nbsp;program&nbsp;to&nbsp;show&nbsp;how&nbsp;to&nbsp;create&nbsp;a&nbsp;tuple&nbsp;having&nbsp;a&nbsp;single&nbsp;element&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>single_tuple&nbsp;=&nbsp;(&quot;Tuple&quot;)&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>print(&nbsp;type(single_tuple)&nbsp;)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>#&nbsp;Creating&nbsp;a&nbsp;tuple&nbsp;that&nbsp;has&nbsp;only&nbsp;one&nbsp;element&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>single_tuple&nbsp;=&nbsp;(&quot;Tuple&quot;,)&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>print(&nbsp;type(single_tuple)&nbsp;)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>#&nbsp;Creating&nbsp;tuple&nbsp;without&nbsp;parentheses&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>single_tuple&nbsp;=&nbsp;&quot;Tuple&quot;,&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>print(&nbsp;type(single_tuple)&nbsp;)&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p><strong>Output:</strong></p>\r\n\r\n<pre>\r\n&lt;class &#39;str&#39;&gt;\r\n&lt;class &#39;tuple&#39;&gt;\r\n&lt;class &#39;tuple&#39;&gt;\r\n</pre>\r\n\r\n<h2>Accessing Tuple Elements</h2>\r\n\r\n<p>We can access the objects of a tuple in a variety of ways.</p>\r\n\r\n<ul>\r\n	<li><strong>Indexing</strong></li>\r\n</ul>\r\n\r\n<p>To access an object of a tuple, we can use the index operator [], where indexing in the tuple starts from 0.</p>\r\n\r\n<p>A tuple with 5 items will have indices ranging from 0 to 4. An IndexError will be raised if we try to access an index from the tuple that is outside the range of the tuple index. In this case, an index above 4 will be out of range.</p>\r\n\r\n<p><iframe frameborder=\"0\" height=\"280\" id=\"google_ads_iframe_/103512698,22511567001/22794806207_0\" name=\"google_ads_iframe_/103512698,22511567001/22794806207_0\" scrolling=\"no\" title=\"3rd party ad content\" width=\"728\"></iframe></p>\r\n\r\n<p>We cannot give an index of a floating data type or other kinds because the index in Python must be an integer. TypeError will appear as a result if we give a floating index.</p>\r\n\r\n<p>The example below illustrates how indexing is performed in nested tuples to access elements.</p>\r\n\r\n<p><strong>Code</strong></p>\r\n\r\n<p><iframe frameborder=\"0\" height=\"90\" id=\"google_ads_iframe_/103512698,22511567001/22794702880_0\" name=\"google_ads_iframe_/103512698,22511567001/22794702880_0\" scrolling=\"no\" title=\"3rd party ad content\" width=\"728\"></iframe></p>\r\n\r\n<ol start=\"1\">\r\n	<li>#&nbsp;Python&nbsp;program&nbsp;to&nbsp;show&nbsp;how&nbsp;to&nbsp;access&nbsp;tuple&nbsp;elements&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>#&nbsp;Creating&nbsp;a&nbsp;tuple&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>tuple_&nbsp;=&nbsp;(&quot;Python&quot;,&nbsp;&quot;Tuple&quot;,&nbsp;&quot;Ordered&quot;,&nbsp;&quot;Collection&quot;)&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>print(tuple_[0])&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>print(tuple_[1])&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>#&nbsp;trying&nbsp;to&nbsp;access&nbsp;element&nbsp;index&nbsp;more&nbsp;than&nbsp;the&nbsp;length&nbsp;of&nbsp;a&nbsp;tuple&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>try:&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;print(tuple_[5])&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>except&nbsp;Exception&nbsp;as&nbsp;e:&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;print(e)&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>#&nbsp;trying&nbsp;to&nbsp;access&nbsp;elements&nbsp;through&nbsp;the&nbsp;index&nbsp;of&nbsp;floating&nbsp;data&nbsp;type&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>try:&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;print(tuple_[1.0])&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>except&nbsp;Exception&nbsp;as&nbsp;e:&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;print(e)&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>#&nbsp;Creating&nbsp;a&nbsp;nested&nbsp;tuple&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>nested_tuple&nbsp;=&nbsp;(&quot;Tuple&quot;,&nbsp;[4,&nbsp;6,&nbsp;2,&nbsp;6],&nbsp;(6,&nbsp;2,&nbsp;6,&nbsp;7))&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>#&nbsp;Accessing&nbsp;the&nbsp;index&nbsp;of&nbsp;a&nbsp;nested&nbsp;tuple&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>print(nested_tuple[0][3])&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>print(nested_tuple[1][1])&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p><strong>Output:</strong></p>\r\n\r\n<pre>\r\nPython\r\nTuple\r\ntuple index out of range\r\ntuple indices must be integers or slices, not float\r\nl\r\n6\r\n</pre>\r\n\r\n<ul>\r\n	<li><strong>Negative Indexing</strong></li>\r\n</ul>\r\n\r\n<p>Python&#39;s sequence objects support negative indexing.</p>\r\n\r\n<p>The last item of the collection is represented by -1, the second last item by -2, and so on.</p>\r\n\r\n<p><strong>Code</strong></p>\r\n\r\n<ol start=\"1\">\r\n	<li>#&nbsp;Python&nbsp;program&nbsp;to&nbsp;show&nbsp;how&nbsp;negative&nbsp;indexing&nbsp;works&nbsp;in&nbsp;Python&nbsp;tuples&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>#&nbsp;Creating&nbsp;a&nbsp;tuple&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>tuple_&nbsp;=&nbsp;(&quot;Python&quot;,&nbsp;&quot;Tuple&quot;,&nbsp;&quot;Ordered&quot;,&nbsp;&quot;Collection&quot;)&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>#&nbsp;Printing&nbsp;elements&nbsp;using&nbsp;negative&nbsp;indices&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>print(&quot;Element&nbsp;at&nbsp;-1&nbsp;index:&nbsp;&quot;,&nbsp;tuple_[-1])&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>print(&quot;Elements&nbsp;between&nbsp;-4&nbsp;and&nbsp;-1&nbsp;are:&nbsp;&quot;,&nbsp;tuple_[-4:-1])&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p><strong>Output:</strong></p>\r\n\r\n<pre>\r\nElement at -1 index:  Collection\r\nElements between -4 and -1 are:  (&#39;Python&#39;, &#39;Tuple&#39;, &#39;Ordered&#39;)\r\n</pre>\r\n\r\n<h2>Slicing</h2>\r\n\r\n<p>In Python, tuple slicing is a common practise and the most popular method for programmers to handle practical issues. Think about a Python tuple. To access a variety of elements in a tuple, you must slice it. One approach is to use the colon as a straightforward slicing operator (:).</p>\r\n\r\n<p>We can use a slicing operator, a colon (:), to access a range of tuple elements.</p>\r\n\r\n<p><strong>Code</strong></p>\r\n\r\n<ol start=\"1\">\r\n	<li>#&nbsp;Python&nbsp;program&nbsp;to&nbsp;show&nbsp;how&nbsp;slicing&nbsp;works&nbsp;in&nbsp;Python&nbsp;tuples&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>#&nbsp;Creating&nbsp;a&nbsp;tuple&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>tuple_&nbsp;=&nbsp;(&quot;Python&quot;,&nbsp;&quot;Tuple&quot;,&nbsp;&quot;Ordered&quot;,&nbsp;&quot;Immutable&quot;,&nbsp;&quot;Collection&quot;,&nbsp;&quot;Objects&quot;)&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>#&nbsp;Using&nbsp;slicing&nbsp;to&nbsp;access&nbsp;elements&nbsp;of&nbsp;the&nbsp;tuple&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>print(&quot;Elements&nbsp;between&nbsp;indices&nbsp;1&nbsp;and&nbsp;3:&nbsp;&quot;,&nbsp;tuple_[1:3])&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>#&nbsp;Using&nbsp;negative&nbsp;indexing&nbsp;in&nbsp;slicing&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>print(&quot;Elements&nbsp;between&nbsp;indices&nbsp;0&nbsp;and&nbsp;-4:&nbsp;&quot;,&nbsp;tuple_[:-4])&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>#&nbsp;Printing&nbsp;the&nbsp;entire&nbsp;tuple&nbsp;by&nbsp;using&nbsp;the&nbsp;default&nbsp;start&nbsp;and&nbsp;end&nbsp;values.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>print(&quot;Entire&nbsp;tuple:&nbsp;&quot;,&nbsp;tuple_[:])&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p><strong>Output:</strong></p>\r\n\r\n<p><iframe frameborder=\"0\" height=\"250\" id=\"google_ads_iframe_/103512698,22511567001/22794805910_0\" name=\"\" scrolling=\"no\" src=\"https://b305c8208c51726a465bef93daa6b6ac.safeframe.googlesyndication.com/safeframe/1-0-40/html/container.html\" title=\"3rd party ad content\" width=\"300\"></iframe></p>\r\n\r\n<pre>\r\nElements between indices 1 and 3:  (&#39;Tuple&#39;, &#39;Ordered&#39;)\r\nElements between indices 0 and -4:  (&#39;Python&#39;, &#39;Tuple&#39;)\r\nEntire tuple:  (&#39;Python&#39;, &#39;Tuple&#39;, &#39;Ordered&#39;, &#39;Immutable&#39;, &#39;Collection&#39;, &#39;Objects&#39;)\r\n</pre>\r\n\r\n<h2>Deleting a Tuple</h2>\r\n\r\n<p>A tuple&#39;s components cannot be altered, as was previously said. As a result, we are unable to get rid of or remove tuple components.</p>\r\n\r\n<p>However, a tuple can be totally deleted with the keyword del.</p>\r\n\r\n<p><strong>Code</strong></p>\r\n\r\n<ol start=\"1\">\r\n	<li>#&nbsp;Python&nbsp;program&nbsp;to&nbsp;show&nbsp;how&nbsp;to&nbsp;delete&nbsp;elements&nbsp;of&nbsp;a&nbsp;Python&nbsp;tuple&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>#&nbsp;Creating&nbsp;a&nbsp;tuple&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>tuple_&nbsp;=&nbsp;(&quot;Python&quot;,&nbsp;&quot;Tuple&quot;,&nbsp;&quot;Ordered&quot;,&nbsp;&quot;Immutable&quot;,&nbsp;&quot;Collection&quot;,&nbsp;&quot;Objects&quot;)&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>#&nbsp;Deleting&nbsp;a&nbsp;particular&nbsp;element&nbsp;of&nbsp;the&nbsp;tuple&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>try:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;del&nbsp;tuple_[3]&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;print(tuple_)&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>except&nbsp;Exception&nbsp;as&nbsp;e:&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;print(e)&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>#&nbsp;Deleting&nbsp;the&nbsp;variable&nbsp;from&nbsp;the&nbsp;global&nbsp;space&nbsp;of&nbsp;the&nbsp;program&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>del&nbsp;tuple_&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>#&nbsp;Trying&nbsp;accessing&nbsp;the&nbsp;tuple&nbsp;after&nbsp;deleting&nbsp;it&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>try:&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;print(tuple_)&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>except&nbsp;Exception&nbsp;as&nbsp;e:&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;print(e)&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p><strong>Output:</strong></p>\r\n\r\n<pre>\r\n&#39;tuple&#39; object does not support item deletion\r\nname &#39;tuple_&#39; is not defined\r\n</pre>\r\n\r\n<h3>Repetition Tuples in Python</h3>\r\n\r\n<p><strong>Code</strong></p>\r\n\r\n<ol start=\"1\">\r\n	<li>#&nbsp;Python&nbsp;program&nbsp;to&nbsp;show&nbsp;repetition&nbsp;in&nbsp;tuples&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>tuple_&nbsp;=&nbsp;(&#39;Python&#39;,&quot;Tuples&quot;)&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>print(&quot;Original&nbsp;tuple&nbsp;is:&nbsp;&quot;,&nbsp;tuple_)&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>#&nbsp;Repeting&nbsp;the&nbsp;tuple&nbsp;elements&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>tuple_&nbsp;=&nbsp;tuple_&nbsp;*&nbsp;3&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>print(&quot;New&nbsp;tuple&nbsp;is:&nbsp;&quot;,&nbsp;tuple_)&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p><strong>Output:</strong></p>\r\n\r\n<pre>\r\nOriginal tuple is:  (&#39;Python&#39;, &#39;Tuples&#39;)\r\nNew tuple is:  (&#39;Python&#39;, &#39;Tuples&#39;, &#39;Python&#39;, &#39;Tuples&#39;, &#39;Python&#39;, &#39;Tuples&#39;)\r\n</pre>\r\n\r\n<h3>Tuple Methods</h3>\r\n\r\n<p>Python Tuples is a collection of immutable objects that is more like to a list. Python offers a few ways to work with tuples. These two approaches will be thoroughly covered in this essay with the aid of some examples.</p>\r\n\r\n<p>Examples of these methods are given below.</p>\r\n\r\n<ul>\r\n	<li><strong>Count () Method</strong></li>\r\n</ul>\r\n\r\n<p>The number of times the specified element occurs in the tuple is returned by the count () function of Tuple.</p>\r\n\r\n<p><strong>Code</strong></p>\r\n\r\n<ol start=\"1\">\r\n	<li>#&nbsp;Creating&nbsp;tuples&nbsp;&nbsp;</li>\r\n	<li>T1&nbsp;=&nbsp;(0,&nbsp;1,&nbsp;5,&nbsp;6,&nbsp;7,&nbsp;2,&nbsp;2,&nbsp;4,&nbsp;2,&nbsp;3,&nbsp;2,&nbsp;3,&nbsp;1,&nbsp;3,&nbsp;2)&nbsp;&nbsp;</li>\r\n	<li>T2&nbsp;=&nbsp;(&#39;python&#39;,&nbsp;&#39;java&#39;,&nbsp;&#39;python&#39;,&nbsp;&#39;Tpoint&#39;,&nbsp;&#39;python&#39;,&nbsp;&#39;java&#39;)&nbsp;&nbsp;</li>\r\n	<li>#&nbsp;counting&nbsp;the&nbsp;appearance&nbsp;of&nbsp;3&nbsp;&nbsp;</li>\r\n	<li>res&nbsp;=&nbsp;T1.count(2)&nbsp;&nbsp;</li>\r\n	<li>print(&#39;Count&nbsp;of&nbsp;2&nbsp;in&nbsp;T1&nbsp;is:&#39;,&nbsp;res)&nbsp;&nbsp;</li>\r\n	<li>#&nbsp;counting&nbsp;the&nbsp;appearance&nbsp;of&nbsp;java&nbsp;&nbsp;</li>\r\n	<li>res&nbsp;=&nbsp;T2.count(&#39;java&#39;)&nbsp;&nbsp;</li>\r\n	<li>print(&#39;Count&nbsp;of&nbsp;Java&nbsp;in&nbsp;T2&nbsp;is:&#39;,&nbsp;res)&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p><strong>Output:</strong></p>\r\n\r\n<pre>\r\nCount of 2 in T1 is: 5\r\nCount of java in T2 is: 2\r\n</pre>\r\n\r\n<h3>Index() Method:</h3>\r\n\r\n<p>The first instance of the requested element from the tuple is returned by the Index() function.</p>\r\n\r\n<p><strong>Parameters:</strong></p>\r\n\r\n<p>The element to be looked for.</p>\r\n\r\n<ul>\r\n	<li>begin (Optional): the index used as the starting point for searching</li>\r\n	<li>final (optional): The last index up until which the search is conducted</li>\r\n	<li><strong>Index() Method</strong></li>\r\n</ul>\r\n\r\n<p><strong>Code</strong></p>\r\n\r\n<ol start=\"1\">\r\n	<li>#&nbsp;Creating&nbsp;tuples&nbsp;&nbsp;</li>\r\n	<li>Tuple_data&nbsp;=&nbsp;(0,&nbsp;1,&nbsp;2,&nbsp;3,&nbsp;2,&nbsp;3,&nbsp;1,&nbsp;3,&nbsp;2)&nbsp;&nbsp;</li>\r\n	<li>#&nbsp;getting&nbsp;the&nbsp;index&nbsp;of&nbsp;3&nbsp;&nbsp;</li>\r\n	<li>res&nbsp;=&nbsp;Tuple_data.index(3)&nbsp;&nbsp;</li>\r\n	<li>print(&#39;First&nbsp;occurrence&nbsp;of&nbsp;1&nbsp;is&#39;,&nbsp;res)&nbsp;&nbsp;</li>\r\n	<li>#&nbsp;getting&nbsp;the&nbsp;index&nbsp;of&nbsp;3&nbsp;after&nbsp;4th&nbsp;&nbsp;</li>\r\n	<li>#&nbsp;index&nbsp;&nbsp;</li>\r\n	<li>res&nbsp;=&nbsp;Tuple_data.index(3,&nbsp;4)&nbsp;&nbsp;</li>\r\n	<li>print(&#39;First&nbsp;occurrence&nbsp;of&nbsp;1&nbsp;after&nbsp;4th&nbsp;index&nbsp;is:&#39;,&nbsp;res)&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p><strong>Output:</strong></p>\r\n\r\n<pre>\r\nFirst occurrence of 1 is 2\r\nFirst occurrence of 1 after 4th index is: 6\r\n</pre>\r\n\r\n<h3>Tuple Membership Test</h3>\r\n\r\n<p>Using the in keyword, we can determine whether an item is present in the given tuple or not.</p>\r\n\r\n<p><strong>Code</strong></p>\r\n\r\n<ol start=\"1\">\r\n	<li>#&nbsp;Python&nbsp;program&nbsp;to&nbsp;show&nbsp;how&nbsp;to&nbsp;perform&nbsp;membership&nbsp;test&nbsp;for&nbsp;tuples&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>#&nbsp;Creating&nbsp;a&nbsp;tuple&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>tuple_&nbsp;=&nbsp;(&quot;Python&quot;,&nbsp;&quot;Tuple&quot;,&nbsp;&quot;Ordered&quot;,&nbsp;&quot;Immutable&quot;,&nbsp;&quot;Collection&quot;,&nbsp;&quot;Ordered&quot;)&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>#&nbsp;In&nbsp;operator&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>print(&#39;Tuple&#39;&nbsp;in&nbsp;tuple_)&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>print(&#39;Items&#39;&nbsp;in&nbsp;tuple_)&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>#&nbsp;Not&nbsp;in&nbsp;operator&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>print(&#39;Immutable&#39;&nbsp;not&nbsp;in&nbsp;tuple_)&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>print(&#39;Items&#39;&nbsp;not&nbsp;in&nbsp;tuple_)&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p><strong>Output:</strong></p>\r\n\r\n<pre>\r\nTrue\r\nFalse\r\nFalse\r\nTrue\r\n</pre>\r\n\r\n<h3>Iterating Through a Tuple</h3>\r\n\r\n<p>We can use a for loop to iterate through each element of a tuple.</p>\r\n\r\n<p><strong>Code</strong></p>\r\n\r\n<ol start=\"1\">\r\n	<li>#&nbsp;Python&nbsp;program&nbsp;to&nbsp;show&nbsp;how&nbsp;to&nbsp;iterate&nbsp;over&nbsp;tuple&nbsp;elements&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>#&nbsp;Creating&nbsp;a&nbsp;tuple&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>tuple_&nbsp;=&nbsp;(&quot;Python&quot;,&nbsp;&quot;Tuple&quot;,&nbsp;&quot;Ordered&quot;,&nbsp;&quot;Immutable&quot;)&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>#&nbsp;Iterating&nbsp;over&nbsp;tuple&nbsp;elements&nbsp;using&nbsp;a&nbsp;for&nbsp;loop&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>for&nbsp;item&nbsp;in&nbsp;tuple_:&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;print(item)&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p><strong>Output:</strong></p>\r\n\r\n<pre>\r\nPython\r\nTuple\r\nOrdered\r\nImmutable\r\n</pre>\r\n\r\n<h3>Changing a Tuple</h3>\r\n\r\n<p>Tuples, as opposed to lists, are immutable objects.</p>\r\n\r\n<p>This suggests that we are unable to change a tuple&#39;s elements once they have been defined. The nested elements of an element can be changed, though, if the element itself is a changeable data type like a list.</p>\r\n\r\n<p>A tuple can be assigned to many values (reassignment).</p>\r\n\r\n<p><strong>Code</strong></p>\r\n\r\n<ol start=\"1\">\r\n	<li>#&nbsp;Python&nbsp;program&nbsp;to&nbsp;show&nbsp;that&nbsp;Python&nbsp;tuples&nbsp;are&nbsp;immutable&nbsp;objects&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>#&nbsp;Creating&nbsp;a&nbsp;tuple&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>tuple_&nbsp;=&nbsp;(&quot;Python&quot;,&nbsp;&quot;Tuple&quot;,&nbsp;&quot;Ordered&quot;,&nbsp;&quot;Immutable&quot;,&nbsp;[1,2,3,4])&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>#&nbsp;Trying&nbsp;to&nbsp;change&nbsp;the&nbsp;element&nbsp;at&nbsp;index&nbsp;2&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>try:&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;tuple_[2]&nbsp;=&nbsp;&quot;Items&quot;&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;print(tuple_)&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>except&nbsp;Exception&nbsp;as&nbsp;e:&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;print(&nbsp;e&nbsp;)&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>#&nbsp;But&nbsp;inside&nbsp;a&nbsp;tuple,&nbsp;we&nbsp;can&nbsp;change&nbsp;elements&nbsp;of&nbsp;a&nbsp;mutable&nbsp;object&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>tuple_[-1][2]&nbsp;=&nbsp;10&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>print(tuple_)&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>#&nbsp;Changing&nbsp;the&nbsp;whole&nbsp;tuple&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>tuple_&nbsp;=&nbsp;(&quot;Python&quot;,&nbsp;&quot;Items&quot;)&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>print(tuple_)&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p><strong>Output:</strong></p>\r\n\r\n<pre>\r\n&#39;tuple&#39; object does not support item assignment\r\n(&#39;Python&#39;, &#39;Tuple&#39;, &#39;Ordered&#39;, &#39;Immutable&#39;, [1, 2, 10, 4])\r\n(&#39;Python&#39;, &#39;Items&#39;)\r\n</pre>\r\n\r\n<p>To merge multiple tuples, we can use the + operator. Concatenation is the term for this.</p>\r\n\r\n<p>Using the * operator, we may also repeat a tuple&#39;s elements for a specified number of times. This is already shown above.</p>\r\n\r\n<p>The results of the operations + and * are new tuples.</p>\r\n\r\n<p><strong>Code</strong></p>\r\n\r\n<ol start=\"1\">\r\n	<li>#&nbsp;Python&nbsp;program&nbsp;to&nbsp;show&nbsp;how&nbsp;to&nbsp;concatenate&nbsp;tuples&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>#&nbsp;Creating&nbsp;a&nbsp;tuple&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>tuple_&nbsp;=&nbsp;(&quot;Python&quot;,&nbsp;&quot;Tuple&quot;,&nbsp;&quot;Ordered&quot;,&nbsp;&quot;Immutable&quot;)&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>#&nbsp;Adding&nbsp;a&nbsp;tuple&nbsp;to&nbsp;the&nbsp;tuple_&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>print(tuple_&nbsp;+&nbsp;(4,&nbsp;5,&nbsp;6))&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p><strong>Output:</strong></p>\r\n\r\n<pre>\r\n(&#39;Python&#39;, &#39;Tuple&#39;, &#39;Ordered&#39;, &#39;Immutable&#39;, 4, 5, 6)\r\n</pre>\r\n\r\n<h3>Following are Some Advantages of Tuples over Lists:</h3>\r\n\r\n<p>Lists take longer than triples.</p>\r\n\r\n<p>The code is protected from any unintentional changes thanks to tuples. It is preferable to store non-changing data in &quot;tuples&quot; rather than &quot;lists&quot; if it is required by a programme.</p>\r\n\r\n<p>If a tuple includes immutable values like strings, numbers, or another tuple, it can be used as a dictionary key. Since &quot;lists&quot; are mutable, they cannot be utilized as dictionary keys.</p>\r\n', 'PYTHON'),
(72, 'Python Set', '<h1>Python Set</h1>\r\n\r\n<p>A Python set is the collection of the unordered items. Each element in the set must be unique, immutable, and the sets remove the duplicate elements. Sets are mutable which means we can modify it after its creation.</p>\r\n\r\n<p>Unlike other collections in Python, there is no index attached to the elements of the set, i.e., we cannot directly access any element of the set by the index. However, we can print them all together, or we can get the list of elements by looping through the set.</p>\r\n\r\n<h2>Creating a set</h2>\r\n\r\n<p>The set can be created by enclosing the comma-separated immutable items with the curly braces {}. Python also provides the set() method, which can be used to create the set by the passed sequence.</p>\r\n\r\n<h3>Example 1: Using curly braces</h3>\r\n\r\n<ol start=\"1\">\r\n	<li>Days&nbsp;=&nbsp;{&quot;Monday&quot;,&nbsp;&quot;Tuesday&quot;,&nbsp;&quot;Wednesday&quot;,&nbsp;&quot;Thursday&quot;,&nbsp;&quot;Friday&quot;,&nbsp;&quot;Saturday&quot;,&nbsp;&quot;Sunday&quot;}&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>print(Days)&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>print(type(Days))&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>print(&quot;looping&nbsp;through&nbsp;the&nbsp;set&nbsp;elements&nbsp;...&nbsp;&quot;)&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>for&nbsp;i&nbsp;in&nbsp;Days:&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;print(i)&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p><strong>Output:</strong></p>\r\n\r\n<p>PlayNext</p>\r\n\r\n<p>Unmute</p>\r\n\r\n<p>Current Time&Acirc;&nbsp;0:00</p>\r\n\r\n<p>/</p>\r\n\r\n<p>Duration&Acirc;&nbsp;18:10</p>\r\n\r\n<p>Loaded:&nbsp;0.37%</p>\r\n\r\n<p>&Acirc;&nbsp;</p>\r\n\r\n<p>Fullscreen</p>\r\n\r\n<p>Backward Skip 10sPlay VideoForward Skip 10s</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<pre>\r\n{&#39;Friday&#39;, &#39;Tuesday&#39;, &#39;Monday&#39;, &#39;Saturday&#39;, &#39;Thursday&#39;, &#39;Sunday&#39;, &#39;Wednesday&#39;}\r\n&lt;class &#39;set&#39;&gt;\r\nlooping through the set elements ... \r\nFriday\r\nTuesday\r\nMonday\r\nSaturday\r\nThursday\r\nSunday\r\nWednesday\r\n</pre>\r\n\r\n<h3>Example 2: Using set() method</h3>\r\n\r\n<ol start=\"1\">\r\n	<li>Days&nbsp;=&nbsp;set([&quot;Monday&quot;,&nbsp;&quot;Tuesday&quot;,&nbsp;&quot;Wednesday&quot;,&nbsp;&quot;Thursday&quot;,&nbsp;&quot;Friday&quot;,&nbsp;&quot;Saturday&quot;,&nbsp;&quot;Sunday&quot;])&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>print(Days)&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>print(type(Days))&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>print(&quot;looping&nbsp;through&nbsp;the&nbsp;set&nbsp;elements&nbsp;...&nbsp;&quot;)&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>for&nbsp;i&nbsp;in&nbsp;Days:&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;print(i)&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p><strong>Output:</strong></p>\r\n\r\n<pre>\r\n{&#39;Friday&#39;, &#39;Wednesday&#39;, &#39;Thursday&#39;, &#39;Saturday&#39;, &#39;Monday&#39;, &#39;Tuesday&#39;, &#39;Sunday&#39;}\r\n&lt;class &#39;set&#39;&gt;\r\nlooping through the set elements ... \r\nFriday\r\nWednesday\r\nThursday\r\nSaturday\r\nMonday\r\nTuesday\r\nSunday\r\n</pre>\r\n\r\n<p>It can contain any type of element such as integer, float, tuple etc. But mutable elements (list, dictionary, set) can&#39;t be a member of set. Consider the following example.</p>\r\n\r\n<ol start=\"1\">\r\n	<li>#&nbsp;Creating&nbsp;a&nbsp;set&nbsp;which&nbsp;have&nbsp;immutable&nbsp;elements&nbsp;&nbsp;</li>\r\n	<li>set1&nbsp;=&nbsp;{1,2,3,&nbsp;&quot;JavaTpoint&quot;,&nbsp;20.5,&nbsp;14}&nbsp;&nbsp;</li>\r\n	<li>print(type(set1))&nbsp;&nbsp;</li>\r\n	<li>#Creating&nbsp;a&nbsp;set&nbsp;which&nbsp;have&nbsp;mutable&nbsp;element&nbsp;&nbsp;</li>\r\n	<li>set2&nbsp;=&nbsp;{1,2,3,[&quot;Javatpoint&quot;,4]}&nbsp;&nbsp;</li>\r\n	<li>print(type(set2))&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p><strong>Output:</strong></p>\r\n\r\n<pre>\r\n&lt;class &#39;set&#39;&gt;\r\n\r\nTraceback (most recent call last)\r\n&lt;ipython-input-5-9605bb6fbc68&gt; in &lt;module&gt;\r\n      4 \r\n      5 #Creating a set which holds mutable elements\r\n----&gt; 6 set2 = {1,2,3,[&quot;Javatpoint&quot;,4]}\r\n      7 print(type(set2))\r\n\r\nTypeError: unhashable type: &#39;list&#39;\r\n</pre>\r\n\r\n<p>In the above code, we have created two sets, the set&nbsp;<strong>set1</strong>&nbsp;have immutable elements and set2 have one mutable element as a list. While checking the type of set2, it raised an error, which means set can contain only immutable elements.</p>\r\n\r\n<p>Creating an empty set is a bit different because empty curly {} braces are also used to create a dictionary as well. So Python provides the set() method used without an argument to create an empty set.</p>\r\n\r\n<ol start=\"1\">\r\n	<li>#&nbsp;Empty&nbsp;curly&nbsp;braces&nbsp;will&nbsp;create&nbsp;dictionary&nbsp;&nbsp;</li>\r\n	<li>set3&nbsp;=&nbsp;{}&nbsp;&nbsp;</li>\r\n	<li>print(type(set3))&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;</li>\r\n	<li>#&nbsp;Empty&nbsp;set&nbsp;using&nbsp;set()&nbsp;function&nbsp;&nbsp;</li>\r\n	<li>set4&nbsp;=&nbsp;set()&nbsp;&nbsp;</li>\r\n	<li>print(type(set4))&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p><strong>Output:</strong></p>\r\n\r\n<pre>\r\n&lt;class &#39;dict&#39;&gt;\r\n&lt;class &#39;set&#39;&gt;\r\n</pre>\r\n\r\n<p>Let&#39;s see what happened if we provide the duplicate element to the set.</p>\r\n\r\n<ol start=\"1\">\r\n	<li>set5&nbsp;=&nbsp;{1,2,4,4,5,8,9,9,10}&nbsp;&nbsp;</li>\r\n	<li>print(&quot;Return&nbsp;set&nbsp;with&nbsp;unique&nbsp;elements:&quot;,set5)&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p><strong>Output:</strong></p>\r\n\r\n<pre>\r\nReturn set with unique elements: {1, 2, 4, 5, 8, 9, 10}\r\n</pre>\r\n\r\n<p>In the above code, we can see that&nbsp;<strong>set5</strong>&nbsp;consisted of multiple duplicate elements when we printed it remove the duplicity from the set.</p>\r\n\r\n<h2>Adding items to the set</h2>\r\n\r\n<p>Python provides the&nbsp;<strong>add()</strong>&nbsp;method and&nbsp;<strong>update()</strong>&nbsp;method which can be used to add some particular item to the set. The add() method is used to add a single element whereas the update() method is used to add multiple elements to the set. Consider the following example.</p>\r\n\r\n<h3>Example: 1 - Using add() method</h3>\r\n\r\n<ol start=\"1\">\r\n	<li>Months&nbsp;=&nbsp;set([&quot;January&quot;,&quot;February&quot;,&nbsp;&quot;March&quot;,&nbsp;&quot;April&quot;,&nbsp;&quot;May&quot;,&nbsp;&quot;June&quot;])&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>print(&quot;\nprinting&nbsp;the&nbsp;original&nbsp;set&nbsp;...&nbsp;&quot;)&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>print(months)&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>print(&quot;\nAdding&nbsp;other&nbsp;months&nbsp;to&nbsp;the&nbsp;set...&quot;);&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>Months.add(&quot;July&quot;);&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>Months.add&nbsp;(&quot;August&quot;);&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>print(&quot;\nPrinting&nbsp;the&nbsp;modified&nbsp;set...&quot;);&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>print(Months)&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>print(&quot;\nlooping&nbsp;through&nbsp;the&nbsp;set&nbsp;elements&nbsp;...&nbsp;&quot;)&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>for&nbsp;i&nbsp;in&nbsp;Months:&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;print(i)&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p><strong>Output:</strong></p>\r\n\r\n<pre>\r\nprinting the original set ... \r\n{&#39;February&#39;, &#39;May&#39;, &#39;April&#39;, &#39;March&#39;, &#39;June&#39;, &#39;January&#39;}\r\n\r\nAdding other months to the set...\r\n\r\nPrinting the modified set...\r\n{&#39;February&#39;, &#39;July&#39;, &#39;May&#39;, &#39;April&#39;, &#39;March&#39;, &#39;August&#39;, &#39;June&#39;, &#39;January&#39;}\r\n\r\nlooping through the set elements ... \r\nFebruary\r\nJuly\r\nMay\r\nApril\r\nMarch\r\nAugust\r\nJune\r\nJanuary \r\n</pre>\r\n\r\n<p>To add more than one item in the set, Python provides the&nbsp;<strong>update()</strong>&nbsp;method. It accepts iterable as an argument.</p>\r\n\r\n<p>Consider the following example.</p>\r\n\r\n<h3>Example - 2 Using update() function</h3>\r\n\r\n<ol start=\"1\">\r\n	<li>Months&nbsp;=&nbsp;set([&quot;January&quot;,&quot;February&quot;,&nbsp;&quot;March&quot;,&nbsp;&quot;April&quot;,&nbsp;&quot;May&quot;,&nbsp;&quot;June&quot;])&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>print(&quot;\nprinting&nbsp;the&nbsp;original&nbsp;set&nbsp;...&nbsp;&quot;)&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>print(Months)&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>print(&quot;\nupdating&nbsp;the&nbsp;original&nbsp;set&nbsp;...&nbsp;&quot;)&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>Months.update([&quot;July&quot;,&quot;August&quot;,&quot;September&quot;,&quot;October&quot;]);&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>print(&quot;\nprinting&nbsp;the&nbsp;modified&nbsp;set&nbsp;...&nbsp;&quot;)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>print(Months);&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p><strong>Output:</strong></p>\r\n\r\n<pre>\r\nprinting the original set ... \r\n{&#39;January&#39;, &#39;February&#39;, &#39;April&#39;, &#39;May&#39;, &#39;June&#39;, &#39;March&#39;}\r\n\r\nupdating the original set ... \r\nprinting the modified set ... \r\n{&#39;January&#39;, &#39;February&#39;, &#39;April&#39;, &#39;August&#39;, &#39;October&#39;, &#39;May&#39;, &#39;June&#39;, &#39;July&#39;, &#39;September&#39;, &#39;March&#39;}\r\n</pre>\r\n\r\n<h2>Removing items from the set</h2>\r\n\r\n<p>Python provides the&nbsp;<strong>discard()</strong>&nbsp;method and&nbsp;<strong>remove()</strong>&nbsp;method which can be used to remove the items from the set. The difference between these function, using discard() function if the item does not exist in the set then the set remain unchanged whereas remove() method will through an error.</p>\r\n\r\n<p>Consider the following example.</p>\r\n\r\n<h3>Example-1 Using discard() method</h3>\r\n\r\n<ol start=\"1\">\r\n	<li>months&nbsp;=&nbsp;set([&quot;January&quot;,&quot;February&quot;,&nbsp;&quot;March&quot;,&nbsp;&quot;April&quot;,&nbsp;&quot;May&quot;,&nbsp;&quot;June&quot;])&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>print(&quot;\nprinting&nbsp;the&nbsp;original&nbsp;set&nbsp;...&nbsp;&quot;)&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>print(months)&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>print(&quot;\nRemoving&nbsp;some&nbsp;months&nbsp;from&nbsp;the&nbsp;set...&quot;);&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>months.discard(&quot;January&quot;);&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>months.discard(&quot;May&quot;);&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>print(&quot;\nPrinting&nbsp;the&nbsp;modified&nbsp;set...&quot;);&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>print(months)&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>print(&quot;\nlooping&nbsp;through&nbsp;the&nbsp;set&nbsp;elements&nbsp;...&nbsp;&quot;)&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>for&nbsp;i&nbsp;in&nbsp;months:&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;print(i)&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p><strong>Output:</strong></p>\r\n\r\n<pre>\r\nprinting the original set ... \r\n{&#39;February&#39;, &#39;January&#39;, &#39;March&#39;, &#39;April&#39;, &#39;June&#39;, &#39;May&#39;}\r\n\r\nRemoving some months from the set...\r\n\r\nPrinting the modified set...\r\n{&#39;February&#39;, &#39;March&#39;, &#39;April&#39;, &#39;June&#39;}\r\n\r\nlooping through the set elements ... \r\nFebruary\r\nMarch\r\nApril\r\nJune\r\n</pre>\r\n\r\n<p>Python provides also the&nbsp;<strong>remove()</strong>&nbsp;method to remove the item from the set. Consider the following example to remove the items using&nbsp;<strong>remove()</strong>&nbsp;method.</p>\r\n\r\n<h3>Example-2 Using remove() function</h3>\r\n\r\n<ol start=\"1\">\r\n	<li>months&nbsp;=&nbsp;set([&quot;January&quot;,&quot;February&quot;,&nbsp;&quot;March&quot;,&nbsp;&quot;April&quot;,&nbsp;&quot;May&quot;,&nbsp;&quot;June&quot;])&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>print(&quot;\nprinting&nbsp;the&nbsp;original&nbsp;set&nbsp;...&nbsp;&quot;)&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>print(months)&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>print(&quot;\nRemoving&nbsp;some&nbsp;months&nbsp;from&nbsp;the&nbsp;set...&quot;);&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>months.remove(&quot;January&quot;);&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>months.remove(&quot;May&quot;);&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>print(&quot;\nPrinting&nbsp;the&nbsp;modified&nbsp;set...&quot;);&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>print(months)&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p><strong>Output:</strong></p>\r\n\r\n<pre>\r\nprinting the original set ... \r\n{&#39;February&#39;, &#39;June&#39;, &#39;April&#39;, &#39;May&#39;, &#39;January&#39;, &#39;March&#39;}\r\n\r\nRemoving some months from the set...\r\n\r\nPrinting the modified set...\r\n{&#39;February&#39;, &#39;June&#39;, &#39;April&#39;, &#39;March&#39;}\r\n</pre>\r\n\r\n<p>We can also use the pop() method to remove the item. Generally, the pop() method will always remove the last item but the set is unordered, we can&#39;t determine which element will be popped from set.</p>\r\n\r\n<p>Consider the following example to remove the item from the set using pop() method.</p>\r\n\r\n<ol start=\"1\">\r\n	<li>Months&nbsp;=&nbsp;set([&quot;January&quot;,&quot;February&quot;,&nbsp;&quot;March&quot;,&nbsp;&quot;April&quot;,&nbsp;&quot;May&quot;,&nbsp;&quot;June&quot;])&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>print(&quot;\nprinting&nbsp;the&nbsp;original&nbsp;set&nbsp;...&nbsp;&quot;)&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>print(Months)&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>print(&quot;\nRemoving&nbsp;some&nbsp;months&nbsp;from&nbsp;the&nbsp;set...&quot;);&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>Months.pop();&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>Months.pop();&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>print(&quot;\nPrinting&nbsp;the&nbsp;modified&nbsp;set...&quot;);&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>print(Months)&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p><strong>Output:</strong></p>\r\n\r\n<pre>\r\nprinting the original set ... \r\n{&#39;June&#39;, &#39;January&#39;, &#39;May&#39;, &#39;April&#39;, &#39;February&#39;, &#39;March&#39;}\r\n\r\nRemoving some months from the set...\r\n\r\nPrinting the modified set...\r\n{&#39;May&#39;, &#39;April&#39;, &#39;February&#39;, &#39;March&#39;}\r\n</pre>\r\n\r\n<p>In the above code, the last element of the&nbsp;<strong>Month</strong>&nbsp;set is&nbsp;<strong>March</strong>&nbsp;but the pop() method removed the&nbsp;<strong>June and January</strong>&nbsp;because the set is unordered and the pop() method could not determine the last element of the set.</p>\r\n\r\n<p>Python provides the clear() method to remove all the items from the set.</p>\r\n\r\n<p>Consider the following example.</p>\r\n\r\n<ol start=\"1\">\r\n	<li>Months&nbsp;=&nbsp;set([&quot;January&quot;,&quot;February&quot;,&nbsp;&quot;March&quot;,&nbsp;&quot;April&quot;,&nbsp;&quot;May&quot;,&nbsp;&quot;June&quot;])&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>print(&quot;\nprinting&nbsp;the&nbsp;original&nbsp;set&nbsp;...&nbsp;&quot;)&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>print(Months)&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>print(&quot;\nRemoving&nbsp;all&nbsp;the&nbsp;items&nbsp;from&nbsp;the&nbsp;set...&quot;);&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>Months.clear()&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>print(&quot;\nPrinting&nbsp;the&nbsp;modified&nbsp;set...&quot;)&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>print(Months)&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p><strong>Output:</strong></p>\r\n\r\n<pre>\r\nprinting the original set ... \r\n{&#39;January&#39;, &#39;May&#39;, &#39;June&#39;, &#39;April&#39;, &#39;March&#39;, &#39;February&#39;}\r\n\r\nRemoving all the items from the set...\r\n\r\nPrinting the modified set...\r\nset()\r\n</pre>\r\n\r\n<h2>Difference between discard() and remove()</h2>\r\n\r\n<p>Despite the fact that&nbsp;<strong>discard()</strong>&nbsp;and&nbsp;<strong>remove()</strong>&nbsp;method both perform the same task, There is one main difference between discard() and remove().</p>\r\n\r\n<p>If the key to be deleted from the set using discard() doesn&#39;t exist in the set, the Python will not give the error. The program maintains its control flow.</p>\r\n\r\n<p>On the other hand, if the item to be deleted from the set using remove() doesn&#39;t exist in the set, the Python will raise an error.</p>\r\n\r\n<p>Consider the following example.</p>\r\n\r\n<h3>Example-</h3>\r\n\r\n<ol start=\"1\">\r\n	<li>Months&nbsp;=&nbsp;set([&quot;January&quot;,&quot;February&quot;,&nbsp;&quot;March&quot;,&nbsp;&quot;April&quot;,&nbsp;&quot;May&quot;,&nbsp;&quot;June&quot;])&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>print(&quot;\nprinting&nbsp;the&nbsp;original&nbsp;set&nbsp;...&nbsp;&quot;)&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>print(Months)&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>print(&quot;\nRemoving&nbsp;items&nbsp;through&nbsp;discard()&nbsp;method...&quot;);&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>Months.discard(&quot;Feb&quot;);&nbsp;#will&nbsp;not&nbsp;give&nbsp;an&nbsp;error&nbsp;although&nbsp;the&nbsp;key&nbsp;feb&nbsp;is&nbsp;not&nbsp;available&nbsp;in&nbsp;the&nbsp;set&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>print(&quot;\nprinting&nbsp;the&nbsp;modified&nbsp;set...&quot;)&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>print(Months)&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>print(&quot;\nRemoving&nbsp;items&nbsp;through&nbsp;remove()&nbsp;method...&quot;);&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>Months.remove(&quot;Jan&quot;)&nbsp;#will&nbsp;give&nbsp;an&nbsp;error&nbsp;as&nbsp;the&nbsp;key&nbsp;jan&nbsp;is&nbsp;not&nbsp;available&nbsp;in&nbsp;the&nbsp;set.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>print(&quot;\nPrinting&nbsp;the&nbsp;modified&nbsp;set...&quot;)&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>print(Months)&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p><strong>Output:</strong></p>\r\n\r\n<pre>\r\nprinting the original set ... \r\n{&#39;March&#39;, &#39;January&#39;, &#39;April&#39;, &#39;June&#39;, &#39;February&#39;, &#39;May&#39;}\r\n\r\nRemoving items through discard() method...\r\n\r\nprinting the modified set...\r\n{&#39;March&#39;, &#39;January&#39;, &#39;April&#39;, &#39;June&#39;, &#39;February&#39;, &#39;May&#39;}\r\n\r\nRemoving items through remove() method...\r\nTraceback (most recent call last):\r\n  File &quot;set.py&quot;, line 9, in \r\n    Months.remove(&quot;Jan&quot;)\r\nKeyError: &#39;Jan&#39;\r\n</pre>\r\n\r\n<h2>Python Set Operations</h2>\r\n\r\n<p>Set can be performed mathematical operation such as union, intersection, difference, and symmetric difference. Python provides the facility to carry out these operations with operators or methods. We describe these operations as follows.</p>\r\n\r\n<h3>Union of two Sets</h3>\r\n\r\n<p>The union of two sets is calculated by using the pipe (|) operator. The union of the two sets contains all the items that are present in both the sets.</p>\r\n\r\n<p><img alt=\"Python Set\" src=\"https://static.javatpoint.com/python/images/python-set.png\" /></p>\r\n', 'PYTHON');
INSERT INTO `courses` (`id`, `topic_name`, `description`, `course_name`) VALUES
(73, 'Python Dictionary', '<p>An effective data structure for storing data in Python is dictionaries, in which can simulate the real-life data arrangement where some specific value exists for some particular key.</p>\r\n\r\n<ul>\r\n	<li>Python Dictionary is used to store the data in a key-value pair format.</li>\r\n	<li>It is the mutable data-structure.</li>\r\n	<li>The elements Keys and values is employed to create the dictionary.</li>\r\n	<li>Keys must consist of just one element.</li>\r\n	<li>Value can be any type such as list, tuple, integer, etc.</li>\r\n</ul>\r\n\r\n<p>In other words, we can say that a dictionary is the collection of key-value pairs where the value can be of any Python object. In contrast, the keys are the immutable Python object, i.e., Numbers, string, or tuple. Dictionary entries are ordered as of Python version 3.7. In Python 3.6 and before, dictionaries are generally unordered.</p>\r\n\r\n<h2>Creating the Dictionary</h2>\r\n\r\n<p>The simplest approach to create a Python dictionary is by using curly brackets {}, but there are other methods as well. The dictionary can be created by using multiple key-value pairs enclosed with the curly brackets {}, and each key is separated from its value by the colon (:). The syntax to define the dictionary is given below.</p>\r\n\r\n<p><strong>Syntax:</strong></p>\r\n\r\n<p>PlayNext</p>\r\n\r\n<p>Unmute</p>\r\n\r\n<p>Current Time&Acirc;&nbsp;0:00</p>\r\n\r\n<p>/</p>\r\n\r\n<p>Duration&Acirc;&nbsp;18:10</p>\r\n\r\n<p>Loaded:&nbsp;0.37%</p>\r\n\r\n<p>&Acirc;&nbsp;</p>\r\n\r\n<p>Fullscreen</p>\r\n\r\n<p>Backward Skip 10sPlay VideoForward Skip 10s</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<ol start=\"1\">\r\n	<li>Dict&nbsp;=&nbsp;{&quot;Name&quot;:&nbsp;&quot;Chris&quot;,&nbsp;&quot;Age&quot;:&nbsp;20}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p>In the above dictionary&nbsp;<strong>Dict</strong>, The keys&nbsp;<strong>Name</strong>&nbsp;and&nbsp;<strong>Age</strong>&nbsp;are the strings which comes under the category of an immutable object.</p>\r\n\r\n<p>Let&#39;s see an example to create a dictionary and print its content.</p>\r\n\r\n<p><strong>Code</strong></p>\r\n\r\n<ol start=\"1\">\r\n	<li>Employee&nbsp;=&nbsp;{&quot;Name&quot;:&nbsp;&quot;John&quot;,&nbsp;&quot;Age&quot;:&nbsp;29,&nbsp;&quot;salary&quot;:25000,&quot;Company&quot;:&quot;GOOGLE&quot;}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>print(type(Employee))&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>print(&quot;printing&nbsp;Employee&nbsp;data&nbsp;....&nbsp;&quot;)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>print(Employee)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p><strong>Output</strong></p>\r\n\r\n<pre>\r\n&lt;class &#39;dict&#39;&gt;\r\nprinting Employee data .... \r\n{&#39;Name&#39;: &#39;John&#39;, &#39;Age&#39;: 29, &#39;salary&#39;: 25000, &#39;Company&#39;: &#39;GOOGLE&#39;}\r\n</pre>\r\n\r\n<p>Python provides the built-in function&nbsp;<strong>dict()</strong>&nbsp;method which is also used to create the dictionary.</p>\r\n\r\n<p>The empty curly braces {} is used to create empty dictionary.</p>\r\n\r\n<p><strong>Code</strong></p>\r\n\r\n<ol start=\"1\">\r\n	<li>#&nbsp;Creating&nbsp;an&nbsp;empty&nbsp;Dictionary&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>Dict&nbsp;=&nbsp;{}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>print(&quot;Empty&nbsp;Dictionary:&nbsp;&quot;)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>print(Dict)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>#&nbsp;Creating&nbsp;a&nbsp;Dictionary&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>#&nbsp;with&nbsp;dict()&nbsp;method&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>Dict&nbsp;=&nbsp;dict({1:&nbsp;&#39;Microsoft&#39;,&nbsp;2:&nbsp;&#39;Google&#39;,&nbsp;3:&#39;Facebook&#39;})&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>print(&quot;\nCreate&nbsp;Dictionary&nbsp;by&nbsp;using&nbsp;&nbsp;dict():&nbsp;&quot;)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>print(Dict)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>#&nbsp;Creating&nbsp;a&nbsp;Dictionary&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>#&nbsp;with&nbsp;each&nbsp;item&nbsp;as&nbsp;a&nbsp;Pair&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>Dict&nbsp;=&nbsp;dict([(4,&nbsp;&#39;Praneeth&#39;),&nbsp;(2,&nbsp;&#39;Varma&#39;)])&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>print(&quot;\nDictionary&nbsp;with&nbsp;each&nbsp;item&nbsp;as&nbsp;a&nbsp;pair:&nbsp;&quot;)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>print(Dict)&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p><strong>Output</strong></p>\r\n\r\n<pre>\r\nEmpty Dictionary: \r\n{}\r\n\r\nCreate Dictionary by using  dict(): \r\n{1: &#39;Microsoft&#39;, 2: &#39;Google&#39;, 3: &#39;Facebook&#39;}\r\n\r\nDictionary with each item as a pair: \r\n{4: &#39;Praneeth&#39;, 2: &#39;Varma&#39;}\r\n</pre>\r\n\r\n<h2>Accessing the dictionary values</h2>\r\n\r\n<p>We&#39;ve discussed about using indexing to access data stored in lists and tuples. However, because the dictionary&#39;s keys are distinct from one another, it is possible to get the values by utilising the keys. The dictionary values can be accessed in the following way.</p>\r\n\r\n<p><strong>Code</strong></p>\r\n\r\n<ol start=\"1\">\r\n	<li>Employee&nbsp;=&nbsp;{&quot;Name&quot;:&nbsp;&quot;David&quot;,&nbsp;&quot;Age&quot;:&nbsp;30,&nbsp;&quot;salary&quot;:55000,&quot;Company&quot;:&quot;GOOGLE&quot;}&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>print(type(Employee))&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>print(&quot;printing&nbsp;Employee&nbsp;data&nbsp;....&nbsp;&quot;)&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>print(&quot;Name&nbsp;:&nbsp;%s&quot;&nbsp;%Employee[&quot;Name&quot;])&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>print(&quot;Age&nbsp;:&nbsp;%d&quot;&nbsp;%Employee[&quot;Age&quot;])&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>print(&quot;Salary&nbsp;:&nbsp;%d&quot;&nbsp;%Employee[&quot;salary&quot;])&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>print(&quot;Company&nbsp;:&nbsp;%s&quot;&nbsp;%Employee[&quot;Company&quot;])&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p><strong>Output</strong></p>\r\n\r\n<pre>\r\n&lt;class &#39;dict&#39;&gt;\r\nprinting Employee data .... \r\nName : David\r\nAge : 30\r\nSalary : 55000\r\nCompany : GOOGLE\r\n</pre>\r\n\r\n<p>Python provides us with an alternative to use the get() method to access the dictionary values. It would give the same result as given by the indexing.</p>\r\n\r\n<h2>Adding Dictionary Values</h2>\r\n\r\n<p>The dictionary is a mutable data type, and its values can be updated by using the specific keys. The value can be updated along with key&nbsp;<strong>Dict[key] = value</strong>. The update() method is also used to update an existing value.</p>\r\n\r\n<p><iframe frameborder=\"0\" height=\"280\" id=\"google_ads_iframe_/103512698,22511567001/22794806207_0\" name=\"google_ads_iframe_/103512698,22511567001/22794806207_0\" scrolling=\"no\" title=\"3rd party ad content\" width=\"728\"></iframe></p>\r\n\r\n<h4>Note: If the key-value already present in the dictionary, the value gets updated. Otherwise, the new keys added in the dictionary.</h4>\r\n\r\n<p>Let&#39;s see an example to update the dictionary values.</p>\r\n\r\n<h3>Example - 1:</h3>\r\n\r\n<p><strong>Code</strong></p>\r\n\r\n<ol start=\"1\">\r\n	<li>#&nbsp;Creating&nbsp;an&nbsp;empty&nbsp;Dictionary&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>Dict&nbsp;=&nbsp;{}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>print(&quot;Empty&nbsp;Dictionary:&nbsp;&quot;)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>print(Dict)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>#&nbsp;Adding&nbsp;elements&nbsp;to&nbsp;dictionary&nbsp;one&nbsp;at&nbsp;a&nbsp;time&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>Dict[0]&nbsp;=&nbsp;&#39;Peter&#39;&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>Dict[2]&nbsp;=&nbsp;&#39;Joseph&#39;&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>Dict[3]&nbsp;=&nbsp;&#39;Ricky&#39;&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>print(&quot;\nDictionary&nbsp;after&nbsp;adding&nbsp;3&nbsp;elements:&nbsp;&quot;)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>print(Dict)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>#&nbsp;Adding&nbsp;set&nbsp;of&nbsp;values&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>#&nbsp;with&nbsp;a&nbsp;single&nbsp;Key&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>#&nbsp;The&nbsp;Emp_ages&nbsp;doesn&#39;t&nbsp;exist&nbsp;to&nbsp;dictionary&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>Dict[&#39;Emp_ages&#39;]&nbsp;=&nbsp;20,&nbsp;33,&nbsp;24&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>print(&quot;\nDictionary&nbsp;after&nbsp;adding&nbsp;3&nbsp;elements:&nbsp;&quot;)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>print(Dict)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>#&nbsp;Updating&nbsp;existing&nbsp;Key&#39;s&nbsp;Value&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>Dict[3]&nbsp;=&nbsp;&#39;JavaTpoint&#39;&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>print(&quot;\nUpdated&nbsp;key&nbsp;value:&nbsp;&quot;)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>print(Dict)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p><strong>Output</strong></p>\r\n\r\n<pre>\r\nEmpty Dictionary: \r\n{}\r\n\r\nDictionary after adding 3 elements: \r\n{0: &#39;Peter&#39;, 2: &#39;Joseph&#39;, 3: &#39;Ricky&#39;}\r\n\r\nDictionary after adding 3 elements: \r\n{0: &#39;Peter&#39;, 2: &#39;Joseph&#39;, 3: &#39;Ricky&#39;, &#39;Emp_ages&#39;: (20, 33, 24)}\r\n\r\nUpdated key value: \r\n{0: &#39;Peter&#39;, 2: &#39;Joseph&#39;, 3: &#39;JavaTpoint&#39;, &#39;Emp_ages&#39;: (20, 33, 24)}\r\n</pre>\r\n\r\n<h3>Example - 2:</h3>\r\n\r\n<p><strong>Code</strong></p>\r\n\r\n<ol start=\"1\">\r\n	<li>Employee&nbsp;=&nbsp;{&quot;Name&quot;:&nbsp;&quot;David&quot;,&nbsp;&quot;Age&quot;:&nbsp;30,&nbsp;&quot;salary&quot;:55000,&quot;Company&quot;:&quot;GOOGLE&quot;}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>print(type(Employee))&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>print(&quot;printing&nbsp;Employee&nbsp;data&nbsp;....&nbsp;&quot;)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>print(Employee)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>print(&quot;Enter&nbsp;the&nbsp;details&nbsp;of&nbsp;the&nbsp;new&nbsp;employee....&quot;);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>Employee[&quot;Name&quot;]&nbsp;=&nbsp;input(&quot;Name:&nbsp;&quot;);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>Employee[&quot;Age&quot;]&nbsp;=&nbsp;int(input(&quot;Age:&nbsp;&quot;));&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>Employee[&quot;salary&quot;]&nbsp;=&nbsp;int(input(&quot;Salary:&nbsp;&quot;));&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>Employee[&quot;Company&quot;]&nbsp;=&nbsp;input(&quot;Company:&quot;);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>print(&quot;printing&nbsp;the&nbsp;new&nbsp;data&quot;);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>print(Employee)&nbsp;&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p><strong>Output</strong></p>\r\n\r\n<pre>\r\n&lt;class &#39;dict&#39;&gt;\r\nprinting Employee data .... \r\n{&#39;Name&#39;: &#39;David&#39;, &#39;Age&#39;: 30, &#39;salary&#39;: 55000, &#39;Company&#39;: &#39;GOOGLE&#39;}\r\nEnter the details of the new employee....\r\nName: Rahul\r\nAge: 28\r\nSalary: 36000\r\nCompany:Microsoft\r\nprinting the new data\r\n{&#39;Name&#39;: &#39;Rahul&#39;, &#39;Age&#39;: 28, &#39;salary&#39;: 36000, &#39;Company&#39;: &#39;Microsoft&#39;}\r\n</pre>\r\n\r\n<h2>Deleting Elements using del Keyword</h2>\r\n\r\n<p>The items of the dictionary can be deleted by using the&nbsp;<strong>del</strong>&nbsp;keyword as given below.</p>\r\n\r\n<p><strong>Code</strong></p>\r\n\r\n<ol start=\"1\">\r\n	<li>Employee&nbsp;=&nbsp;{&quot;Name&quot;:&nbsp;&quot;David&quot;,&nbsp;&quot;Age&quot;:&nbsp;30,&nbsp;&quot;salary&quot;:55000,&quot;Company&quot;:&quot;GOOGLE&quot;}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>print(type(Employee))&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>print(&quot;printing&nbsp;Employee&nbsp;data&nbsp;....&nbsp;&quot;)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>print(Employee)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>print(&quot;Deleting&nbsp;some&nbsp;of&nbsp;the&nbsp;employee&nbsp;data&quot;)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>del&nbsp;Employee[&quot;Name&quot;]&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>del&nbsp;Employee[&quot;Company&quot;]&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>print(&quot;printing&nbsp;the&nbsp;modified&nbsp;information&nbsp;&quot;)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>print(Employee)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>print(&quot;Deleting&nbsp;the&nbsp;dictionary:&nbsp;Employee&quot;);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>del&nbsp;Employee&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>print(&quot;Lets&nbsp;try&nbsp;to&nbsp;print&nbsp;it&nbsp;again&nbsp;&quot;);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>print(Employee)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p><strong>Output</strong></p>\r\n\r\n<pre>\r\n&lt;class &#39;dict&#39;&gt;\r\nprinting Employee data .... \r\n{&#39;Name&#39;: &#39;David&#39;, &#39;Age&#39;: 30, &#39;salary&#39;: 55000, &#39;Company&#39;: &#39;GOOGLE&#39;}\r\nDeleting some of the employee data\r\nprinting the modified information \r\n{&#39;Age&#39;: 30, &#39;salary&#39;: 55000}\r\nDeleting the dictionary: Employee\r\nLets try to print it again \r\nNameError: name &#39;Employee&#39; is not defined\r\n</pre>\r\n\r\n<p>The last print statement in the above code, it raised an error because we tried to print the Employee dictionary that already deleted.</p>\r\n\r\n<h2>Deleting Elements using pop() Method</h2>\r\n\r\n<p>The&nbsp;<strong>pop()</strong>&nbsp;method accepts the key as an argument and remove the associated value. Consider the following example.</p>\r\n\r\n<p><strong>Code</strong></p>\r\n\r\n<ol start=\"1\">\r\n	<li>#&nbsp;Creating&nbsp;a&nbsp;Dictionary&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>Dict&nbsp;=&nbsp;{1:&nbsp;&#39;JavaTpoint&#39;,&nbsp;2:&nbsp;&#39;Learning&#39;,&nbsp;3:&nbsp;&#39;Website&#39;}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>#&nbsp;Deleting&nbsp;a&nbsp;key&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>#&nbsp;using&nbsp;pop()&nbsp;method&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>pop_key&nbsp;=&nbsp;Dict.pop(2)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>print(Dict)&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p><strong>Output</strong></p>\r\n\r\n<p><iframe frameborder=\"0\" height=\"280\" id=\"google_ads_iframe_/103512698,22511567001/22794805910_0\" name=\"google_ads_iframe_/103512698,22511567001/22794805910_0\" scrolling=\"no\" title=\"3rd party ad content\" width=\"728\"></iframe></p>\r\n\r\n<pre>\r\n{1: &#39;JavaTpoint&#39;, 3: &#39;Website&#39;}\r\n</pre>\r\n\r\n<p>Python also provides a built-in methods popitem() and clear() method for remove elements from the dictionary. The popitem() removes the arbitrary element from a dictionary, whereas the clear() method removes all elements to the whole dictionary.</p>\r\n\r\n<h2>Iterating Dictionary</h2>\r\n\r\n<p>A dictionary can be iterated using for loop as given below.</p>\r\n\r\n<h3>Example 1</h3>\r\n\r\n<p><strong>Code</strong></p>\r\n\r\n<ol start=\"1\">\r\n	<li>#&nbsp;for&nbsp;loop&nbsp;to&nbsp;print&nbsp;all&nbsp;the&nbsp;keys&nbsp;of&nbsp;a&nbsp;dictionary&nbsp;&nbsp;</li>\r\n	<li>Employee&nbsp;=&nbsp;{&quot;Name&quot;:&nbsp;&quot;John&quot;,&nbsp;&quot;Age&quot;:&nbsp;29,&nbsp;&quot;salary&quot;:25000,&quot;Company&quot;:&quot;GOOGLE&quot;}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>for&nbsp;x&nbsp;in&nbsp;Employee:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;print(x)&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p><strong>Output</strong></p>\r\n\r\n<pre>\r\nName\r\nAge\r\nsalary\r\nCompany\r\n</pre>\r\n\r\n<h3>Example 2</h3>\r\n\r\n<p><strong>Code</strong></p>\r\n\r\n<ol start=\"1\">\r\n	<li>#for&nbsp;loop&nbsp;to&nbsp;print&nbsp;all&nbsp;the&nbsp;values&nbsp;of&nbsp;the&nbsp;dictionary&nbsp;&nbsp;</li>\r\n	<li>Employee&nbsp;=&nbsp;{&quot;Name&quot;:&nbsp;&quot;John&quot;,&nbsp;&quot;Age&quot;:&nbsp;29,&nbsp;&quot;salary&quot;:25000,&quot;Company&quot;:&quot;GOOGLE&quot;}&nbsp;for&nbsp;x&nbsp;in&nbsp;Employee:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>&nbsp;print(Employee[x])&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p><strong>Output</strong></p>\r\n\r\n<pre>\r\nJohn\r\n29\r\n25000\r\nGOOGLE\r\n</pre>\r\n\r\n<h3>Example - 3</h3>\r\n\r\n<p><strong>Code</strong></p>\r\n\r\n<ol start=\"1\">\r\n	<li>#for&nbsp;loop&nbsp;to&nbsp;print&nbsp;the&nbsp;values&nbsp;of&nbsp;the&nbsp;dictionary&nbsp;by&nbsp;using&nbsp;values()&nbsp;method.&nbsp;&nbsp;</li>\r\n	<li>Employee&nbsp;=&nbsp;{&quot;Name&quot;:&nbsp;&quot;John&quot;,&nbsp;&quot;Age&quot;:&nbsp;29,&nbsp;&quot;salary&quot;:25000,&quot;Company&quot;:&quot;GOOGLE&quot;}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>for&nbsp;x&nbsp;in&nbsp;Employee.values():&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;print(x)&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p><strong>Output</strong></p>\r\n\r\n<pre>\r\nJohn\r\n29\r\n25000\r\nGOOGLE\r\n</pre>\r\n\r\n<h3>Example 4</h3>\r\n\r\n<p><strong>Code</strong></p>\r\n\r\n<ol start=\"1\">\r\n	<li>#for&nbsp;loop&nbsp;to&nbsp;print&nbsp;the&nbsp;items&nbsp;of&nbsp;the&nbsp;dictionary&nbsp;by&nbsp;using&nbsp;items()&nbsp;method&nbsp;&nbsp;</li>\r\n	<li>Employee&nbsp;=&nbsp;{&quot;Name&quot;:&nbsp;&quot;John&quot;,&nbsp;&quot;Age&quot;:&nbsp;29,&nbsp;&quot;salary&quot;:25000,&quot;Company&quot;:&quot;GOOGLE&quot;}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>for&nbsp;x&nbsp;in&nbsp;Employee.items():&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;print(x)&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p><strong>Output</strong></p>\r\n\r\n<pre>\r\n(&#39;Name&#39;, &#39;John&#39;)\r\n(&#39;Age&#39;, 29)\r\n(&#39;salary&#39;, 25000)\r\n(&#39;Company&#39;, &#39;GOOGLE&#39;)\r\n</pre>\r\n\r\n<h2>Properties of Dictionary Keys</h2>\r\n\r\n<p>1. In the dictionary, we cannot store multiple values for the same keys. If we pass more than one value for a single key, then the value which is last assigned is considered as the value of the key.</p>\r\n\r\n<p>Consider the following example.</p>\r\n\r\n<p><strong>Code</strong></p>\r\n\r\n<ol start=\"1\">\r\n	<li>Employee={&quot;Name&quot;:&quot;John&quot;,&quot;Age&quot;:29,&quot;Salary&quot;:25000,&quot;Company&quot;:&quot;GOOGLE&quot;,&quot;Name&quot;:&nbsp;&nbsp;</li>\r\n	<li>&quot;John&quot;}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>for&nbsp;x,y&nbsp;in&nbsp;Employee.items():&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;print(x,y)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p><strong>Output</strong></p>\r\n\r\n<pre>\r\nName John\r\nAge 29\r\nSalary 25000\r\nCompany GOOGLE\r\nIn [ ]:\r\n</pre>\r\n\r\n<p>2. In python, the key cannot be any mutable object. We can use numbers, strings, or tuples as the key, but we cannot use any mutable object like the list as the key in the dictionary.</p>\r\n\r\n<p>Consider the following example.</p>\r\n\r\n<p><strong>Code</strong></p>\r\n\r\n<ol start=\"1\">\r\n	<li>Employee&nbsp;=&nbsp;{&quot;Name&quot;:&nbsp;&quot;John&quot;,&nbsp;&quot;Age&quot;:&nbsp;29,&nbsp;&quot;salary&quot;:25000,&quot;Company&quot;:&quot;GOOGLE&quot;,[100,201,301]:&quot;Department&nbsp;ID&quot;}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>for&nbsp;x,y&nbsp;in&nbsp;Employee.items():&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;print(x,y)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p><strong>Output</strong></p>\r\n\r\n<pre>\r\nTraceback (most recent call last):\r\n  File &quot;dictionary.py&quot;, line 1, in \r\n    Employee = {&quot;Name&quot;: &quot;John&quot;, &quot;Age&quot;: 29, &quot;salary&quot;:25000,&quot;Company&quot;:&quot;GOOGLE&quot;,[100,201,301]:&quot;Department ID&quot;}\r\nTypeError: unhashable type: &#39;list&#39;\r\n</pre>\r\n\r\n<h2>Built-in Dictionary Functions</h2>\r\n\r\n<p>A technique that may be used on a construct to produce a value is known as a function. Additionally, it doesn&#39;t change the construct. A Python dictionary can be used with a handful of the methods that Python provides.</p>\r\n\r\n<p>The built-in python dictionary methods along with the description are given below.</p>\r\n\r\n<ul>\r\n	<li><strong>len()</strong></li>\r\n</ul>\r\n\r\n<p>Python&#39;s len() method returns the dictionary&#39;s length. Each key-value pair lengthens the string by one.</p>\r\n\r\n<p><strong>Code</strong></p>\r\n\r\n<ol start=\"1\">\r\n	<li>dict&nbsp;=&nbsp;{1:&nbsp;&quot;Ayan&quot;,&nbsp;2:&nbsp;&quot;Bunny&quot;,&nbsp;3:&nbsp;&quot;Ram&quot;,&nbsp;4:&nbsp;&quot;Bheem&quot;}&nbsp;&nbsp;</li>\r\n	<li>len(dict)&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p><strong>Output</strong></p>\r\n\r\n<pre>\r\n4\r\n</pre>\r\n\r\n<ul>\r\n	<li><strong>any()</strong></li>\r\n</ul>\r\n\r\n<p>The any() method returns True indeed if one dictionary key does have a Boolean expression of True, much like it does for lists and tuples.</p>\r\n\r\n<p><strong>Code</strong></p>\r\n\r\n<ol start=\"1\">\r\n	<li>dict&nbsp;=&nbsp;{1:&nbsp;&quot;Ayan&quot;,&nbsp;2:&nbsp;&quot;Bunny&quot;,&nbsp;3:&nbsp;&quot;Ram&quot;,&nbsp;4:&nbsp;&quot;Bheem&quot;}&nbsp;&nbsp;</li>\r\n	<li>any({&#39;&#39;:&#39;&#39;,&#39;&#39;:&#39;&#39;,&#39;3&#39;:&#39;&#39;})&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p><strong>Output</strong></p>\r\n\r\n<pre>\r\nTrue\r\n</pre>\r\n\r\n<ul>\r\n	<li><strong>all()</strong></li>\r\n</ul>\r\n\r\n<p>Unlike in any() method, all() only returns True if each of the dictionary&#39;s keys contain a True Boolean value.</p>\r\n\r\n<p><strong>Code</strong></p>\r\n\r\n<ol start=\"1\">\r\n	<li>dict&nbsp;=&nbsp;{1:&nbsp;&quot;Ayan&quot;,&nbsp;2:&nbsp;&quot;Bunny&quot;,&nbsp;3:&nbsp;&quot;Ram&quot;,&nbsp;4:&nbsp;&quot;Bheem&quot;}&nbsp;&nbsp;</li>\r\n	<li>all({1:&#39;&#39;,2:&#39;&#39;,&#39;&#39;:&#39;&#39;})&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p><strong>Output</strong></p>\r\n\r\n<pre>\r\nFalse\r\n</pre>\r\n\r\n<ul>\r\n	<li><strong>sorted()</strong></li>\r\n</ul>\r\n\r\n<p>The sorted() method returns an ordered series of the dictionary&#39;s keys, much like it does with lists as well as tuples. The initial Python dictionary is not changed by the ascending sorting.</p>\r\n\r\n<p><strong>Code</strong></p>\r\n\r\n<ol start=\"1\">\r\n	<li>dict&nbsp;=&nbsp;{7:&nbsp;&quot;Ayan&quot;,&nbsp;5:&nbsp;&quot;Bunny&quot;,&nbsp;8:&nbsp;&quot;Ram&quot;,&nbsp;1:&nbsp;&quot;Bheem&quot;}&nbsp;&nbsp;</li>\r\n	<li>sorted(dict)&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p><strong>Output</strong></p>\r\n\r\n<pre>\r\n[ 1, 5, 7, 8]\r\n</pre>\r\n\r\n<h2>Built-in Dictionary methods</h2>\r\n\r\n<p>The built-in python dictionary methods along with the description and Code are given below.</p>\r\n\r\n<ul>\r\n	<li><strong>clear()</strong></li>\r\n</ul>\r\n\r\n<p>It is used to delete all the items of the dictionary.</p>\r\n\r\n<p><strong>Code</strong></p>\r\n\r\n<ol start=\"1\">\r\n	<li>#&nbsp;dictionary&nbsp;methods&nbsp;&nbsp;</li>\r\n	<li>dict&nbsp;=&nbsp;{1:&nbsp;&quot;Microsoft&quot;,&nbsp;2:&nbsp;&quot;Google&quot;,&nbsp;3:&nbsp;&quot;Facebook&quot;,&nbsp;4:&nbsp;&quot;Amazon&quot;,&nbsp;5:&nbsp;&quot;Flipkart&quot;}&nbsp;&nbsp;</li>\r\n	<li>#&nbsp;clear()&nbsp;method&nbsp;&nbsp;</li>\r\n	<li>dict.clear()&nbsp;&nbsp;</li>\r\n	<li>print(dict)&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p><strong>Output</strong></p>\r\n\r\n<pre>\r\n{ }\r\n</pre>\r\n\r\n<ul>\r\n	<li><strong>copy()</strong></li>\r\n</ul>\r\n\r\n<p>It returns a shallow copy of the dictionary.</p>\r\n\r\n<p><strong>Code</strong></p>\r\n\r\n<ol start=\"1\">\r\n	<li>#&nbsp;dictionary&nbsp;methods&nbsp;&nbsp;</li>\r\n	<li>dict&nbsp;=&nbsp;{1:&nbsp;&quot;Microsoft&quot;,&nbsp;2:&nbsp;&quot;Google&quot;,&nbsp;3:&nbsp;&quot;Facebook&quot;,&nbsp;4:&nbsp;&quot;Amazon&quot;,&nbsp;5:&nbsp;&quot;Flipkart&quot;}&nbsp;&nbsp;</li>\r\n	<li>#&nbsp;copy()&nbsp;method&nbsp;&nbsp;</li>\r\n	<li>dict_demo&nbsp;=&nbsp;dict.copy()&nbsp;&nbsp;</li>\r\n	<li>print(dict_demo)&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p><strong>Output</strong></p>\r\n\r\n<pre>\r\n{1: &#39;Microsoft&#39;, 2: &#39;Google&#39;, 3: &#39;Facebook&#39;, 4: &#39;Amazon&#39;, 5: &#39;Flipkart&#39;}\r\n</pre>\r\n\r\n<ul>\r\n	<li><strong>pop()</strong></li>\r\n</ul>\r\n\r\n<p>eliminates the element using the defined key.</p>\r\n\r\n<p><strong>Code</strong></p>\r\n\r\n<ol start=\"1\">\r\n	<li>#&nbsp;dictionary&nbsp;methods&nbsp;&nbsp;</li>\r\n	<li>dict&nbsp;=&nbsp;{1:&nbsp;&quot;Microsoft&quot;,&nbsp;2:&nbsp;&quot;Google&quot;,&nbsp;3:&nbsp;&quot;Facebook&quot;,&nbsp;4:&nbsp;&quot;Amazon&quot;,&nbsp;5:&nbsp;&quot;Flipkart&quot;}&nbsp;&nbsp;</li>\r\n	<li>#&nbsp;pop()&nbsp;method&nbsp;&nbsp;</li>\r\n	<li>dict_demo&nbsp;=&nbsp;dict.copy()&nbsp;&nbsp;</li>\r\n	<li>x&nbsp;=&nbsp;dict_demo.pop(1)&nbsp;&nbsp;</li>\r\n	<li>print(x)&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p><strong>Output</strong></p>\r\n\r\n<pre>\r\n{2: &#39;Google&#39;, 3: &#39;Facebook&#39;, 4: &#39;Amazon&#39;, 5: &#39;Flipkart&#39;}\r\n</pre>\r\n\r\n<p><strong>popitem()</strong></p>\r\n\r\n<p>removes the most recent key-value pair entered</p>\r\n\r\n<p><strong>Code</strong></p>\r\n\r\n<ol start=\"1\">\r\n	<li>#&nbsp;dictionary&nbsp;methods&nbsp;&nbsp;</li>\r\n	<li>dict&nbsp;=&nbsp;{1:&nbsp;&quot;Microsoft&quot;,&nbsp;2:&nbsp;&quot;Google&quot;,&nbsp;3:&nbsp;&quot;Facebook&quot;,&nbsp;4:&nbsp;&quot;Amazon&quot;,&nbsp;5:&nbsp;&quot;Flipkart&quot;}&nbsp;&nbsp;</li>\r\n	<li>#&nbsp;popitem()&nbsp;method&nbsp;&nbsp;</li>\r\n	<li>dict_demo.popitem()&nbsp;&nbsp;</li>\r\n	<li>print(dict_demo)&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p><strong>Output</strong></p>\r\n\r\n<pre>\r\n{1: &#39;Microsoft&#39;, 2: &#39;Google&#39;, 3: &#39;Facebook&#39;}\r\n</pre>\r\n\r\n<ul>\r\n	<li><strong>keys()</strong></li>\r\n</ul>\r\n\r\n<p>It returns all the keys of the dictionary.</p>\r\n\r\n<p><strong>Code</strong></p>\r\n\r\n<ol start=\"1\">\r\n	<li>#&nbsp;dictionary&nbsp;methods&nbsp;&nbsp;</li>\r\n	<li>dict&nbsp;=&nbsp;{1:&nbsp;&quot;Microsoft&quot;,&nbsp;2:&nbsp;&quot;Google&quot;,&nbsp;3:&nbsp;&quot;Facebook&quot;,&nbsp;4:&nbsp;&quot;Amazon&quot;,&nbsp;5:&nbsp;&quot;Flipkart&quot;}&nbsp;&nbsp;</li>\r\n	<li>#&nbsp;keys()&nbsp;method&nbsp;&nbsp;</li>\r\n	<li>print(dict_demo.keys())&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p><strong>Output</strong></p>\r\n\r\n<pre>\r\ndict_keys([1, 2, 3, 4, 5])\r\n</pre>\r\n\r\n<ul>\r\n	<li><strong>items()</strong></li>\r\n</ul>\r\n\r\n<p>It returns all the key-value pairs as a tuple.</p>\r\n\r\n<p><strong>Code</strong></p>\r\n\r\n<ol start=\"1\">\r\n	<li>#&nbsp;dictionary&nbsp;methods&nbsp;&nbsp;</li>\r\n	<li>dict&nbsp;=&nbsp;{1:&nbsp;&quot;Microsoft&quot;,&nbsp;2:&nbsp;&quot;Google&quot;,&nbsp;3:&nbsp;&quot;Facebook&quot;,&nbsp;4:&nbsp;&quot;Amazon&quot;,&nbsp;5:&nbsp;&quot;Flipkart&quot;}&nbsp;&nbsp;</li>\r\n	<li>#&nbsp;items()&nbsp;method&nbsp;&nbsp;</li>\r\n	<li>print(dict_demo.items())&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p><strong>Output</strong></p>\r\n\r\n<pre>\r\ndict_items([(1, &#39;Microsoft&#39;), (2, &#39;Google&#39;), (3, &#39;Facebook&#39;), (4, &#39;Amazon&#39;), (5, &#39;Flipkart&#39;)])\r\n</pre>\r\n\r\n<ul>\r\n	<li><strong>get()</strong></li>\r\n</ul>\r\n\r\n<p>It is used to get the value specified for the passed key.</p>\r\n\r\n<p><strong>Code</strong></p>\r\n\r\n<ol start=\"1\">\r\n	<li>#&nbsp;dictionary&nbsp;methods&nbsp;&nbsp;</li>\r\n	<li>dict&nbsp;=&nbsp;{1:&nbsp;&quot;Microsoft&quot;,&nbsp;2:&nbsp;&quot;Google&quot;,&nbsp;3:&nbsp;&quot;Facebook&quot;,&nbsp;4:&nbsp;&quot;Amazon&quot;,&nbsp;5:&nbsp;&quot;Flipkart&quot;}&nbsp;&nbsp;</li>\r\n	<li>#&nbsp;get()&nbsp;method&nbsp;&nbsp;</li>\r\n	<li>print(dict_demo.get(3))&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p><strong>Output</strong></p>\r\n\r\n<pre>\r\nFacebook\r\n</pre>\r\n\r\n<ul>\r\n	<li><strong>update()</strong></li>\r\n</ul>\r\n\r\n<p>It updates the dictionary by adding the key-value pair of dict2 to this dictionary.</p>\r\n\r\n<p><strong>Code</strong></p>\r\n\r\n<ol start=\"1\">\r\n	<li>#&nbsp;dictionary&nbsp;methods&nbsp;&nbsp;</li>\r\n	<li>dict&nbsp;=&nbsp;{1:&nbsp;&quot;Microsoft&quot;,&nbsp;2:&nbsp;&quot;Google&quot;,&nbsp;3:&nbsp;&quot;Facebook&quot;,&nbsp;4:&nbsp;&quot;Amazon&quot;,&nbsp;5:&nbsp;&quot;Flipkart&quot;}&nbsp;&nbsp;</li>\r\n	<li>#&nbsp;update()&nbsp;method&nbsp;&nbsp;</li>\r\n	<li>dict_demo.update({3:&nbsp;&quot;TCS&quot;})&nbsp;&nbsp;</li>\r\n	<li>print(dict_demo)&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p><strong>Output</strong></p>\r\n\r\n<pre>\r\n{1: &#39;Microsoft&#39;, 2: &#39;Google&#39;, 3: &#39;TCS&#39;}\r\n</pre>\r\n\r\n<ul>\r\n	<li><strong>values()</strong></li>\r\n</ul>\r\n\r\n<p>It returns all the values of the dictionary.</p>\r\n\r\n<p><strong>Code</strong></p>\r\n\r\n<ol start=\"1\">\r\n	<li>#&nbsp;dictionary&nbsp;methods&nbsp;&nbsp;</li>\r\n	<li>dict&nbsp;=&nbsp;{1:&nbsp;&quot;Microsoft&quot;,&nbsp;2:&nbsp;&quot;Google&quot;,&nbsp;3:&nbsp;&quot;Facebook&quot;,&nbsp;4:&nbsp;&quot;Amazon&quot;,&nbsp;5:&nbsp;&quot;Flipkart&quot;}&nbsp;&nbsp;</li>\r\n	<li>#&nbsp;values()&nbsp;method&nbsp;&nbsp;</li>\r\n	<li>print(dict_demo.values())&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p><strong>Output</strong></p>\r\n\r\n<pre>\r\ndict_values([&#39;Microsoft&#39;, &#39;Google&#39;, &#39;TCS&#39;])</pre>\r\n', 'PYTHON');
INSERT INTO `courses` (`id`, `topic_name`, `description`, `course_name`) VALUES
(74, 'Python Functions', '<h1>Python Functions</h1>\r\n\r\n<p>The fundamentals of Python functions, including what they are, their syntax, their primary parts, return keywords, and major types, will be covered in this tutorial. Additionally, we&#39;ll examine several instances of Python function definitions.</p>\r\n\r\n<h2>What are Python Functions?</h2>\r\n\r\n<p>A function is a collection of related assertions that performs a mathematical, analytical, or evaluative operation. A collection of statements called Python Functions returns the particular task. Python functions are simple to define and essential to intermediate-level programming. The exact criteria hold to function names as they do to variable names. The goal is to group up certain often performed actions and define a function. We may call the function and reuse the code contained within it with different variables rather than repeatedly creating the same code block for different input variables.</p>\r\n\r\n<p>User-defined and built-in functions are the two main categories of functions in Python. It helps maintain the programme concise, unique, and well-structured.</p>\r\n\r\n<h2>Advantages of Functions in Python</h2>\r\n\r\n<p>Python functions have the following Perks.</p>\r\n\r\n<p>PlayNext</p>\r\n\r\n<p>Unmute</p>\r\n\r\n<p>Current Time&Acirc;&nbsp;0:00</p>\r\n\r\n<p>/</p>\r\n\r\n<p>Duration&Acirc;&nbsp;18:10</p>\r\n\r\n<p>Loaded:&nbsp;0.37%</p>\r\n\r\n<p>&Acirc;&nbsp;</p>\r\n\r\n<p>Fullscreen</p>\r\n\r\n<p>Backward Skip 10sPlay VideoForward Skip 10s</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<ul>\r\n	<li>By including functions, we can prevent repeating the same code block repeatedly in a program.</li>\r\n	<li>Python functions, once defined, can be called many times and from anywhere in a program.</li>\r\n	<li>If our Python program is large, it can be separated into numerous functions which is simple to track.</li>\r\n	<li>The key accomplishment of Python functions is we can return as many outputs as we want with different arguments.</li>\r\n</ul>\r\n\r\n<p>However, calling functions has always been overhead in a Python program.</p>\r\n\r\n<p><strong>Syntax of Python Function</strong></p>\r\n\r\n<ol start=\"1\">\r\n	<li>#&nbsp;&nbsp;An&nbsp;example&nbsp;Python&nbsp;Function&nbsp;&nbsp;</li>\r\n	<li>def&nbsp;function_name(&nbsp;parameters&nbsp;):&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;#&nbsp;code&nbsp;block&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p>The following elements make up to define a function, as seen above.</p>\r\n\r\n<ul>\r\n	<li>The beginning of a function header is indicated by a keyword called def.</li>\r\n	<li>function_name is the function&#39;s name that we can use to separate it from others. We will use this name to call the function later in the program. In Python, name functions must follow the same rules as naming variables.</li>\r\n	<li>We pass arguments to the defined function using parameters. However, they are optional.</li>\r\n	<li>The function header is terminated by a colon (:).</li>\r\n	<li>We can use a documentation string called docstring in the short form to explain the purpose of the function.</li>\r\n	<li>The body of the function is made up of several valid Python statements. The indentation depth of the whole code block must be the same (usually 4 spaces).</li>\r\n	<li>We can use a return expression to return a value from a defined function.</li>\r\n</ul>\r\n\r\n<h3>Example of a User-Defined Function</h3>\r\n\r\n<p>We will define a function that when called will return the square of the number passed to it as an argument.</p>\r\n\r\n<p><strong>Code</strong></p>\r\n\r\n<ol start=\"1\">\r\n	<li>#&nbsp;Example&nbsp;Python&nbsp;Code&nbsp;for&nbsp;User-Defined&nbsp;function&nbsp;&nbsp;</li>\r\n	<li>def&nbsp;square(&nbsp;num&nbsp;):&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;&quot;&quot;&quot;&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;This&nbsp;function&nbsp;computes&nbsp;the&nbsp;square&nbsp;of&nbsp;the&nbsp;number.&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;&quot;&quot;&quot;&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;num**2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>object_&nbsp;=&nbsp;square(6)&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>print(&nbsp;&quot;The&nbsp;square&nbsp;of&nbsp;the&nbsp;given&nbsp;number&nbsp;is:&nbsp;&quot;,&nbsp;object_&nbsp;)&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p><strong>Output:</strong></p>\r\n\r\n<pre>\r\nThe square of the given number is:  36\r\n</pre>\r\n\r\n<h2>Calling a Function</h2>\r\n\r\n<p>A function is defined by using the def keyword and giving it a name, specifying the arguments that must be passed to the function, and structuring the code block.</p>\r\n\r\n<p>After a function&#39;s fundamental framework is complete, we can call it from anywhere in the program. The following is an example of how to use the a_function function.</p>\r\n\r\n<p><strong>Code</strong></p>\r\n\r\n<ol start=\"1\">\r\n	<li>#&nbsp;Example&nbsp;Python&nbsp;Code&nbsp;for&nbsp;calling&nbsp;a&nbsp;function&nbsp;&nbsp;</li>\r\n	<li>#&nbsp;Defining&nbsp;a&nbsp;function&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>def&nbsp;a_function(&nbsp;string&nbsp;):&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;&quot;This&nbsp;prints&nbsp;the&nbsp;value&nbsp;of&nbsp;length&nbsp;of&nbsp;string&quot;&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;len(string)&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>#&nbsp;Calling&nbsp;the&nbsp;function&nbsp;we&nbsp;defined&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>print(&nbsp;&quot;Length&nbsp;of&nbsp;the&nbsp;string&nbsp;Functions&nbsp;is:&nbsp;&quot;,&nbsp;a_function(&nbsp;&quot;Functions&quot;&nbsp;)&nbsp;)&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>print(&nbsp;&quot;Length&nbsp;of&nbsp;the&nbsp;string&nbsp;Python&nbsp;is:&nbsp;&quot;,&nbsp;a_function(&nbsp;&quot;Python&quot;&nbsp;)&nbsp;)&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p><strong>Output:</strong></p>\r\n\r\n<pre>\r\nLength of the string Functions is:  9\r\nLength of the string Python is:  6\r\n</pre>\r\n\r\n<h2>Pass by Reference vs. Pass by Value</h2>\r\n\r\n<p>All parameters in the Python programming language are provided by reference. It indicates that if we alter the value of an argument inside of a function, the calling function will likewise reflect the change. For example,</p>\r\n\r\n<p><strong>Code</strong></p>\r\n\r\n<ol start=\"1\">\r\n	<li>#&nbsp;Example&nbsp;Python&nbsp;Code&nbsp;for&nbsp;Pass&nbsp;by&nbsp;Reference&nbsp;vs.&nbsp;Value&nbsp;&nbsp;</li>\r\n	<li>#&nbsp;defining&nbsp;the&nbsp;function&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>def&nbsp;square(&nbsp;item_list&nbsp;):&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;&#39;&#39;&#39;&#39;&#39;&#39;&#39;This&nbsp;function&nbsp;will&nbsp;find&nbsp;the&nbsp;square&nbsp;of&nbsp;items&nbsp;in&nbsp;the&nbsp;list&#39;&#39;&#39;&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;squares&nbsp;=&nbsp;[&nbsp;]&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;l&nbsp;in&nbsp;item_list:&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;squares.append(&nbsp;l**2&nbsp;)&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;squares&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>#&nbsp;calling&nbsp;the&nbsp;defined&nbsp;function&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>my_list&nbsp;=&nbsp;[17,&nbsp;52,&nbsp;8];&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>my_result&nbsp;=&nbsp;square(&nbsp;my_list&nbsp;)&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>print(&nbsp;&quot;Squares&nbsp;of&nbsp;the&nbsp;list&nbsp;are:&nbsp;&quot;,&nbsp;my_result&nbsp;)&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p><strong>Output:</strong></p>\r\n\r\n<pre>\r\nSquares of the list are:  [289, 2704, 64]\r\n</pre>\r\n\r\n<h2>Function Arguments</h2>\r\n\r\n<p>The following are the types of arguments that we can use to call a function:</p>\r\n\r\n<ol>\r\n	<li>Default arguments</li>\r\n	<li>Keyword arguments</li>\r\n	<li>Required arguments</li>\r\n	<li>Variable-length arguments</li>\r\n</ol>\r\n\r\n<h3>1) Default Arguments</h3>\r\n\r\n<p>A default argument is a kind of parameter that takes as input a default value if no value is supplied for the argument when the function is called. Default arguments are demonstrated in the following instance.</p>\r\n\r\n<p><strong>Code</strong></p>\r\n\r\n<ol start=\"1\">\r\n	<li>#&nbsp;Python&nbsp;code&nbsp;to&nbsp;demonstrate&nbsp;the&nbsp;use&nbsp;of&nbsp;default&nbsp;arguments&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>#&nbsp;defining&nbsp;a&nbsp;function&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>def&nbsp;function(&nbsp;n1,&nbsp;n2&nbsp;=&nbsp;20&nbsp;):&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;print(&quot;number&nbsp;1&nbsp;is:&nbsp;&quot;,&nbsp;n1)&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;print(&quot;number&nbsp;2&nbsp;is:&nbsp;&quot;,&nbsp;n2)&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>#&nbsp;Calling&nbsp;the&nbsp;function&nbsp;and&nbsp;passing&nbsp;only&nbsp;one&nbsp;argument&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>print(&nbsp;&quot;Passing&nbsp;only&nbsp;one&nbsp;argument&quot;&nbsp;)&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>function(30)&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>#&nbsp;Now&nbsp;giving&nbsp;two&nbsp;arguments&nbsp;to&nbsp;the&nbsp;function&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>print(&nbsp;&quot;Passing&nbsp;two&nbsp;arguments&quot;&nbsp;)&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>function(50,30)&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p><strong>Output:</strong></p>\r\n\r\n<pre>\r\nPassing only one argument\r\nnumber 1 is:  30\r\nnumber 2 is:  20\r\nPassing two arguments\r\nnumber 1 is:  50\r\nnumber 2 is:  30\r\n</pre>\r\n\r\n<h3>2) Keyword Arguments</h3>\r\n\r\n<p>A function called&#39;s arguments are linked to keyword arguments. When invoking a function with keyword arguments, the user may tell whose parameter value it is by looking at the parameter label.</p>\r\n\r\n<p>We can remove certain arguments or arrange them in a different order since the Python interpreter will connect the provided keywords to link the values with its parameters. Another way to use keywords to invoke the function() method is as follows:</p>\r\n\r\n<p><strong>Code</strong></p>\r\n\r\n<ol start=\"1\">\r\n	<li>#&nbsp;Python&nbsp;code&nbsp;to&nbsp;demonstrate&nbsp;the&nbsp;use&nbsp;of&nbsp;keyword&nbsp;arguments&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;#&nbsp;Defining&nbsp;a&nbsp;function&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>def&nbsp;function(&nbsp;n1,&nbsp;n2&nbsp;):&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;print(&quot;number&nbsp;1&nbsp;is:&nbsp;&quot;,&nbsp;n1)&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;print(&quot;number&nbsp;2&nbsp;is:&nbsp;&quot;,&nbsp;n2)&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>#&nbsp;Calling&nbsp;function&nbsp;and&nbsp;passing&nbsp;arguments&nbsp;without&nbsp;using&nbsp;keyword&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>print(&nbsp;&quot;Without&nbsp;using&nbsp;keyword&quot;&nbsp;)&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>function(&nbsp;50,&nbsp;30)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>#&nbsp;Calling&nbsp;function&nbsp;and&nbsp;passing&nbsp;arguments&nbsp;using&nbsp;keyword&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>print(&nbsp;&quot;With&nbsp;using&nbsp;keyword&quot;&nbsp;)&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>function(&nbsp;n2&nbsp;=&nbsp;50,&nbsp;n1&nbsp;=&nbsp;30)&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p><strong>Output:</strong></p>\r\n\r\n<pre>\r\nWithout using keyword\r\nnumber 1 is:  50\r\nnumber 2 is:  30\r\nWith using keyword\r\nnumber 1 is:  30\r\nnumber 2 is:  50\r\n</pre>\r\n\r\n<h3>3) Required Arguments</h3>\r\n\r\n<p>The arguments given to a function while calling in a pre-defined positional sequence are required arguments. The count of required arguments in the method call must be equal to the count of arguments provided while defining the function.</p>\r\n\r\n<p>We must send two arguments to the function function() in the correct order, or it will return a syntax error, as seen below.</p>\r\n\r\n<p><strong>Code</strong></p>\r\n\r\n<ol start=\"1\">\r\n	<li>#&nbsp;Python&nbsp;code&nbsp;to&nbsp;demonstrate&nbsp;the&nbsp;use&nbsp;of&nbsp;default&nbsp;arguments&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>#&nbsp;Defining&nbsp;a&nbsp;function&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>def&nbsp;function(&nbsp;n1,&nbsp;n2&nbsp;):&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;print(&quot;number&nbsp;1&nbsp;is:&nbsp;&quot;,&nbsp;n1)&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;print(&quot;number&nbsp;2&nbsp;is:&nbsp;&quot;,&nbsp;n2)&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>#&nbsp;Calling&nbsp;function&nbsp;and&nbsp;passing&nbsp;two&nbsp;arguments&nbsp;out&nbsp;of&nbsp;order,&nbsp;we&nbsp;need&nbsp;num1&nbsp;to&nbsp;be&nbsp;20&nbsp;and&nbsp;num2&nbsp;to&nbsp;be&nbsp;30&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>print(&nbsp;&quot;Passing&nbsp;out&nbsp;of&nbsp;order&nbsp;arguments&quot;&nbsp;)&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>function(&nbsp;30,&nbsp;20&nbsp;)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>#&nbsp;Calling&nbsp;function&nbsp;and&nbsp;passing&nbsp;only&nbsp;one&nbsp;argument&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>print(&nbsp;&quot;Passing&nbsp;only&nbsp;one&nbsp;argument&quot;&nbsp;)&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>try:&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;function(&nbsp;30&nbsp;)&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>except:&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;print(&nbsp;&quot;Function&nbsp;needs&nbsp;two&nbsp;positional&nbsp;arguments&quot;&nbsp;)&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p><strong>Output:</strong></p>\r\n\r\n<pre>\r\nPassing out of order arguments\r\nnumber 1 is:  30\r\nnumber 2 is:  20\r\nPassing only one argument\r\nFunction needs two positional arguments\r\n</pre>\r\n\r\n<h3>4) Variable-Length Arguments</h3>\r\n\r\n<p>We can use special characters in Python functions to pass as many arguments as we want in a function. There are two types of characters that we can use for this purpose:</p>\r\n\r\n<ol>\r\n	<li><strong>*args -</strong>These are Non-Keyword Arguments</li>\r\n	<li><strong>**kwargs -</strong>These are Keyword Arguments.</li>\r\n</ol>\r\n\r\n<p>Here is an example to clarify Variable length arguments</p>\r\n\r\n<p><strong>Code</strong></p>\r\n\r\n<ol start=\"1\">\r\n	<li>#&nbsp;Python&nbsp;code&nbsp;to&nbsp;demonstrate&nbsp;the&nbsp;use&nbsp;of&nbsp;variable-length&nbsp;arguments&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>#&nbsp;Defining&nbsp;a&nbsp;function&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>def&nbsp;function(&nbsp;*args_list&nbsp;):&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;ans&nbsp;=&nbsp;[]&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;l&nbsp;in&nbsp;args_list:&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans.append(&nbsp;l.upper()&nbsp;)&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;ans&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>#&nbsp;Passing&nbsp;args&nbsp;arguments&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>object&nbsp;=&nbsp;function(&#39;Python&#39;,&nbsp;&#39;Functions&#39;,&nbsp;&#39;tutorial&#39;)&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>print(&nbsp;object&nbsp;)&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>#&nbsp;defining&nbsp;a&nbsp;function&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>def&nbsp;function(&nbsp;**kargs_list&nbsp;):&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;ans&nbsp;=&nbsp;[]&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;key,&nbsp;value&nbsp;in&nbsp;kargs_list.items():&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans.append([key,&nbsp;value])&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;ans&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>#&nbsp;Paasing&nbsp;kwargs&nbsp;arguments&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>object&nbsp;=&nbsp;function(First&nbsp;=&nbsp;&quot;Python&quot;,&nbsp;Second&nbsp;=&nbsp;&quot;Functions&quot;,&nbsp;Third&nbsp;=&nbsp;&quot;Tutorial&quot;)&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>print(object)&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p><strong>Output:</strong></p>\r\n\r\n<pre>\r\n[&#39;PYTHON&#39;, &#39;FUNCTIONS&#39;, &#39;TUTORIAL&#39;]\r\n[[&#39;First&#39;, &#39;Python&#39;], [&#39;Second&#39;, &#39;Functions&#39;], [&#39;Third&#39;, &#39;Tutorial&#39;]]\r\n</pre>\r\n\r\n<h2>return Statement</h2>\r\n\r\n<p>We write a return statement in a function to leave a function and give the calculated value when a defined function is called.</p>\r\n\r\n<p><iframe frameborder=\"0\" height=\"280\" id=\"google_ads_iframe_/103512698,22511567001/22903138979_0\" name=\"google_ads_iframe_/103512698,22511567001/22903138979_0\" scrolling=\"no\" title=\"3rd party ad content\" width=\"728\"></iframe></p>\r\n\r\n<p><strong>Syntax:</strong></p>\r\n\r\n<ol start=\"1\">\r\n	<li>return&nbsp;&lt;&nbsp;expression&nbsp;to&nbsp;be&nbsp;returned&nbsp;as&nbsp;output&nbsp;&gt;&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p>The return statement, which is supplied as output when a particular job or function is finished, might take the form of an argument, a statement, or a value. A declared function will return a None object if no return statement is written.</p>\r\n\r\n<p>Here is an example of a return statement in Python functions.</p>\r\n\r\n<p><strong>Code</strong></p>\r\n\r\n<ol start=\"1\">\r\n	<li>#&nbsp;Python&nbsp;code&nbsp;to&nbsp;demonstrate&nbsp;the&nbsp;use&nbsp;of&nbsp;return&nbsp;statements&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>#&nbsp;Defining&nbsp;a&nbsp;function&nbsp;with&nbsp;return&nbsp;statement&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>def&nbsp;square(&nbsp;num&nbsp;):&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;num**2&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>#&nbsp;Calling&nbsp;function&nbsp;and&nbsp;passing&nbsp;arguments.&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>print(&nbsp;&quot;With&nbsp;return&nbsp;statement&quot;&nbsp;)&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>print(&nbsp;square(&nbsp;52&nbsp;)&nbsp;)&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>#&nbsp;Defining&nbsp;a&nbsp;function&nbsp;without&nbsp;return&nbsp;statement&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>def&nbsp;square(&nbsp;num&nbsp;):&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;num**2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>#&nbsp;Calling&nbsp;function&nbsp;and&nbsp;passing&nbsp;arguments.&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>print(&nbsp;&quot;Without&nbsp;return&nbsp;statement&quot;&nbsp;)&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>print(&nbsp;square(&nbsp;52&nbsp;)&nbsp;)&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p><strong>Output:</strong></p>\r\n\r\n<pre>\r\nWith return statement\r\n2704\r\nWithout return statement\r\nNone\r\n</pre>\r\n\r\n<h2>The Anonymous Functions</h2>\r\n\r\n<p>These types of Python functions are anonymous since we do not declare them, as we declare usual functions, using the def keyword. We can use the lambda keyword to define the short, single output, anonymous functions.</p>\r\n\r\n<p>Lambda expressions can accept an unlimited number of arguments; however, they only return one value as the result of the function. They can&#39;t have numerous expressions or instructions in them. Since lambda needs an expression, an anonymous function cannot be directly called to print.</p>\r\n\r\n<p>Lambda functions contain their unique local domain, meaning they can only reference variables in their argument list and the global domain name.</p>\r\n\r\n<p>Although lambda expressions seem to be a one-line representation of a function, they are not like inline expressions in C and C++, which pass function stack allocations at execution for efficiency concerns.</p>\r\n\r\n<p><strong>Syntax</strong></p>\r\n\r\n<p>Lambda functions have exactly one line in their syntax:</p>\r\n\r\n<ol start=\"1\">\r\n	<li>lambda&nbsp;[argument1&nbsp;[,argument2...&nbsp;.argumentn]]&nbsp;:&nbsp;expression&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p>Below is an illustration of how to use the lambda function:</p>\r\n\r\n<p><strong>Code</strong></p>\r\n\r\n<ol start=\"1\">\r\n	<li>#&nbsp;Python&nbsp;code&nbsp;to&nbsp;demonstrate&nbsp;ananymous&nbsp;functions&nbsp;&nbsp;</li>\r\n	<li>#&nbsp;Defining&nbsp;a&nbsp;function&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>lambda_&nbsp;=&nbsp;lambda&nbsp;argument1,&nbsp;argument2:&nbsp;argument1&nbsp;+&nbsp;argument2;&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>#&nbsp;Calling&nbsp;the&nbsp;function&nbsp;and&nbsp;passing&nbsp;values&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>print(&nbsp;&quot;Value&nbsp;of&nbsp;the&nbsp;function&nbsp;is&nbsp;:&nbsp;&quot;,&nbsp;lambda_(&nbsp;20,&nbsp;30&nbsp;)&nbsp;)&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>print(&nbsp;&quot;Value&nbsp;of&nbsp;the&nbsp;function&nbsp;is&nbsp;:&nbsp;&quot;,&nbsp;lambda_(&nbsp;40,&nbsp;50&nbsp;)&nbsp;)&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p><strong>Output:</strong></p>\r\n\r\n<pre>\r\nValue of the function is :  50\r\nValue of the function is :  90\r\n</pre>\r\n\r\n<h2>Scope and Lifetime of Variables</h2>\r\n\r\n<p>The scope of a variable refers to the domain of a program wherever it is declared. A function&#39;s arguments and variables are not accessible outside the defined function. As a result, they only have a local domain.</p>\r\n\r\n<p>The lifespan of a variable in RAM is how long it stays there. A function&#39;s lifespan is the same as that of its internal variables. They are taken away after we exit the function. Consequently, a function does not keep the value of a variable from previous executions.</p>\r\n\r\n<p>Here&#39;s a simple example of a variable&#39;s scope within a function.</p>\r\n\r\n<p><strong>Code</strong></p>\r\n\r\n<ol start=\"1\">\r\n	<li>#&nbsp;Python&nbsp;code&nbsp;to&nbsp;demonstrate&nbsp;scope&nbsp;and&nbsp;lifetime&nbsp;of&nbsp;variables&nbsp;&nbsp;</li>\r\n	<li>#defining&nbsp;a&nbsp;function&nbsp;to&nbsp;print&nbsp;a&nbsp;number.&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>def&nbsp;number(&nbsp;):&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;num&nbsp;=&nbsp;50&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;print(&nbsp;&quot;Value&nbsp;of&nbsp;num&nbsp;inside&nbsp;the&nbsp;function:&nbsp;&quot;,&nbsp;num)&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>num&nbsp;=&nbsp;10&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>number()&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>print(&nbsp;&quot;Value&nbsp;of&nbsp;num&nbsp;outside&nbsp;the&nbsp;function:&quot;,&nbsp;num)&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p><strong>Output:</strong></p>\r\n\r\n<pre>\r\nValue of num inside the function:  50\r\nValue of num outside the function: 10\r\n</pre>\r\n\r\n<p>Here, we can see that num starts out with a value of 10. The value of num outside of the function remained intact, even though the function number() changed the value of num to 50.</p>\r\n\r\n<p>This is due to the fact that the function&#39;s internal variable num is different from the external variable (local to the function). Despite having the same variable name, they are two separate variables with separate scopes.</p>\r\n\r\n<p>Variables beyond the function, on the contrary, are accessible within the function. These variables have a global reach. We can retrieve their values inside the function but cannot alter or change them. If we declare a variable global using the keyword global, we can also change the variable&#39;s value outside the function.</p>\r\n\r\n<h2>Python Function within Another Function</h2>\r\n\r\n<p>Functions are considered first-class objects in Python. In a programming language, first-class objects are treated the same wherever they are used. They can be used in conditional expressions, as arguments, and saved in built-in data structures. A programming language is considered to implement first-class functions if it treats functions as first-class objects. The concept of First Class functions is supported by Python.</p>\r\n\r\n<p>Inner or nested function refers to a function defined within another defined function. Inner functions can access the parameters of the outer scope. Inner functions are constructed to cover them from the changes that happen outside the function. Many developers regard this process as encapsulation.</p>\r\n\r\n<p><strong>Code</strong></p>\r\n\r\n<ol start=\"1\">\r\n	<li>#&nbsp;Python&nbsp;code&nbsp;to&nbsp;show&nbsp;how&nbsp;to&nbsp;access&nbsp;variables&nbsp;of&nbsp;a&nbsp;nested&nbsp;functions&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>#&nbsp;defining&nbsp;a&nbsp;nested&nbsp;function&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>def&nbsp;word():&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;string&nbsp;=&nbsp;&#39;Python&nbsp;functions&nbsp;tutorial&#39;&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;x&nbsp;=&nbsp;5&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;def&nbsp;number():&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;print(&nbsp;string&nbsp;)&nbsp;&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;print(&nbsp;x&nbsp;)&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;number()&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>word()&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p><strong>Output:</strong></p>\r\n\r\n<pre>\r\nPython functions tutorial\r\n5</pre>\r\n', 'PYTHON'),
(75, 'Python Lambda Functions', '<h1>Python Lambda Functions</h1>\r\n\r\n<p>In this tutorial, we&#39;ll study anonymous functions, commonly called lambda functions. We&#39;ll understand what they are, how to execute them, and their syntax.</p>\r\n\r\n<h2>What are Lambda Functions in Python?</h2>\r\n\r\n<p>Lambda Functions in Python are anonymous functions, implying they don&#39;t have a name. The def keyword is needed to create a typical function in Python, as we already know. We can also use the lambda keyword in Python to define an unnamed function.</p>\r\n\r\n<h3>Syntax of Python Lambda Function</h3>\r\n\r\n<ol start=\"1\">\r\n	<li>lambda&nbsp;arguments:&nbsp;expression&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p>This function accepts any count of inputs but only evaluates and returns one expression.</p>\r\n\r\n<p>Lambda functions can be used whenever function arguments are necessary. In addition to other forms of formulations in functions, it has a variety of applications in certain coding domains. It&#39;s important to remember that according to syntax, lambda functions are limited to a single statement.</p>\r\n\r\n<p>PlayNext</p>\r\n\r\n<p>Unmute</p>\r\n\r\n<p>Current Time&Acirc;&nbsp;0:00</p>\r\n\r\n<p>/</p>\r\n\r\n<p>Duration&Acirc;&nbsp;18:10</p>\r\n\r\n<p>Loaded:&nbsp;0.37%</p>\r\n\r\n<p>&Acirc;&nbsp;</p>\r\n\r\n<p>Fullscreen</p>\r\n\r\n<p>Backward Skip 10sPlay VideoForward Skip 10s</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h3>Example of Lambda Function in Python</h3>\r\n\r\n<p>An example of a lambda function that adds 4 to the input number is shown below.</p>\r\n\r\n<p><strong>Code</strong></p>\r\n\r\n<ol start=\"1\">\r\n	<li>#&nbsp;Code&nbsp;to&nbsp;demonstrate&nbsp;how&nbsp;we&nbsp;can&nbsp;use&nbsp;a&nbsp;lambda&nbsp;function&nbsp;&nbsp;</li>\r\n	<li>add&nbsp;=&nbsp;lambda&nbsp;num:&nbsp;num&nbsp;+&nbsp;4&nbsp;&nbsp;</li>\r\n	<li>print(&nbsp;add(6)&nbsp;)&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p><strong>Output:</strong></p>\r\n\r\n<pre>\r\n10\r\n</pre>\r\n\r\n<p>The lambda function is &quot;lambda num: num+4&quot; in the given programme. The parameter is num, and the computed and returned equation is num * 4.</p>\r\n\r\n<p>There is no label for this function. It generates a function object associated with the &quot;add&quot; identifier. We can now refer to it as a standard function. The lambda statement, &quot;lambda num: num+4&quot;, is nearly the same as:</p>\r\n\r\n<p><strong>Code</strong></p>\r\n\r\n<ol start=\"1\">\r\n	<li>def&nbsp;add(&nbsp;num&nbsp;):&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;return&nbsp;num&nbsp;+&nbsp;4&nbsp;&nbsp;</li>\r\n	<li>print(&nbsp;add(6)&nbsp;)&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p><strong>Output:</strong></p>\r\n\r\n<pre>\r\n10\r\n</pre>\r\n\r\n<h2>What&#39;s the Distinction Between Lambda and Def Functions?</h2>\r\n\r\n<p>Let&#39;s glance at this instance to see how a conventional def defined function differs from a function defined using the lambda keyword. This program calculates the reciprocal of a given number:</p>\r\n\r\n<p><strong>Code</strong></p>\r\n\r\n<ol start=\"1\">\r\n	<li>#&nbsp;Python&nbsp;code&nbsp;to&nbsp;show&nbsp;the&nbsp;reciprocal&nbsp;of&nbsp;the&nbsp;given&nbsp;number&nbsp;to&nbsp;highlight&nbsp;the&nbsp;difference&nbsp;between&nbsp;def()&nbsp;and&nbsp;lambda().&nbsp;&nbsp;</li>\r\n	<li>def&nbsp;reciprocal(&nbsp;num&nbsp;):&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;1&nbsp;/&nbsp;num&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;</li>\r\n	<li>lambda_reciprocal&nbsp;=&nbsp;lambda&nbsp;num:&nbsp;1&nbsp;/&nbsp;num&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;</li>\r\n	<li>#&nbsp;using&nbsp;the&nbsp;function&nbsp;defined&nbsp;by&nbsp;def&nbsp;keyword&nbsp;&nbsp;</li>\r\n	<li>print(&nbsp;&quot;Def&nbsp;keyword:&nbsp;&quot;,&nbsp;reciprocal(6)&nbsp;)&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;</li>\r\n	<li>#&nbsp;using&nbsp;the&nbsp;function&nbsp;defined&nbsp;by&nbsp;lambda&nbsp;keyword&nbsp;&nbsp;</li>\r\n	<li>print(&nbsp;&quot;Lambda&nbsp;keyword:&nbsp;&quot;,&nbsp;lambda_reciprocal(6)&nbsp;)&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p><strong>Output:</strong></p>\r\n\r\n<pre>\r\nDef keyword:  0.16666666666666666\r\nLambda keyword:  0.16666666666666666\r\n</pre>\r\n\r\n<p>The reciprocal() and lambda_reciprocal() functions act similarly and as expected in the preceding scenario. Let&#39;s take a closer look at the sample above:</p>\r\n\r\n<p>Both of these yield the reciprocal of a given number without employing Lambda. However, we wanted to declare a function with the name reciprocal and send a number to it while executing def. We were also required to use the return keyword to provide the output from wherever the function was invoked after being executed.</p>\r\n\r\n<p>Using Lambda: Instead of a &quot;return&quot; statement, Lambda definitions always include a statement given at output. The beauty of lambda functions is their convenience. We need not allocate a lambda expression to a variable because we can put it at any place a function is requested.</p>\r\n\r\n<h2>Using Lambda Function with filter()</h2>\r\n\r\n<p>The filter() method accepts two arguments in Python: a function and an iterable such as a list.</p>\r\n\r\n<p>The function is called for every item of the list, and a new iterable or list is returned that holds just those elements that returned True when supplied to the function.</p>\r\n\r\n<p>Here&#39;s a simple illustration of using the filter() method to return only odd numbers from a list.</p>\r\n\r\n<p><strong>Code</strong></p>\r\n\r\n<ol start=\"1\">\r\n	<li>#&nbsp;Code&nbsp;to&nbsp;filter&nbsp;odd&nbsp;numbers&nbsp;from&nbsp;a&nbsp;given&nbsp;list&nbsp;&nbsp;</li>\r\n	<li>list_&nbsp;=&nbsp;[34,&nbsp;12,&nbsp;64,&nbsp;55,&nbsp;75,&nbsp;13,&nbsp;63]&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;</li>\r\n	<li>odd_list&nbsp;=&nbsp;list(filter(&nbsp;lambda&nbsp;num:&nbsp;(num&nbsp;%&nbsp;2&nbsp;!=&nbsp;0)&nbsp;,&nbsp;list_&nbsp;))&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;</li>\r\n	<li>print(odd_list)&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p><strong>Output:</strong></p>\r\n\r\n<pre>\r\n[55, 75, 13, 63]\r\n</pre>\r\n\r\n<h2>Using Lambda Function with map()</h2>\r\n\r\n<p>A method and a list are passed to Python&#39;s map() function.</p>\r\n\r\n<p>The function is executed for all of the elements within the list, and a new list is produced with elements generated by the given function for every item.</p>\r\n\r\n<p>The map() method is used to square all the entries in a list in this example.</p>\r\n\r\n<p><strong>Code</strong></p>\r\n\r\n<ol start=\"1\">\r\n	<li>#Code&nbsp;to&nbsp;calculate&nbsp;the&nbsp;square&nbsp;of&nbsp;each&nbsp;number&nbsp;of&nbsp;a&nbsp;list&nbsp;using&nbsp;the&nbsp;map()&nbsp;function&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;</li>\r\n	<li>numbers_list&nbsp;=&nbsp;[2,&nbsp;4,&nbsp;5,&nbsp;1,&nbsp;3,&nbsp;7,&nbsp;8,&nbsp;9,&nbsp;10]&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;</li>\r\n	<li>squared_list&nbsp;=&nbsp;list(map(&nbsp;lambda&nbsp;num:&nbsp;num&nbsp;**&nbsp;2&nbsp;,&nbsp;numbers_list&nbsp;))&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;</li>\r\n	<li>print(&nbsp;squared_list&nbsp;)&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p><strong>Output:</strong></p>\r\n\r\n<pre>\r\n[4, 16, 25, 1, 9, 49, 64, 81, 100]\r\n</pre>\r\n\r\n<h2>Using Lambda Function with List Comprehension</h2>\r\n\r\n<p>We&#39;ll apply the lambda function combined with list comprehension and lambda keyword with a for loop in this instance. We&#39;ll attempt to print the square of numbers in the range 0 to 11.</p>\r\n\r\n<p><strong>Code</strong></p>\r\n\r\n<ol start=\"1\">\r\n	<li>#Code&nbsp;to&nbsp;calculate&nbsp;square&nbsp;of&nbsp;each&nbsp;number&nbsp;of&nbsp;list&nbsp;using&nbsp;list&nbsp;comprehension&nbsp;&nbsp;</li>\r\n	<li>squares&nbsp;=&nbsp;[lambda&nbsp;num&nbsp;=&nbsp;num:&nbsp;num&nbsp;**&nbsp;2&nbsp;for&nbsp;num&nbsp;in&nbsp;range(0,&nbsp;11)]&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;</li>\r\n	<li>for&nbsp;square&nbsp;in&nbsp;squares:&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;print(&nbsp;square(),&nbsp;end&nbsp;=&nbsp;&quot;&nbsp;&quot;)&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p><strong>Output:</strong></p>\r\n\r\n<pre>\r\n0 1 4 9 16 25 36 49 64 81 100 \r\n</pre>\r\n\r\n<h2>Using Lambda Function with if-else</h2>\r\n\r\n<p>We will use the lambda function with the if-else block.</p>\r\n\r\n<p><strong>Code</strong></p>\r\n\r\n<ol start=\"1\">\r\n	<li>#&nbsp;Code&nbsp;to&nbsp;use&nbsp;lambda&nbsp;function&nbsp;with&nbsp;if-else&nbsp;&nbsp;</li>\r\n	<li>Minimum&nbsp;=&nbsp;lambda&nbsp;x,&nbsp;y&nbsp;:&nbsp;x&nbsp;if&nbsp;(x&nbsp;&lt;&nbsp;y)&nbsp;else&nbsp;y&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;</li>\r\n	<li>print(Minimum(&nbsp;35,&nbsp;74&nbsp;))&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p><strong>Output:</strong></p>\r\n\r\n<pre>\r\n35\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h2>Using Lambda with Multiple Statements</h2>\r\n\r\n<p>Multiple expressions are not allowed in lambda functions, but we can construct 2 lambda functions or more and afterward call the second lambda expression as an argument to the first. Let&#39;s use lambda to discover the third maximum element.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Code</strong></p>\r\n\r\n<ol start=\"1\">\r\n	<li>#&nbsp;Code&nbsp;to&nbsp;print&nbsp;the&nbsp;third-largest&nbsp;number&nbsp;of&nbsp;the&nbsp;given&nbsp;list&nbsp;using&nbsp;the&nbsp;lambda&nbsp;function&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;</li>\r\n	<li>my_List&nbsp;=&nbsp;[&nbsp;[3,&nbsp;5,&nbsp;8,&nbsp;6],&nbsp;[23,&nbsp;54,&nbsp;12,&nbsp;87],&nbsp;[1,&nbsp;2,&nbsp;4,&nbsp;12,&nbsp;5]&nbsp;]&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;</li>\r\n	<li>#&nbsp;sorting&nbsp;every&nbsp;sublist&nbsp;of&nbsp;the&nbsp;above&nbsp;list&nbsp;&nbsp;</li>\r\n	<li>sort_List&nbsp;=&nbsp;lambda&nbsp;num&nbsp;:&nbsp;(&nbsp;sorted(n)&nbsp;for&nbsp;n&nbsp;in&nbsp;num&nbsp;)&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;</li>\r\n	<li>#&nbsp;Getting&nbsp;the&nbsp;third&nbsp;largest&nbsp;number&nbsp;of&nbsp;the&nbsp;sublist&nbsp;&nbsp;</li>\r\n	<li>third_Largest&nbsp;=&nbsp;lambda&nbsp;num,&nbsp;func&nbsp;:&nbsp;[&nbsp;l[&nbsp;len(l)&nbsp;-&nbsp;2]&nbsp;for&nbsp;l&nbsp;in&nbsp;func(num)]&nbsp;&nbsp;</li>\r\n	<li>result&nbsp;=&nbsp;third_Largest(&nbsp;my_List,&nbsp;sort_List)&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;</li>\r\n	<li>print(&nbsp;result&nbsp;)&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p><strong>Output:</strong></p>\r\n\r\n<pre>\r\n[6, 54, 5]</pre>\r\n', 'PYTHON');
INSERT INTO `courses` (`id`, `topic_name`, `description`, `course_name`) VALUES
(76, 'Python Modules', '<h1>Python Modules</h1>\r\n\r\n<p>This tutorial will explain how to construct and import custom Python modules. Additionally, we may import or integrate Python&#39;s built-in modules via various methods.</p>\r\n\r\n<h2>What is Modular Programming?</h2>\r\n\r\n<p>Modular programming is the practice of segmenting a single, complicated coding task into multiple, simpler, easier-to-manage sub-tasks. We call these subtasks modules. Therefore, we can build a bigger program by assembling different modules that act like building blocks.</p>\r\n\r\n<p>Modularizing our code in a big application has a lot of benefits.</p>\r\n\r\n<p><strong>Simplification:</strong>&nbsp;A module often concentrates on one comparatively small area of the overall problem instead of the full task. We will have a more manageable design problem to think about if we are only concentrating on one module. Program development is now simpler and much less vulnerable to mistakes.</p>\r\n\r\n<p>PlayNext</p>\r\n\r\n<p>Unmute</p>\r\n\r\n<p>Current Time&Acirc;&nbsp;0:00</p>\r\n\r\n<p>/</p>\r\n\r\n<p>Duration&Acirc;&nbsp;18:10</p>\r\n\r\n<p>Loaded:&nbsp;0.37%</p>\r\n\r\n<p>&Acirc;&nbsp;</p>\r\n\r\n<p>Fullscreen</p>\r\n\r\n<p>Backward Skip 10sPlay VideoForward Skip 10s</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Flexibility:</strong>&nbsp;Modules are frequently used to establish conceptual separations between various problem areas. It is less likely that changes to one module would influence other portions of the program if modules are constructed in a fashion that reduces interconnectedness. (We might even be capable of editing a module despite being familiar with the program beyond it.) It increases the likelihood that a group of numerous developers will be able to collaborate on a big project.</p>\r\n\r\n<p><strong>Reusability:</strong>&nbsp;Functions created in a particular module may be readily accessed by different sections of the assignment (through a suitably established api). As a result, duplicate code is no longer necessary.</p>\r\n\r\n<p><strong>Scope:</strong>&nbsp;Modules often declare a distinct namespace to prevent identifier clashes in various parts of a program.</p>\r\n\r\n<p>In Python, modularization of the code is encouraged through the use of functions, modules, and packages.</p>\r\n\r\n<h2>What are Modules in Python?</h2>\r\n\r\n<p>A document with definitions of functions and various statements written in Python is called a Python module.</p>\r\n\r\n<p>In Python, we can define a module in one of 3 ways:</p>\r\n\r\n<ul>\r\n	<li>Python itself allows for the creation of modules.</li>\r\n	<li>Similar to the re (regular expression) module, a module can be primarily written in C programming language and then dynamically inserted at run-time.</li>\r\n	<li>A built-in module, such as the itertools module, is inherently included in the interpreter.</li>\r\n</ul>\r\n\r\n<p>A module is a file containing Python code, definitions of functions, statements, or classes. An example_module.py file is a module we will create and whose name is example_module.</p>\r\n\r\n<p>We employ modules to divide complicated programs into smaller, more understandable pieces. Modules also allow for the reuse of code.</p>\r\n\r\n<p>Rather than duplicating their definitions into several applications, we may define our most frequently used functions in a separate module and then import the complete module.</p>\r\n\r\n<p>Let&#39;s construct a module. Save the file as example_module.py after entering the following.</p>\r\n\r\n<h3>Code</h3>\r\n\r\n<ol start=\"1\">\r\n	<li>#&nbsp;Python&nbsp;program&nbsp;to&nbsp;show&nbsp;how&nbsp;to&nbsp;create&nbsp;a&nbsp;module.&nbsp;&nbsp;</li>\r\n	<li>#&nbsp;defining&nbsp;a&nbsp;function&nbsp;in&nbsp;the&nbsp;module&nbsp;to&nbsp;reuse&nbsp;it&nbsp;&nbsp;</li>\r\n	<li>def&nbsp;square(&nbsp;number&nbsp;):&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;&quot;&quot;&quot;This&nbsp;function&nbsp;will&nbsp;square&nbsp;the&nbsp;number&nbsp;passed&nbsp;to&nbsp;it&quot;&quot;&quot;&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;result&nbsp;=&nbsp;number&nbsp;**&nbsp;2&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;result&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p>Here, a module called example_module contains the definition of the function square(). The function returns the square of a given number.</p>\r\n\r\n<h3>How to Import Modules in Python?</h3>\r\n\r\n<p>In Python, we may import functions from one module into our program, or as we say into, another module.</p>\r\n\r\n<p>For this, we make use of the import Python keyword. In the Python window, we add the next to import keyword, the name of the module we need to import. We will import the module we defined earlier example_module.</p>\r\n\r\n<p><strong>Code</strong></p>\r\n\r\n<ol start=\"1\">\r\n	<li>import&nbsp;example_module&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p>The functions that we defined in the example_module are not immediately imported into the present program. Only the name of the module, i.e., example_ module, is imported here.</p>\r\n\r\n<p>We may use the dot operator to use the functions using the module name. For instance:</p>\r\n\r\n<p><strong>Code</strong></p>\r\n\r\n<ol start=\"1\">\r\n	<li>result&nbsp;=&nbsp;example_module.square(&nbsp;&nbsp;4&nbsp;&nbsp;)&nbsp;&nbsp;</li>\r\n	<li>print(&nbsp;&quot;By&nbsp;using&nbsp;the&nbsp;module&nbsp;square&nbsp;of&nbsp;number&nbsp;is:&nbsp;&quot;,&nbsp;result&nbsp;)&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p><strong>Output:</strong></p>\r\n\r\n<pre>\r\nBy using the module square of number is: 16\r\n</pre>\r\n\r\n<p>There are several standard modules for Python. The complete list of Python standard modules is available. The list can be seen using the help command.</p>\r\n\r\n<p>Similar to how we imported our module, a user-defined module, we can use an import statement to import other standard modules.</p>\r\n\r\n<p>Importing a module can be done in a variety of ways. Below is a list of them.</p>\r\n\r\n<h3>Python import Statement</h3>\r\n\r\n<p>Using the import Python keyword and the dot operator, we may import a standard module and can access the defined functions within it. Here&#39;s an illustration.</p>\r\n\r\n<p><strong>Code</strong></p>\r\n\r\n<ol start=\"1\">\r\n	<li>#&nbsp;Python&nbsp;program&nbsp;to&nbsp;show&nbsp;how&nbsp;to&nbsp;import&nbsp;a&nbsp;standard&nbsp;module&nbsp;&nbsp;</li>\r\n	<li>#&nbsp;We&nbsp;will&nbsp;import&nbsp;the&nbsp;math&nbsp;module&nbsp;which&nbsp;is&nbsp;a&nbsp;standard&nbsp;module&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;</li>\r\n	<li>import&nbsp;math&nbsp;&nbsp;</li>\r\n	<li>print(&nbsp;&quot;The&nbsp;value&nbsp;of&nbsp;euler&#39;s&nbsp;number&nbsp;is&quot;,&nbsp;math.e&nbsp;)&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p><strong>Output:</strong></p>\r\n\r\n<pre>\r\nThe value of euler&#39;s number is 2.718281828459045\r\n</pre>\r\n\r\n<h3>Importing and also Renaming</h3>\r\n\r\n<p>While importing a module, we can change its name too. Here is an example to show.</p>\r\n\r\n<p><strong>Code</strong></p>\r\n\r\n<ol start=\"1\">\r\n	<li>#&nbsp;Python&nbsp;program&nbsp;to&nbsp;show&nbsp;how&nbsp;to&nbsp;import&nbsp;a&nbsp;module&nbsp;and&nbsp;rename&nbsp;it&nbsp;&nbsp;</li>\r\n	<li>#&nbsp;We&nbsp;will&nbsp;import&nbsp;the&nbsp;math&nbsp;module&nbsp;and&nbsp;give&nbsp;a&nbsp;different&nbsp;name&nbsp;to&nbsp;it&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;</li>\r\n	<li>import&nbsp;math&nbsp;as&nbsp;mt&nbsp;&nbsp;</li>\r\n	<li>print(&nbsp;&quot;The&nbsp;value&nbsp;of&nbsp;euler&#39;s&nbsp;number&nbsp;is&quot;,&nbsp;mt.e&nbsp;)&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p><strong>Output:</strong></p>\r\n\r\n<pre>\r\nThe value of euler&#39;s number is 2.718281828459045\r\n</pre>\r\n\r\n<p>The math module is now named mt in this program. In some circumstances, it might help us type faster in case of modules having long names.</p>\r\n\r\n<p>Please take note that now the scope of our program does not include the term math. Thus, mt.pi is the proper implementation of the module, whereas math.pi is invalid.</p>\r\n\r\n<h3>Python from...import Statement</h3>\r\n\r\n<p>We can import specific names from a module without importing the module as a whole. Here is an example.</p>\r\n\r\n<p><strong>Code</strong></p>\r\n\r\n<ol start=\"1\">\r\n	<li>#&nbsp;Python&nbsp;program&nbsp;to&nbsp;show&nbsp;how&nbsp;to&nbsp;import&nbsp;specific&nbsp;objects&nbsp;from&nbsp;a&nbsp;module&nbsp;&nbsp;</li>\r\n	<li>#&nbsp;We&nbsp;will&nbsp;import&nbsp;euler&#39;s&nbsp;number&nbsp;from&nbsp;the&nbsp;math&nbsp;module&nbsp;using&nbsp;the&nbsp;from&nbsp;keyword&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;</li>\r\n	<li>from&nbsp;math&nbsp;import&nbsp;e&nbsp;&nbsp;</li>\r\n	<li>print(&nbsp;&quot;The&nbsp;value&nbsp;of&nbsp;euler&#39;s&nbsp;number&nbsp;is&quot;,&nbsp;e&nbsp;)&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p><strong>Output:</strong></p>\r\n\r\n<pre>\r\nThe value of euler&#39;s number is 2.718281828459045\r\n</pre>\r\n\r\n<p>Only the e constant from the math module was imported in this case.</p>\r\n\r\n<p>We avoid using the dot (.) operator in these scenarios. As follows, we may import many attributes at the same time:</p>\r\n\r\n<p><strong>Code</strong></p>\r\n\r\n<ol start=\"1\">\r\n	<li>#&nbsp;Python&nbsp;program&nbsp;to&nbsp;show&nbsp;how&nbsp;to&nbsp;import&nbsp;multiple&nbsp;objects&nbsp;from&nbsp;a&nbsp;module&nbsp;&nbsp;</li>\r\n	<li>from&nbsp;math&nbsp;import&nbsp;e,&nbsp;tau&nbsp;&nbsp;</li>\r\n	<li>print(&nbsp;&quot;The&nbsp;value&nbsp;of&nbsp;tau&nbsp;constant&nbsp;is:&nbsp;&quot;,&nbsp;tau&nbsp;)&nbsp;&nbsp;</li>\r\n	<li>print(&nbsp;&quot;The&nbsp;value&nbsp;of&nbsp;the&nbsp;euler&#39;s&nbsp;number&nbsp;is:&nbsp;&quot;,&nbsp;e&nbsp;)&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p><strong>Output:</strong></p>\r\n\r\n<pre>\r\nThe value of tau constant is:  6.283185307179586\r\nThe value of the euler&#39;s number is:  2.718281828459045\r\n</pre>\r\n\r\n<h3>Import all Names - From import * Statement</h3>\r\n\r\n<p>To import all the objects from a module within the present namespace, use the * symbol and the from and import keyword.</p>\r\n\r\n<p><strong>Syntax:</strong></p>\r\n\r\n<ol start=\"1\">\r\n	<li>from&nbsp;name_of_module&nbsp;import&nbsp;*&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p>There are benefits and drawbacks to using the symbol *. It is not advised to use * unless we are certain of our particular requirements from the module; otherwise, do so.</p>\r\n\r\n<p>Here is an example of the same.</p>\r\n\r\n<p><strong>Code</strong></p>\r\n\r\n<ol start=\"1\">\r\n	<li>#&nbsp;importing&nbsp;the&nbsp;complete&nbsp;math&nbsp;module&nbsp;using&nbsp;*&nbsp;&nbsp;</li>\r\n	<li>from&nbsp;math&nbsp;import&nbsp;*&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>#&nbsp;accessing&nbsp;functions&nbsp;of&nbsp;math&nbsp;module&nbsp;without&nbsp;using&nbsp;the&nbsp;dot&nbsp;operator&nbsp;&nbsp;</li>\r\n	<li>print(&nbsp;&quot;Calculating&nbsp;square&nbsp;root:&nbsp;&quot;,&nbsp;sqrt(25)&nbsp;)&nbsp;&nbsp;</li>\r\n	<li>print(&nbsp;&quot;Calculating&nbsp;tangent&nbsp;of&nbsp;an&nbsp;angle:&nbsp;&quot;,&nbsp;tan(pi/6)&nbsp;)&nbsp;#&nbsp;here&nbsp;pi&nbsp;is&nbsp;also&nbsp;imported&nbsp;from&nbsp;the&nbsp;math&nbsp;module&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p><strong>Output:</strong></p>\r\n\r\n<pre>\r\nCalculating square root:  5.0\r\nCalculating tangent of an angle:  0.5773502691896257\r\n</pre>\r\n\r\n<h2>Locating Path of Modules</h2>\r\n\r\n<p>The interpreter searches numerous places when importing a module in the Python program. Several directories are searched if the built-in module is not present. The list of directories can be accessed using sys.path. The Python interpreter looks for the module in the way described below:</p>\r\n\r\n<p>The module is initially looked for in the current working directory. Python then explores every directory in the shell parameter PYTHONPATH if the module cannot be located in the current directory. A list of folders makes up the environment variable known as PYTHONPATH. Python examines the installation-dependent set of folders set up when Python is downloaded if that also fails.</p>\r\n\r\n<p>Here is an example to print the path.</p>\r\n\r\n<p><strong>Code</strong></p>\r\n\r\n<ol start=\"1\">\r\n	<li>#&nbsp;We&nbsp;will&nbsp;import&nbsp;the&nbsp;sys&nbsp;module&nbsp;&nbsp;</li>\r\n	<li>import&nbsp;sys&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>#&nbsp;we&nbsp;will&nbsp;import&nbsp;sys.path&nbsp;&nbsp;</li>\r\n	<li>print(sys.path)&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p><strong>Output:</strong></p>\r\n\r\n<pre>\r\n[&#39;/home/pyodide&#39;, &#39;/home/pyodide/lib/Python310.zip&#39;, &#39;/lib/Python3.10&#39;, &#39;/lib/Python3.10/lib-dynload&#39;, &#39;&#39;, &#39;/lib/Python3.10/site-packages&#39;]\r\n</pre>\r\n\r\n<h2>The dir() Built-in Function</h2>\r\n\r\n<p>We may use the dir() method to identify names declared within a module.</p>\r\n\r\n<p>For instance, we have the following names in the standard module str. To print the names, we will use the dir() method in the following way:</p>\r\n\r\n<p><strong>Code</strong></p>\r\n\r\n<ol start=\"1\">\r\n	<li>#&nbsp;Python&nbsp;program&nbsp;to&nbsp;print&nbsp;the&nbsp;directory&nbsp;of&nbsp;a&nbsp;module&nbsp;&nbsp;</li>\r\n	<li>print(&nbsp;&quot;List&nbsp;of&nbsp;functions:\n&nbsp;&quot;,&nbsp;dir(&nbsp;str&nbsp;),&nbsp;end=&quot;,&nbsp;&quot;&nbsp;)&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p><strong>Output:</strong></p>\r\n\r\n<pre>\r\nList of functions:\r\n  [&#39;__add__&#39;, &#39;__class__&#39;, &#39;__contains__&#39;, &#39;__delattr__&#39;, &#39;__dir__&#39;, &#39;__doc__&#39;, &#39;__eq__&#39;, &#39;__format__&#39;, &#39;__ge__&#39;, &#39;__getattribute__&#39;, &#39;__getitem__&#39;, &#39;__getnewargs__&#39;, &#39;__gt__&#39;, &#39;__hash__&#39;, &#39;__init__&#39;, &#39;__init_subclass__&#39;, &#39;__iter__&#39;, &#39;__le__&#39;, &#39;__len__&#39;, &#39;__lt__&#39;, &#39;__mod__&#39;, &#39;__mul__&#39;, &#39;__ne__&#39;, &#39;__new__&#39;, &#39;__reduce__&#39;, &#39;__reduce_ex__&#39;, &#39;__repr__&#39;, &#39;__rmod__&#39;, &#39;__rmul__&#39;, &#39;__setattr__&#39;, &#39;__sizeof__&#39;, &#39;__str__&#39;, &#39;__subclasshook__&#39;, &#39;capitalize&#39;, &#39;casefold&#39;, &#39;center&#39;, &#39;count&#39;, &#39;encode&#39;, &#39;endswith&#39;, &#39;expandtabs&#39;, &#39;find&#39;, &#39;format&#39;, &#39;format_map&#39;, &#39;index&#39;, &#39;isalnum&#39;, &#39;isalpha&#39;, &#39;isascii&#39;, &#39;isdecimal&#39;, &#39;isdigit&#39;, &#39;isidentifier&#39;, &#39;islower&#39;, &#39;isnumeric&#39;, &#39;isprintable&#39;, &#39;isspace&#39;, &#39;istitle&#39;, &#39;isupper&#39;, &#39;join&#39;, &#39;ljust&#39;, &#39;lower&#39;, &#39;lstrip&#39;, &#39;maketrans&#39;, &#39;partition&#39;, &#39;removeprefix&#39;, &#39;removesuffix&#39;, &#39;replace&#39;, &#39;rfind&#39;, &#39;rindex&#39;, &#39;rjust&#39;, &#39;rpartition&#39;, &#39;rsplit&#39;, &#39;rstrip&#39;, &#39;split&#39;, &#39;splitlines&#39;, &#39;startswith&#39;, &#39;strip&#39;, &#39;swapcase&#39;, &#39;title&#39;, &#39;translate&#39;, &#39;upper&#39;, &#39;zfill&#39;]\r\n</pre>\r\n\r\n<h2>Namespaces and Scoping</h2>\r\n\r\n<p>Objects are represented by names or identifiers called variables. A namespace is a dictionary containing the names of variables (keys) and the objects that go with them (values).</p>\r\n\r\n<p>Both local and global namespace variables can be accessed by a Python statement. When two variables with the same name are local and global, the local variable takes the role of the global variable. There is a separate local namespace for every function. The scoping rule for class methods is the same as for regular functions. Python determines if parameters are local or global based on reasonable predictions. Any variable that is allocated a value in a method is regarded as being local.</p>\r\n\r\n<p>Therefore, we must use the global statement before we may provide a value to a global variable inside of a function. Python is informed that Var_Name is a global variable by the line global Var_Name. Python stops looking for the variable inside the local namespace.</p>\r\n\r\n<p>We declare the variable Number, for instance, within the global namespace. Since we provide a Number a value inside the function, Python considers a Number to be a local variable. UnboundLocalError will be the outcome if we try to access the value of the local variable without or before declaring it global.</p>\r\n\r\n<p><strong>Code</strong></p>\r\n\r\n<ol start=\"1\">\r\n	<li>Number&nbsp;=&nbsp;204&nbsp;&nbsp;</li>\r\n	<li>def&nbsp;AddNumber():&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;#&nbsp;accessing&nbsp;the&nbsp;global&nbsp;namespace&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;global&nbsp;Number&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;Number&nbsp;=&nbsp;Number&nbsp;+&nbsp;200&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;</li>\r\n	<li>print(&nbsp;Number&nbsp;)&nbsp;&nbsp;</li>\r\n	<li>AddNumber()&nbsp;&nbsp;</li>\r\n	<li>print(&nbsp;Number&nbsp;)&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p><strong>Output:</strong></p>\r\n\r\n<pre>\r\n204\r\n404</pre>\r\n', 'PYTHON'),
(77, 'Python Exceptions', '<h1>Python Exceptions</h1>\r\n\r\n<p>When a Python program meets an error, it stops the execution of the rest of the program. An error in Python might be either an error in the syntax of an expression or a Python exception. We will see what an exception is. Also, we will see the difference between a syntax error and an exception in this tutorial. Following that, we will learn about trying and except blocks and how to raise exceptions and make assertions. After that, we will see the Python exceptions list.</p>\r\n\r\n<h2>What is an Exception?</h2>\r\n\r\n<p>An exception in Python is an incident that happens while executing a program that causes the regular course of the program&#39;s commands to be disrupted. When a Python code comes across a condition it can&#39;t handle, it raises an exception. An object in Python that describes an error is called an exception.</p>\r\n\r\n<p>When a Python code throws an exception, it has two options: handle the exception immediately or stop and quit.</p>\r\n\r\n<h3>Exceptions versus Syntax Errors</h3>\r\n\r\n<p>When the interpreter identifies a statement that has an error, syntax errors occur. Consider the following scenario:</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Code</strong></p>\r\n\r\n<ol start=\"1\">\r\n	<li>#Python&nbsp;code&nbsp;after&nbsp;removing&nbsp;the&nbsp;syntax&nbsp;error&nbsp;&nbsp;</li>\r\n	<li>string&nbsp;=&nbsp;&quot;Python&nbsp;Exceptions&quot;&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;</li>\r\n	<li>for&nbsp;s&nbsp;in&nbsp;string:&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(s&nbsp;!=&nbsp;o:&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;print(&nbsp;s&nbsp;)&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p><strong>Output:</strong></p>\r\n\r\n<pre>\r\n    if (s != o:\r\n              ^\r\nSyntaxError: invalid syntax\r\n</pre>\r\n\r\n<p>The arrow in the output shows where the interpreter encountered a syntactic error. There was one unclosed bracket in this case. Close it and rerun the program:</p>\r\n\r\n<p><strong>Code</strong></p>\r\n\r\n<ol start=\"1\">\r\n	<li>#Python&nbsp;code&nbsp;after&nbsp;removing&nbsp;the&nbsp;syntax&nbsp;error&nbsp;&nbsp;</li>\r\n	<li>string&nbsp;=&nbsp;&quot;Python&nbsp;Exceptions&quot;&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;</li>\r\n	<li>for&nbsp;s&nbsp;in&nbsp;string:&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(s&nbsp;!=&nbsp;o):&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;print(&nbsp;s&nbsp;)&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p><strong>Output:</strong></p>\r\n\r\n<pre>\r\n      2 string = &quot;Python Exceptions&quot;\r\n      4 for s in string:\r\n----&gt; 5     if (s != o):\r\n      6         print( s )\r\n\r\nNameError: name &#39;o&#39; is not defined\r\n</pre>\r\n\r\n<p>We encountered an exception error after executing this code. When syntactically valid Python code produces an error, this is the kind of error that arises. The output&#39;s last line specified the name of the exception error code encountered. Instead of displaying just &quot;exception error&quot;, Python displays information about the sort of exception error that occurred. It was a NameError in this situation. Python includes several built-in exceptions. However, Python offers the facility to construct custom exceptions.</p>\r\n\r\n<h2>Try and Except Statement - Catching Exceptions</h2>\r\n\r\n<p>In Python, we catch exceptions and handle them using try and except code blocks. The try clause contains the code that can raise an exception, while the except clause contains the code lines that handle the exception. Let&#39;s see if we can access the index from the array, which is more than the array&#39;s length, and handle the resulting exception.</p>\r\n\r\n<p><strong>Code</strong></p>\r\n\r\n<ol start=\"1\">\r\n	<li>#&nbsp;Python&nbsp;code&nbsp;to&nbsp;catch&nbsp;an&nbsp;exception&nbsp;and&nbsp;handle&nbsp;it&nbsp;using&nbsp;try&nbsp;and&nbsp;except&nbsp;code&nbsp;blocks&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;</li>\r\n	<li>a&nbsp;=&nbsp;[&quot;Python&quot;,&nbsp;&quot;Exceptions&quot;,&nbsp;&quot;try&nbsp;and&nbsp;except&quot;]&nbsp;&nbsp;</li>\r\n	<li>try:&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;#looping&nbsp;through&nbsp;the&nbsp;elements&nbsp;of&nbsp;the&nbsp;array&nbsp;a,&nbsp;choosing&nbsp;a&nbsp;range&nbsp;that&nbsp;goes&nbsp;beyond&nbsp;the&nbsp;length&nbsp;of&nbsp;the&nbsp;array&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;i&nbsp;in&nbsp;range(&nbsp;4&nbsp;):&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;print(&nbsp;&quot;The&nbsp;index&nbsp;and&nbsp;element&nbsp;from&nbsp;the&nbsp;array&nbsp;is&quot;,&nbsp;i,&nbsp;a[i]&nbsp;)&nbsp;&nbsp;</li>\r\n	<li>#if&nbsp;an&nbsp;error&nbsp;occurs&nbsp;in&nbsp;the&nbsp;try&nbsp;block,&nbsp;then&nbsp;except&nbsp;block&nbsp;will&nbsp;be&nbsp;executed&nbsp;by&nbsp;the&nbsp;Python&nbsp;interpreter&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>except:&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;print&nbsp;(&quot;Index&nbsp;out&nbsp;of&nbsp;range&quot;)&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p><strong>Output:</strong></p>\r\n\r\n<pre>\r\nThe index and element from the array is 0 Python\r\nThe index and element from the array is 1 Exceptions\r\nThe index and element from the array is 2 try and except\r\nIndex out of range\r\n</pre>\r\n\r\n<p>The code blocks that potentially produce an error are inserted inside the try clause in the preceding example. The value of i greater than 2 attempts to access the list&#39;s item beyond its length, which is not present, resulting in an exception. The except clause then catches this exception and executes code without stopping it.</p>\r\n\r\n<h2>How to Raise an Exception</h2>\r\n\r\n<p>If a condition does not meet our criteria but is correct according to the Python interpreter, we can intentionally raise an exception using the raise keyword. We can use a customized exception in conjunction with the statement.</p>\r\n\r\n<p>If we wish to use raise to generate an exception when a given condition happens, we may do so as follows:</p>\r\n\r\n<p><strong>Code</strong></p>\r\n\r\n<ol start=\"1\">\r\n	<li>#Python&nbsp;code&nbsp;to&nbsp;show&nbsp;how&nbsp;to&nbsp;raise&nbsp;an&nbsp;exception&nbsp;in&nbsp;Python&nbsp;&nbsp;</li>\r\n	<li>num&nbsp;=&nbsp;[3,&nbsp;4,&nbsp;5,&nbsp;7]&nbsp;&nbsp;</li>\r\n	<li>if&nbsp;len(num)&nbsp;&gt;&nbsp;3:&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;raise&nbsp;Exception(&nbsp;f&quot;Length&nbsp;of&nbsp;the&nbsp;given&nbsp;list&nbsp;must&nbsp;be&nbsp;less&nbsp;than&nbsp;or&nbsp;equal&nbsp;to&nbsp;3&nbsp;but&nbsp;is&nbsp;{len(num)}&quot;&nbsp;)&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p><strong>Output:</strong></p>\r\n\r\n<pre>\r\n      1 num = [3, 4, 5, 7]\r\n      2 if len(num) &gt; 3:\r\n----&gt; 3     raise Exception( f&quot;Length of the given list must be less than or equal to 3 but is {len(num)}&quot; )\r\n\r\nException: Length of the given list must be less than or equal to 3 but is 4\r\n</pre>\r\n\r\n<p>The implementation stops and shows our exception in the output, providing indications as to what went incorrect.</p>\r\n\r\n<h2>Assertions in Python</h2>\r\n\r\n<p>When we&#39;re finished verifying the program, an assertion is a consistency test that we can switch on or off.</p>\r\n\r\n<p>The simplest way to understand an assertion is to compare it with an if-then condition. An exception is thrown if the outcome is false when an expression is evaluated.</p>\r\n\r\n<p>Assertions are made via the assert statement, which was added in Python 1.5 as the latest keyword.</p>\r\n\r\n<p>Assertions are commonly used at the beginning of a function to inspect for valid input and at the end of calling the function to inspect for valid output.</p>\r\n\r\n<h3>The assert Statement</h3>\r\n\r\n<p>Python examines the adjacent expression, preferably true when it finds an assert statement. Python throws an AssertionError exception if the result of the expression is false.</p>\r\n\r\n<p><strong>The syntax for the assert clause is &minus;</strong></p>\r\n\r\n<ol start=\"1\">\r\n	<li>assert&nbsp;Expressions[,&nbsp;Argument]&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p>Python uses ArgumentException, if the assertion fails, as the argument for the AssertionError. We can use the try-except clause to catch and handle AssertionError exceptions, but if they aren&#39;t, the program will stop, and the Python interpreter will generate a traceback.</p>\r\n\r\n<p><strong>Code</strong></p>\r\n\r\n<ol start=\"1\">\r\n	<li>#Python&nbsp;program&nbsp;to&nbsp;show&nbsp;how&nbsp;to&nbsp;use&nbsp;assert&nbsp;keyword&nbsp;&nbsp;</li>\r\n	<li>#&nbsp;defining&nbsp;a&nbsp;function&nbsp;&nbsp;</li>\r\n	<li>def&nbsp;square_root(&nbsp;Number&nbsp;):&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;assert&nbsp;(&nbsp;Number&nbsp;&lt;&nbsp;0),&nbsp;&quot;Give&nbsp;a&nbsp;positive&nbsp;integer&quot;&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;Number**(1/2)&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;</li>\r\n	<li>#Calling&nbsp;function&nbsp;and&nbsp;passing&nbsp;the&nbsp;values&nbsp;&nbsp;</li>\r\n	<li>print(&nbsp;square_root(&nbsp;36&nbsp;)&nbsp;)&nbsp;&nbsp;</li>\r\n	<li>print(&nbsp;square_root(&nbsp;-36&nbsp;)&nbsp;)&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p><strong>Output:</strong></p>\r\n\r\n<pre>\r\n      7 #Calling function and passing the values\r\n----&gt; 8 print( square_root( 36 ) )\r\n      9 print( square_root( -36 ) )\r\n\r\nInput In [23], in square_root(Number)\r\n      3 def square_root( Number ):\r\n----&gt; 4     assert ( Number &lt; 0), &quot;Give a positive integer&quot;\r\n      5     return Number**(1/2)\r\n\r\nAssertionError: Give a positive integer\r\n</pre>\r\n\r\n<h2>Try with Else Clause</h2>\r\n\r\n<p>Python also supports the else clause, which should come after every except clause, in the try, and except blocks. Only when the try clause fails to throw an exception the Python interpreter goes on to the else block.</p>\r\n\r\n<p>Here is an instance of a try clause with an else clause.</p>\r\n\r\n<p><strong>Code</strong></p>\r\n\r\n<ol start=\"1\">\r\n	<li>#&nbsp;Python&nbsp;program&nbsp;to&nbsp;show&nbsp;how&nbsp;to&nbsp;use&nbsp;else&nbsp;clause&nbsp;with&nbsp;try&nbsp;and&nbsp;except&nbsp;clauses&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;</li>\r\n	<li>#&nbsp;Defining&nbsp;a&nbsp;function&nbsp;which&nbsp;returns&nbsp;reciprocal&nbsp;of&nbsp;a&nbsp;number&nbsp;&nbsp;</li>\r\n	<li>def&nbsp;reciprocal(&nbsp;num1&nbsp;):&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;try:&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;reci&nbsp;=&nbsp;1&nbsp;/&nbsp;num1&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;except&nbsp;ZeroDivisionError:&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;print(&nbsp;&quot;We&nbsp;cannot&nbsp;divide&nbsp;by&nbsp;zero&quot;&nbsp;)&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;else:&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;print&nbsp;(&nbsp;reci&nbsp;)&nbsp;&nbsp;</li>\r\n	<li>#&nbsp;Calling&nbsp;the&nbsp;function&nbsp;and&nbsp;passing&nbsp;values&nbsp;&nbsp;</li>\r\n	<li>reciprocal(&nbsp;4&nbsp;)&nbsp;&nbsp;</li>\r\n	<li>reciprocal(&nbsp;0&nbsp;)&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p><strong>Output:</strong></p>\r\n\r\n<pre>\r\n0.25\r\nWe cannot divide by zero\r\n</pre>\r\n\r\n<h2>Finally Keyword in Python</h2>\r\n\r\n<p>The finally keyword is available in Python, and it is always used after the try-except block. The finally code block is always executed after the try block has terminated normally or after the try block has terminated for some other reason.</p>\r\n\r\n<p>Here is an example of finally keyword with try-except clauses:</p>\r\n\r\n<p><strong>Code</strong></p>\r\n\r\n<ol start=\"1\">\r\n	<li>#&nbsp;Python&nbsp;code&nbsp;to&nbsp;show&nbsp;the&nbsp;use&nbsp;of&nbsp;finally&nbsp;clause&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;</li>\r\n	<li>#&nbsp;Raising&nbsp;an&nbsp;exception&nbsp;in&nbsp;try&nbsp;block&nbsp;&nbsp;</li>\r\n	<li>try:&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;div&nbsp;=&nbsp;4&nbsp;//&nbsp;0&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;print(&nbsp;div&nbsp;)&nbsp;&nbsp;</li>\r\n	<li>#&nbsp;this&nbsp;block&nbsp;will&nbsp;handle&nbsp;the&nbsp;exception&nbsp;raised&nbsp;&nbsp;</li>\r\n	<li>except&nbsp;ZeroDivisionError:&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;print(&nbsp;&quot;Atepting&nbsp;to&nbsp;divide&nbsp;by&nbsp;zero&quot;&nbsp;)&nbsp;&nbsp;</li>\r\n	<li>#&nbsp;this&nbsp;will&nbsp;always&nbsp;be&nbsp;executed&nbsp;no&nbsp;matter&nbsp;exception&nbsp;is&nbsp;raised&nbsp;or&nbsp;not&nbsp;&nbsp;</li>\r\n	<li>finally:&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;print(&nbsp;&#39;This&nbsp;is&nbsp;code&nbsp;of&nbsp;finally&nbsp;clause&#39;&nbsp;)&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p><strong>Output:</strong></p>\r\n\r\n<pre>\r\nAtepting to divide by zero\r\nThis is code of finally clause\r\n</pre>\r\n\r\n<h2>User-Defined Exceptions</h2>\r\n\r\n<p>By inheriting classes from the typical built-in exceptions, Python also lets us design our customized exceptions.</p>\r\n\r\n<p>Here is an illustration of a RuntimeError. In this case, a class that derives from RuntimeError is produced. Once an exception is detected, we can use this to display additional detailed information.</p>\r\n\r\n<p>We raise a user-defined exception in the try block and then handle the exception in the except block. An example of the class EmptyError is created using the variable var.</p>\r\n\r\n<p><strong>Code</strong></p>\r\n\r\n<ol start=\"1\">\r\n	<li>class&nbsp;EmptyError(&nbsp;RuntimeError&nbsp;):&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;def&nbsp;__init__(self,&nbsp;argument):&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;self.arguments&nbsp;=&nbsp;argument&nbsp;&nbsp;</li>\r\n	<li>Once&nbsp;the&nbsp;preceding&nbsp;class&nbsp;has&nbsp;been&nbsp;created,&nbsp;the&nbsp;following&nbsp;is&nbsp;how&nbsp;to&nbsp;raise&nbsp;an&nbsp;exception:&nbsp;&nbsp;</li>\r\n	<li>Code&nbsp;&nbsp;</li>\r\n	<li>var&nbsp;=&nbsp;&quot;&nbsp;&quot;&nbsp;&nbsp;</li>\r\n	<li>try:&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;raise&nbsp;EmptyError(&nbsp;&quot;The&nbsp;variable&nbsp;is&nbsp;empty&quot;&nbsp;)&nbsp;&nbsp;</li>\r\n	<li>except&nbsp;(EmptyError,&nbsp;var):&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;print(&nbsp;var.arguments&nbsp;)&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p><strong>Output:</strong></p>\r\n\r\n<pre>\r\n      2 try:\r\n----&gt; 3     raise EmptyError( &quot;The variable is empty&quot; )\r\n      4 except (EmptyError, var):\r\n\r\nEmptyError: The variable is empty</pre>\r\n', 'PYTHON'),
(78, 'Python Regex', '<p>A regular expression is a set of characters with highly specialized syntax that we can use to find or match other characters or groups of characters. In short, regular expressions, or Regex, are widely used in the UNIX world.</p>\r\n\r\n<p>The re-module in Python gives full support for regular expressions of Pearl style. The re module raises the re.error exception whenever an error occurs while implementing or using a regular expression.</p>\r\n\r\n<p>We&#39;ll go over two crucial functions utilized to deal with regular expressions. But first, a minor point: many letters have a particular meaning when utilized in a regular expression.</p>\r\n\r\n<h2>re.match()</h2>\r\n\r\n<p>Python&#39;s re.match() function finds and delivers the very first appearance of a regular expression pattern. In Python, the RegEx Match function solely searches for a matching string at the beginning of the provided text to be searched. The matching object is produced if one match is found in the first line. If a match is found in a subsequent line, the Python RegEx Match function gives output as null.</p>\r\n\r\n<p>PlayNext</p>\r\n\r\n<p>Unmute</p>\r\n\r\n<p>Current Time&Acirc;&nbsp;0:00</p>\r\n\r\n<p>/</p>\r\n\r\n<p>Duration&Acirc;&nbsp;18:10</p>\r\n\r\n<p>Loaded:&nbsp;0.37%</p>\r\n\r\n<p>&Acirc;&nbsp;</p>\r\n\r\n<p>Fullscreen</p>\r\n\r\n<p>Backward Skip 10sPlay VideoForward Skip 10s</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Examine the implementation for the re.match() method in Python. The expressions &quot;.w*&quot; and &quot;.w*?&quot; will match words that have the letter &quot;w,&quot; and anything that does not has the letter &quot;w&quot; will be ignored. The for loop is used in this Python re.match() illustration to inspect for matches for every element in the list of words.</p>\r\n\r\n<h2>Matching Characters</h2>\r\n\r\n<p>The majority of symbols and characters will easily match. (A case-insensitive feature can be enabled, allowing this RE to match Python or PYTHON.) The regular expression check, for instance, will match exactly the string check.</p>\r\n\r\n<p>There are some exceptions to this general rule; certain symbols are special metacharacters that don&#39;t match. Rather, they indicate that they must compare something unusual, or they have an effect on other parts of the RE by recurring or modifying their meaning.</p>\r\n\r\n<p>Here&#39;s the list of the metacharacters;</p>\r\n\r\n<ol start=\"1\">\r\n	<li>.&nbsp;^&nbsp;$&nbsp;*&nbsp;+&nbsp;?&nbsp;{&nbsp;}&nbsp;[&nbsp;]&nbsp;&nbsp;|&nbsp;(&nbsp;)&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<h2>Repeating Things</h2>\r\n\r\n<p>The ability to match different sets of symbols will be the first feature regular expressions can achieve that&#39;s not previously achievable with string techniques. On the other hand, Regexes isn&#39;t much of an improvement if that had been their only extra capacity. We can also define that some sections of the RE must be reiterated a specified number of times.</p>\r\n\r\n<p>The first metacharacter we&#39;ll examine for recurring occurrences is *. Instead of matching the actual character &#39;*,&#39; * signals that the preceding letter can be matched 0 or even more times, rather than exactly one.</p>\r\n\r\n<p>Ba*t, for example, matches &#39;bt&#39; (zero &#39;a&#39; characters), &#39;bat&#39; (one &#39;a&#39; character), &#39;baaat&#39; (three &#39;a&#39; characters), etc.</p>\r\n\r\n<p>Greedy repetitions, such as *, cause the matching algorithm to attempt to replicate the RE as many times as feasible. If later elements of the sequence fail to match, the matching algorithm will retry with lesser repetitions.</p>\r\n\r\n<p>This is the syntax of re.match() function -</p>\r\n\r\n<ol start=\"1\">\r\n	<li>re.match(pattern,&nbsp;string,&nbsp;flags=0)&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<h3>Parameters</h3>\r\n\r\n<p><strong>pattern:-</strong>&nbsp;this is the expression that is to be matched. It must be a regular expression</p>\r\n\r\n<p><strong>string:-</strong>&nbsp;This is the string that will be compared to the pattern at the start of the string.</p>\r\n\r\n<p><strong>flags:-</strong>&nbsp;Bitwise OR (|) can be used to express multiple flags. These are modifications, and the table below lists them.</p>\r\n\r\n<p><strong>Code</strong></p>\r\n\r\n<ol start=\"1\">\r\n	<li>import&nbsp;re&nbsp;&nbsp;</li>\r\n	<li>line&nbsp;=&nbsp;&quot;Learn&nbsp;Python&nbsp;through&nbsp;tutorials&nbsp;on&nbsp;javatpoint&quot;&nbsp;&nbsp;</li>\r\n	<li>match_object&nbsp;=&nbsp;re.match(&nbsp;r&#39;.w*&nbsp;(.w?)&nbsp;(.w*?)&#39;,&nbsp;line,&nbsp;re.M|re.I)&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;</li>\r\n	<li>if&nbsp;match_object:&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;print&nbsp;(&quot;match&nbsp;object&nbsp;group&nbsp;:&nbsp;&quot;,&nbsp;match_object.group())&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;print&nbsp;(&quot;match&nbsp;object&nbsp;1&nbsp;group&nbsp;:&nbsp;&quot;,&nbsp;match_object.group(1))&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;print&nbsp;(&quot;match&nbsp;object&nbsp;2&nbsp;group&nbsp;:&nbsp;&quot;,&nbsp;match_object.group(2))&nbsp;&nbsp;</li>\r\n	<li>else:&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;print&nbsp;(&nbsp;&quot;There&nbsp;isn&#39;t&nbsp;any&nbsp;match!!&quot;&nbsp;)&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p><strong>Output:</strong></p>\r\n\r\n<pre>\r\nThere isn&#39;t any match!!\r\n</pre>\r\n\r\n<h2>re.search()</h2>\r\n\r\n<p>The re.search() function will look for the first occurrence of a regular expression sequence and deliver it. It will verify all rows of the supplied string, unlike Python&#39;s re.match(). If the pattern is matched, the re.search() function produces a match object; otherwise, it returns &quot;null.&quot;</p>\r\n\r\n<p>To execute the search() function, we must first import the Python re-module and afterward run the program. The &quot;sequence&quot; and &quot;content&quot; to check from our primary string are passed to the Python re.search() call.</p>\r\n\r\n<p>This is the syntax of re.search() function -</p>\r\n\r\n<ol start=\"1\">\r\n	<li>re.search(pattern,&nbsp;string,&nbsp;flags=0)&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p>Here is the description of the parameters -</p>\r\n\r\n<p><strong>pattern:-</strong>&nbsp;this is the expression that is to be matched. It must be a regular expression</p>\r\n\r\n<p><strong>string:-</strong>&nbsp;The string provided is the one that will be searched for the pattern wherever within it.</p>\r\n\r\n<p><strong>flags:-</strong>&nbsp;Bitwise OR (|) can be used to express multiple flags. These are modifications, and the table below lists them.</p>\r\n\r\n<p><strong>Code</strong></p>\r\n\r\n<ol start=\"1\">\r\n	<li>import&nbsp;re&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;</li>\r\n	<li>line&nbsp;=&nbsp;&quot;Learn&nbsp;Python&nbsp;through&nbsp;tutorials&nbsp;on&nbsp;javatpoint&quot;;&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;</li>\r\n	<li>search_object&nbsp;=&nbsp;re.search(&nbsp;r&#39;&nbsp;.*t?&nbsp;(.*t?)&nbsp;(.*t?)&#39;,&nbsp;line)&nbsp;&nbsp;</li>\r\n	<li>if&nbsp;search_object:&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;print(&quot;search&nbsp;object&nbsp;group&nbsp;:&nbsp;&quot;,&nbsp;search_object.group())&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;print(&quot;search&nbsp;object&nbsp;group&nbsp;1&nbsp;:&nbsp;&quot;,&nbsp;search_object.group(1))&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;print(&quot;search&nbsp;object&nbsp;group&nbsp;2&nbsp;:&nbsp;&quot;,&nbsp;search_object.group(2))&nbsp;&nbsp;</li>\r\n	<li>else:&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;print(&quot;Nothing&nbsp;found!!&quot;)&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p><strong>Output:</strong></p>\r\n\r\n<pre>\r\nsearch object group :   Python through tutorials on javatpoint\r\nsearch object group 1 :  on\r\nsearch object group 2 :  javatpoint\r\n</pre>\r\n\r\n<h2>Matching Versus Searching</h2>\r\n\r\n<p>Python has two primary regular expression functions: match and search. Match looks for a match only where the string commencements, whereas search looks for a match everywhere in the string (this is the default function of Perl).</p>\r\n\r\n<p><strong>Code</strong></p>\r\n\r\n<ol start=\"1\">\r\n	<li>import&nbsp;re&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;</li>\r\n	<li>line&nbsp;=&nbsp;&quot;Learn&nbsp;Python&nbsp;through&nbsp;tutorials&nbsp;on&nbsp;javatpoint&quot;&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;</li>\r\n	<li>match_object&nbsp;=&nbsp;re.match(&nbsp;r&#39;through&#39;,&nbsp;line,&nbsp;re.M|re.I)&nbsp;&nbsp;</li>\r\n	<li>if&nbsp;match_object:&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;print(&quot;match&nbsp;object&nbsp;group&nbsp;:&nbsp;&quot;,&nbsp;match_object.group())&nbsp;&nbsp;</li>\r\n	<li>else:&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;print(&nbsp;&quot;There&nbsp;isn&#39;t&nbsp;any&nbsp;match!!&quot;)&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;</li>\r\n	<li>search_object&nbsp;=&nbsp;re.search(&nbsp;r&#39;&nbsp;.*t?&nbsp;&#39;,&nbsp;line,&nbsp;re.M|re.I)&nbsp;&nbsp;</li>\r\n	<li>if&nbsp;searchObj:&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;print(&quot;search&nbsp;object&nbsp;group&nbsp;:&nbsp;&quot;,&nbsp;search_object.group())&nbsp;&nbsp;</li>\r\n	<li>else:&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;print(&quot;Nothing&nbsp;found!!&quot;)&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p><strong>Output:</strong></p>\r\n\r\n<pre>\r\nThere isn&#39;t any match!!\r\nsearch object group :   Python through tutorials on \r\n</pre>\r\n\r\n<h2>re.findall()</h2>\r\n\r\n<p>The findall() function is often used to look for &quot;all&quot; appearances of a pattern. The search() module, on the other hand, will only provide the earliest occurrence that matches the description. In a single operation, findall() will loop over all the rows of the document and provide all non-overlapping regular matches.</p>\r\n\r\n<p>We have a line of text, and we want to get all of the occurrences from the content, so we use Python&#39;s re.findall() function. It will search the entire content provided to it.</p>\r\n\r\n<p>Using the re-package isn&#39;t always a good idea. If we&#39;re only searching a fixed string or a specific character class, and we&#39;re not leveraging any re features like the IGNORECASE flag, regular expressions&#39; full capability would not be needed. Strings offer various ways for doing tasks with fixed strings, and they&#39;re generally considerably faster than the larger, more generalized regular expression solver because the execution is a simple short C loop that has been optimized for the job.</p>\r\n', 'PYTHON'),
(79, 'Python OOPs Concepts', '<h1>Python OOPs Concepts</h1>\r\n\r\n<p>Like other general-purpose programming languages, Python is also an object-oriented language since its beginning. It allows us to develop applications using an Object-Oriented approach. In&nbsp;<a href=\"https://www.javatpoint.com/python-tutorial\">Python</a>, we can easily create and use classes and objects.</p>\r\n\r\n<p>An object-oriented paradigm is to design the program using classes and objects. The object is related to real-word entities such as book, house, pencil, etc. The oops concept focuses on writing the reusable code. It is a widespread technique to solve the problem by creating objects.</p>\r\n\r\n<p>Major principles of object-oriented programming system are given below.</p>\r\n\r\n<ul>\r\n	<li>Class</li>\r\n	<li>Object</li>\r\n	<li>Method</li>\r\n	<li>Inheritance</li>\r\n	<li>Polymorphism</li>\r\n	<li>Data Abstraction</li>\r\n	<li>Encapsulation</li>\r\n</ul>\r\n\r\n<h2>Class</h2>\r\n\r\n<p>The class can be defined as a collection of objects. It is a logical entity that has some specific attributes and methods. For example: if you have an employee class, then it should contain an attribute and method, i.e. an email id, name, age, salary, etc.</p>\r\n\r\n<p>PlayNext</p>\r\n\r\n<p>Unmute</p>\r\n\r\n<p>Current Time&Acirc;&nbsp;0:00</p>\r\n\r\n<p>/</p>\r\n\r\n<p>Duration&Acirc;&nbsp;18:10</p>\r\n\r\n<p>Loaded:&nbsp;0.37%</p>\r\n\r\n<p>&Acirc;&nbsp;</p>\r\n\r\n<p>Fullscreen</p>\r\n\r\n<p>Backward Skip 10sPlay VideoForward Skip 10s</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Syntax</strong></p>\r\n\r\n<ol start=\"1\">\r\n	<li>class&nbsp;ClassName:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;statement-1&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;statement-N&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<h2>Object</h2>\r\n\r\n<p>The object is an entity that has state and behavior. It may be any real-world object like the mouse, keyboard, chair, table, pen, etc.</p>\r\n\r\n<p>Everything in Python is an object, and almost everything has attributes and methods. All functions have a built-in attribute __doc__, which returns the docstring defined in the function source code.</p>\r\n\r\n<p>When we define a class, it needs to create an object to allocate the memory. Consider the following example.</p>\r\n\r\n<p><strong>Example:</strong></p>\r\n\r\n<ol start=\"1\">\r\n	<li>class&nbsp;car:&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;def&nbsp;__init__(self,modelname,&nbsp;year):&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;self.modelname&nbsp;=&nbsp;modelname&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;self.year&nbsp;=&nbsp;year&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;def&nbsp;display(self):&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;print(self.modelname,self.year)&nbsp;&nbsp;</li>\r\n	<li>&nbsp;&nbsp;</li>\r\n	<li>c1&nbsp;=&nbsp;car(&quot;Toyota&quot;,&nbsp;2016)&nbsp;&nbsp;</li>\r\n	<li>c1.display()&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p><strong>Output:</strong></p>\r\n\r\n<pre>\r\nToyota 2016\r\n</pre>\r\n\r\n<p>In the above example, we have created the class named car, and it has two attributes modelname and year. We have created a c1 object to access the class attribute. The c1 object will allocate memory for these values. We will learn more about class and object in the next tutorial.</p>\r\n\r\n<h2>Method</h2>\r\n\r\n<p>The method is a function that is associated with an object. In Python, a method is not unique to class instances. Any object type can have methods.</p>\r\n\r\n<h2>Inheritance</h2>\r\n\r\n<p>Inheritance is the most important aspect of object-oriented programming, which simulates the real-world concept of inheritance. It specifies that the child object acquires all the properties and behaviors of the parent object.</p>\r\n\r\n<p>By using inheritance, we can create a class which uses all the properties and behavior of another class. The new class is known as a derived class or child class, and the one whose properties are acquired is known as a base class or parent class.</p>\r\n\r\n<p>It provides the re-usability of the code.</p>\r\n\r\n<h2>Polymorphism</h2>\r\n\r\n<p>Polymorphism contains two words &quot;poly&quot; and &quot;morphs&quot;. Poly means many, and morph means shape. By polymorphism, we understand that one task can be performed in different ways. For example - you have a class animal, and all animals speak. But they speak differently. Here, the &quot;speak&quot; behavior is polymorphic in a sense and depends on the animal. So, the abstract &quot;animal&quot; concept does not actually &quot;speak&quot;, but specific animals (like dogs and cats) have a concrete implementation of the action &quot;speak&quot;.</p>\r\n\r\n<h2>Encapsulation</h2>\r\n\r\n<p>Encapsulation is also an essential aspect of object-oriented programming. It is used to restrict access to methods and variables. In encapsulation, code and data are wrapped together within a single unit from being modified by accident.</p>\r\n\r\n<h2>Data Abstraction</h2>\r\n\r\n<p>Data abstraction and encapsulation both are often used as synonyms. Both are nearly synonyms because data abstraction is achieved through encapsulation.</p>\r\n\r\n<p>Abstraction is used to hide internal details and show only functionalities. Abstracting something means to give names to things so that the name captures the core of what a function or a whole program does.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h2>Object-oriented vs. Procedure-oriented Programming languages</h2>\r\n\r\n<p>The difference between object-oriented and procedure-oriented programming is given below:</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<table>\r\n	<tbody>\r\n		<tr>\r\n			<th>Index</th>\r\n			<th>Object-oriented Programming</th>\r\n			<th>Procedural Programming</th>\r\n		</tr>\r\n		<tr>\r\n			<td>1.</td>\r\n			<td>Object-oriented programming is the problem-solving approach and used where computation is done by using objects.</td>\r\n			<td>Procedural programming uses a list of instructions to do computation step by step.</td>\r\n		</tr>\r\n		<tr>\r\n			<td>2.</td>\r\n			<td>It makes the development and maintenance easier.</td>\r\n			<td>In procedural programming, It is not easy to maintain the codes when the project becomes lengthy.</td>\r\n		</tr>\r\n		<tr>\r\n			<td>3.</td>\r\n			<td>It simulates the real world entity. So real-world problems can be easily solved through oops.</td>\r\n			<td>It doesn&#39;t simulate the real world. It works on step by step instructions divided into small parts called functions.</td>\r\n		</tr>\r\n		<tr>\r\n			<td>4.</td>\r\n			<td>It provides data hiding. So it is more secure than procedural languages. You cannot access private data from anywhere.</td>\r\n			<td>Procedural language doesn&#39;t provide any proper way for data binding, so it is less secure.</td>\r\n		</tr>\r\n		<tr>\r\n			<td>5.</td>\r\n			<td>Example of object-oriented programming languages is C++, Java, .Net, Python, C#, etc.</td>\r\n			<td>Example of procedural languages are: C, Fortran, Pascal, VB etc.</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n', 'PYTHON');
INSERT INTO `courses` (`id`, `topic_name`, `description`, `course_name`) VALUES
(80, 'Python MongoDB Connectivity', '<p>To create connection between Python programming language and MongoDB database, we need to first install&nbsp;<strong>pymongo</strong>&nbsp;driver. Here, we are creating an example that connects to the database and performs basic database operations.</p>\r\n\r\n<p>This example includes the following steps:</p>\r\n\r\n<h3>1) Install Driver</h3>\r\n\r\n<ol start=\"1\">\r\n	<li>$&nbsp;pip&nbsp;install&nbsp;pymongo&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p><img alt=\"MongoDB Python mongodb connectivity 1\" src=\"https://static.javatpoint.com/mongodb/images/python-mongodb-connectivity1.png\" /></p>\r\n\r\n<h3>2) Create Python File</h3>\r\n\r\n<p><strong>// connect.py</strong></p>\r\n\r\n<ol start=\"1\">\r\n	<li>from&nbsp;pymongo&nbsp;import&nbsp;MongoClient&nbsp;#&nbsp;import&nbsp;mongo&nbsp;client&nbsp;to&nbsp;connect&nbsp;&nbsp;</li>\r\n	<li>import&nbsp;pprint&nbsp;&nbsp;</li>\r\n	<li>#&nbsp;Creating&nbsp;instance&nbsp;of&nbsp;mongoclient&nbsp;&nbsp;</li>\r\n	<li>client&nbsp;=&nbsp;MongoClient()&nbsp;&nbsp;</li>\r\n	<li>#&nbsp;Creating&nbsp;database&nbsp;&nbsp;</li>\r\n	<li>db&nbsp;=&nbsp;client.javatpoint&nbsp;&nbsp;</li>\r\n	<li>employee&nbsp;=&nbsp;{&quot;id&quot;:&nbsp;&quot;101&quot;,&nbsp;&nbsp;</li>\r\n	<li>&quot;name&quot;:&nbsp;&quot;Peter&quot;,&nbsp;&nbsp;</li>\r\n	<li>&quot;profession&quot;:&nbsp;&quot;Software&nbsp;Engineer&quot;,&nbsp;&nbsp;</li>\r\n	<li>}&nbsp;&nbsp;</li>\r\n	<li>#&nbsp;Creating&nbsp;document&nbsp;&nbsp;</li>\r\n	<li>employees&nbsp;=&nbsp;db.employees&nbsp;&nbsp;</li>\r\n	<li>#&nbsp;Inserting&nbsp;data&nbsp;&nbsp;</li>\r\n	<li>employees.insert_one(employee)&nbsp;&nbsp;</li>\r\n	<li>#&nbsp;Fetching&nbsp;data&nbsp;&nbsp;</li>\r\n	<li>pprint.pprint(employees.find_one())&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<h3>3) Execute Python Script</h3>\r\n\r\n<p>This script prints the inserted record on the console.</p>\r\n\r\n<p>PlayNext</p>\r\n\r\n<p>Unmute</p>\r\n\r\n<p>Current Time&Acirc;&nbsp;0:00</p>\r\n\r\n<p>/</p>\r\n\r\n<p>Duration&Acirc;&nbsp;18:10</p>\r\n\r\n<p>Loaded:&nbsp;0.37%</p>\r\n\r\n<p>&Acirc;&nbsp;</p>\r\n\r\n<p>Fullscreen</p>\r\n\r\n<p>Backward Skip 10sPlay VideoForward Skip 10s</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><img alt=\"MongoDB Python mongodb connectivity 2\" src=\"https://static.javatpoint.com/mongodb/images/python-mongodb-connectivity2.png\" /></p>\r\n\r\n<h3>4) Enter into Mongo Shell</h3>\r\n\r\n<p>Now, enter into MongoDB database shell to see the created database and collection.</p>\r\n\r\n<p>We can use following command to enter into the database.</p>\r\n\r\n<ol start=\"1\">\r\n	<li>$&nbsp;mongo&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p><img alt=\"MongoDB Python mongodb connectivity 3\" src=\"https://static.javatpoint.com/mongodb/images/python-mongodb-connectivity3.png\" /></p>\r\n\r\n<h3>5) Check Databases</h3>\r\n\r\n<p>The following command is used to show available databases.</p>\r\n\r\n<ol start=\"1\">\r\n	<li>&gt;&nbsp;show&nbsp;dbs&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p><img alt=\"MongoDB Python mongodb connectivity 4\" src=\"https://static.javatpoint.com/mongodb/images/python-mongodb-connectivity4.png\" /></p>\r\n\r\n<h3>6) Check Collection</h3>\r\n\r\n<p>The following command is used to show available collection into the database.</p>\r\n\r\n<ol start=\"1\">\r\n	<li>&gt;&nbsp;show&nbsp;collections&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p><img alt=\"MongoDB Python mongodb connectivity 5\" src=\"https://static.javatpoint.com/mongodb/images/python-mongodb-connectivity5.png\" /></p>\r\n\r\n<h3>7) Access Records</h3>\r\n\r\n<p>We can see the stored records in particular collection. The following command is used to show the record.</p>\r\n\r\n<ol start=\"1\">\r\n	<li>&gt;&nbsp;db.employees.find()&nbsp;&nbsp;</li>\r\n</ol>\r\n\r\n<p><img alt=\"MongoDB Python mongodb connectivity 6\" src=\"https://static.javatpoint.com/mongodb/images/python-mongodb-connectivity6.png\" /></p>\r\n', 'PYTHON');

-- --------------------------------------------------------

--
-- Table structure for table `faq`
--

CREATE TABLE `faq` (
  `id` int(11) NOT NULL,
  `faq_title` varchar(255) NOT NULL,
  `faq_description` varchar(255) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `faq`
--

INSERT INTO `faq` (`id`, `faq_title`, `faq_description`) VALUES
(1, 'what is your website is about ?', 'this website is a free TV shows ratting website'),
(2, 'How to rate the videos ?', 'Go to view videos section and select your favourite TV show and give ratting there'),
(3, 'how to log in ?', 'goto bingeflix.com/login and from there you can login');

-- --------------------------------------------------------

--
-- Table structure for table `image`
--

CREATE TABLE `image` (
  `img` varchar(255) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `image`
--

INSERT INTO `image` (`img`) VALUES
('uploadimg/4.png'),
('uploadimg/4.png'),
('uploadimg/3logo.png');

-- --------------------------------------------------------

--
-- Table structure for table `login`
--

CREATE TABLE `login` (
  `id` int(255) NOT NULL,
  `username` varchar(255) DEFAULT NULL,
  `password` varchar(255) DEFAULT NULL,
  `email` varchar(255) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `login`
--

INSERT INTO `login` (`id`, `username`, `password`, `email`) VALUES
(17, 'sayan saha', '1234', 'saha.sayan20001@gmail.com'),
(28, 'admin', 'admin', 'samndjdsfadg'),
(35, 'rick', '123', 'saha.sayan1800@gmail.com');

-- --------------------------------------------------------

--
-- Table structure for table `mytable`
--

CREATE TABLE `mytable` (
  `id` int(255) NOT NULL,
  `video_path` varchar(255) NOT NULL,
  `video_name` varchar(255) NOT NULL,
  `img` varchar(255) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `mytable`
--

INSERT INTO `mytable` (`id`, `video_path`, `video_name`, `img`) VALUES
(1, 'path1', 'myvideo', 'httpvideo'),
(2, 'path2', 'myvideo2', 'httpvideo2');

-- --------------------------------------------------------

--
-- Table structure for table `programming_languages`
--

CREATE TABLE `programming_languages` (
  `id` int(255) NOT NULL,
  `language_name` varchar(255) DEFAULT NULL,
  `language_image` varchar(255) DEFAULT NULL,
  `language_description` varchar(255) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `programming_languages`
--

INSERT INTO `programming_languages` (`id`, `language_name`, `language_image`, `language_description`) VALUES
(0, 'java', 'uploadimg/JAVA.png', ''),
(3, 'Android', 'uploadimg/ANDROID.png', 'its an android course'),
(9, 'python', 'uploadimg/PYTHON.png', ''),
(12, 'Learn C Programming', 'uploadimg/C.jpeg', 'Our C tutorials will guide you to learn C programming one step at a time.'),
(13, 'Cloud Computing ', 'uploadimg/cloud-computing-and-storage-8-638.jpg', 'Cloud Computing Tutorial');

-- --------------------------------------------------------

--
-- Table structure for table `questions`
--

CREATE TABLE `questions` (
  `qid` int(250) NOT NULL,
  `question` varchar(255) DEFAULT NULL,
  `ans_id` int(255) DEFAULT NULL,
  `course_name` varchar(255) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `questions`
--

INSERT INTO `questions` (`qid`, `question`, `ans_id`, `course_name`) VALUES
(1, 'what does html stands for', 1, 'html'),
(2, ' Who is making the Web standards?', 5, 'html'),
(3, ' Choose the correct HTML element for the largest heading:', 9, 'html'),
(4, 'What is the correct HTML element for inserting a line break?', 13, 'html'),
(5, 'what is java ?', 17, 'java');

-- --------------------------------------------------------

--
-- Table structure for table `question_test`
--

CREATE TABLE `question_test` (
  `id` int(255) NOT NULL,
  `question` varchar(255) NOT NULL,
  `opt1` varchar(255) NOT NULL,
  `opt2` varchar(255) NOT NULL,
  `opt3` varchar(255) NOT NULL,
  `opt4` varchar(255) NOT NULL,
  `answer` int(100) NOT NULL,
  `course_id` int(255) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `question_test`
--

INSERT INTO `question_test` (`id`, `question`, `opt1`, `opt2`, `opt3`, `opt4`, `answer`, `course_id`) VALUES
(1, 'What does PHP stand for?', 'PHP: Hypertext Preprocessor', 'Private Home Page', 'Personal Hypertext Processor', 'i dont know', 0, 1),
(2, 'How do you write \"Hello World\" in PHP', ' Document.Write(\"Hello World\")', ' echo \"Hello World\"', '\"Hello World\"', 'i dont know', 1, 1),
(14, 'what is haddop', 'i dont know', 'whatever ', 'bigdata soluntion', 'bigdata', 2, 9),
(15, 'The practice of creating objects based on predefined classes is often referred to as..', ' class creation', 'object creation', 'object instantiation', 'class instantiation', 3, 1),
(19, '', '', '', '', '', 0, 0),
(20, 'question 1', 'option 1', 'option 2', 'option 3', 'option 4 ', 1, 13),
(21, '', '', '', '', '', 0, 0),
(22, 'question 1', 'option 1', 'option 2', 'option 3', 'option 4 ', 1, 14),
(23, '', '', '', '', '', 0, 0),
(24, 'Which of the following option leads to the portability and security of Java?', 'Bytecode is executed by JVM', 'The applet makes the Java code secure and portable', 'Use of exception handling', '', 0, 2);

-- --------------------------------------------------------

--
-- Table structure for table `user`
--

CREATE TABLE `user` (
  `uid` int(255) NOT NULL,
  `username` varchar(255) DEFAULT NULL,
  `totalques` int(255) DEFAULT NULL,
  `answerscorrect` int(255) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `user`
--

INSERT INTO `user` (`uid`, `username`, `totalques`, `answerscorrect`) VALUES
(1, 'sunil yadav', 5, 4),
(2, 'sunil yadav', 5, 0),
(3, 'sunil yadav', 5, 0),
(4, 'sunil yadav', 5, 0),
(5, 'sunil yadav', 5, 0),
(6, 'sunil yadav', 5, 0),
(7, 'sunil yadav', 5, 0),
(8, 'sunil yadav', 5, 0),
(9, 'sunil yadav', 5, 0),
(10, 'sunil yadav', 5, 0),
(11, 'sunil yadav', 5, 0),
(12, 'sunil yadav', 5, 0),
(13, 'sunil yadav', 5, 0),
(14, 'sunil yadav', 5, 0),
(15, 'sunil yadav', 5, 0),
(16, 'sunil yadav', 5, 0),
(17, 'sunil yadav', 5, 0),
(18, 'sunil yadav', 5, 0),
(19, 'sunil yadav', 5, 3),
(20, 'sunil yadav', 5, 3),
(21, 'sunil yadav', 5, 0),
(22, 'sunil yadav', 5, 2),
(23, 'sunil yadav', 5, 2),
(24, 'sunil yadav', 5, 5),
(25, 'sunil yadav', 5, 1),
(26, 'sunil yadav', 5, 0),
(27, 'sunil yadav', 5, 1),
(28, 'sunil yadav', 5, 1),
(29, 'sunil yadav', 5, 1),
(30, 'sunil yadav', 5, 0),
(31, 'sunil yadav', 5, 0),
(32, 'sunil yadav', 5, 0),
(33, 'sunil yadav', 5, 0),
(34, 'sunil yadav', 5, 0),
(35, 'sunil yadav', 5, 0);

-- --------------------------------------------------------

--
-- Table structure for table `users`
--

CREATE TABLE `users` (
  `id` int(255) NOT NULL,
  `name` varchar(255) NOT NULL,
  `password` int(255) NOT NULL,
  `email` varchar(255) NOT NULL,
  `img` varchar(255) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `users`
--

INSERT INTO `users` (`id`, `name`, `password`, `email`, `img`) VALUES
(15, 'sunil yadav', 2365, 'sam123.sy28@gmail.com', 'img1.jpg'),
(16, 'sunil yadav', 541, 'sam123.sy28@gmail.com', 'img1.jpg'),
(17, 'sunil yadav', 520, 'sam123.sy28@gmail.com', 'img1.jpg'),
(18, 'sunil yadav', 56321, 'sam123.sy28@gmail.com', 'img1.jpg'),
(19, 'sunil yadav', 5641, 'sam123.sy28@gmail.com', 'ANDROID.png'),
(20, 'sunil yadav', 856412, 'sam123.sy28@gmail.com', 'danish.jpg'),
(21, 'sunil yadav', 56441, 'sam123.sy28@gmail.com', 'javalogo.png');

-- --------------------------------------------------------

--
-- Table structure for table `videos`
--

CREATE TABLE `videos` (
  `video_id` int(255) NOT NULL,
  `video_path` varchar(255) NOT NULL,
  `video_name` varchar(255) NOT NULL,
  `course_name` varchar(255) NOT NULL,
  `video_image` varchar(255) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `videos`
--

INSERT INTO `videos` (`video_id`, `video_path`, `video_name`, `course_name`, `video_image`) VALUES
(58, '\"https://www.youtube.com/embed/ntLJmHOJ0ME\"', 'Introduction to java', 'java', '../../uploadimg/R.png'),
(59, '\"https://www.youtube.com/embed/zIdg7hkqNE0\" ', 'Basic Structure of a Java Program: Understanding our First Java Hello World Program', 'java', '../../uploadimg/R.png'),
(60, '\"https://www.youtube.com/embed/X0zdAG7gfgs\"', 'Java Tutorial: Variables and Data Types in Java Programming', 'java', '../../uploadimg/R.png'),
(61, '\"https://www.youtube.com/embed/vh16INx13h4\" ', 'Associativity of Operators in Java', 'java', '../../uploadimg/R.png'),
(62, '\"https://www.youtube.com/embed/1SJK4Y4axXs\" ', 'String Methods in Java', 'java', '../../uploadimg/R.png'),
(63, '=\"https://www.youtube.com/embed/Y-c8gQV2Tuw\"', 'Relational and Logical Operators in Java', 'java', '../../uploadimg/R.png'),
(65, '\"https://www.youtube.com/embed/OZIRAavoGng\" ', 'What is Python | Python Programming | Complete Introduction to Python ', 'python', '../../uploadimg/OIP.jpeg'),
(66, '\"https://www.youtube.com/embed/o-pRdr8IMWg\" ', 'What is Variable in Python and How to Create Variables in Python |', 'python', '../../uploadimg/OIP.jpeg'),
(67, '\"https://www.youtube.com/embed/lG0yIUsevyY\" ', 'Explain User Input & Type Casting in Python | Command Line Input |', 'python', '../../uploadimg/OIP.jpeg'),
(68, '\"https://www.youtube.com/embed/a0m0T5PUhks\" ', 'What are Membership Operators in Python', 'python', '../../uploadimg/OIP.jpeg');

-- --------------------------------------------------------

--
-- Table structure for table `videos_demo`
--

CREATE TABLE `videos_demo` (
  `id` int(11) NOT NULL,
  `name` varchar(255) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

-- --------------------------------------------------------

--
-- Table structure for table `video_info`
--

CREATE TABLE `video_info` (
  `course_id` int(255) NOT NULL,
  `image` varchar(255) NOT NULL,
  `description` varchar(255) NOT NULL,
  `course_name` varchar(255) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `video_info`
--

INSERT INTO `video_info` (`course_id`, `image`, `description`, `course_name`) VALUES
(20, '../../uploadimg/java_online.png', 'its a complete java tutorial', 'java'),
(24, '../../uploadimg/R.jpeg', 'Basic', 'Cloud Computing'),
(27, '../../uploadimg/Scientific-Python-Scipy-696x500.jpg', 'python videos', 'python');

--
-- Indexes for dumped tables
--

--
-- Indexes for table `answers`
--
ALTER TABLE `answers`
  ADD PRIMARY KEY (`aid`);

--
-- Indexes for table `category`
--
ALTER TABLE `category`
  ADD PRIMARY KEY (`id`);

--
-- Indexes for table `commentsection`
--
ALTER TABLE `commentsection`
  ADD PRIMARY KEY (`cid`);

--
-- Indexes for table `courses`
--
ALTER TABLE `courses`
  ADD PRIMARY KEY (`id`);

--
-- Indexes for table `faq`
--
ALTER TABLE `faq`
  ADD PRIMARY KEY (`id`);

--
-- Indexes for table `login`
--
ALTER TABLE `login`
  ADD PRIMARY KEY (`id`);

--
-- Indexes for table `mytable`
--
ALTER TABLE `mytable`
  ADD PRIMARY KEY (`id`);

--
-- Indexes for table `programming_languages`
--
ALTER TABLE `programming_languages`
  ADD PRIMARY KEY (`id`);

--
-- Indexes for table `questions`
--
ALTER TABLE `questions`
  ADD PRIMARY KEY (`qid`);

--
-- Indexes for table `question_test`
--
ALTER TABLE `question_test`
  ADD PRIMARY KEY (`id`);

--
-- Indexes for table `user`
--
ALTER TABLE `user`
  ADD PRIMARY KEY (`uid`);

--
-- Indexes for table `users`
--
ALTER TABLE `users`
  ADD PRIMARY KEY (`id`);

--
-- Indexes for table `videos`
--
ALTER TABLE `videos`
  ADD PRIMARY KEY (`video_id`);

--
-- Indexes for table `videos_demo`
--
ALTER TABLE `videos_demo`
  ADD PRIMARY KEY (`id`);

--
-- Indexes for table `video_info`
--
ALTER TABLE `video_info`
  ADD PRIMARY KEY (`course_id`);

--
-- AUTO_INCREMENT for dumped tables
--

--
-- AUTO_INCREMENT for table `answers`
--
ALTER TABLE `answers`
  MODIFY `aid` int(255) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=21;

--
-- AUTO_INCREMENT for table `category`
--
ALTER TABLE `category`
  MODIFY `id` int(4) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=15;

--
-- AUTO_INCREMENT for table `commentsection`
--
ALTER TABLE `commentsection`
  MODIFY `cid` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=159;

--
-- AUTO_INCREMENT for table `courses`
--
ALTER TABLE `courses`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=81;

--
-- AUTO_INCREMENT for table `faq`
--
ALTER TABLE `faq`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=4;

--
-- AUTO_INCREMENT for table `login`
--
ALTER TABLE `login`
  MODIFY `id` int(255) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=36;

--
-- AUTO_INCREMENT for table `mytable`
--
ALTER TABLE `mytable`
  MODIFY `id` int(255) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=3;

--
-- AUTO_INCREMENT for table `programming_languages`
--
ALTER TABLE `programming_languages`
  MODIFY `id` int(255) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=14;

--
-- AUTO_INCREMENT for table `questions`
--
ALTER TABLE `questions`
  MODIFY `qid` int(250) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=6;

--
-- AUTO_INCREMENT for table `question_test`
--
ALTER TABLE `question_test`
  MODIFY `id` int(255) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=25;

--
-- AUTO_INCREMENT for table `user`
--
ALTER TABLE `user`
  MODIFY `uid` int(255) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=36;

--
-- AUTO_INCREMENT for table `users`
--
ALTER TABLE `users`
  MODIFY `id` int(255) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=22;

--
-- AUTO_INCREMENT for table `videos`
--
ALTER TABLE `videos`
  MODIFY `video_id` int(255) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=69;

--
-- AUTO_INCREMENT for table `videos_demo`
--
ALTER TABLE `videos_demo`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=34;

--
-- AUTO_INCREMENT for table `video_info`
--
ALTER TABLE `video_info`
  MODIFY `course_id` int(255) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=28;
COMMIT;

/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
